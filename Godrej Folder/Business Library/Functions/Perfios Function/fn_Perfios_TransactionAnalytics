<?xml version='1.0' encoding='UTF-8'?>
<instantiation xmlns='http://www.blazesoft.com/instantiation' template='Q8jH6kHdOYIZ1uG0WKXqvvejqv0' name='fn_Perfios_TransactionAnalytics'>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='1VBfZr8g32Q2FnSWcWO9txQWwEE' name='Instance' id='Instance'>
 </instantiation>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='18uqQPJXnTmKrAiLEOVcQMUAFmD' name='Entry' id='Entry'>
  <instance ref='Source Reference'>
   <instance ref='value'>
    <instance ref='locationVH'>
     <value></value>
    </instance>
    <instance ref='repositoryNameVH'>
     <value></value>
    </instance>
    <instance ref='versionVH'>
     <value></value>
    </instance>
    <instance ref='filterVH'>
     <value></value>
    </instance>
    <instance ref='releaseDateVH'>
     <value></value>
    </instance>
    <instance ref='repositoryAccessVH'>
     <value></value>
    </instance>
   </instance>
  </instance>
  <instance ref='Predictive Model Type'>
   <instance ref='value'>
    <value>NotApplicable</value>
   </instance>
  </instance>
 </instantiation>
 <instance ref='__ENTITY_PROPERTIES__VH__'>
  <instance ref='Test Role'>
   <instance ref='value'>
    <value>None</value>
   </instance>
  </instance>
  <instance ref='Test Case'>
   <instance ref='value'>
    <value></value>
   </instance>
  </instance>
 </instance>
 <instance ref='InstanceName'>
  <value></value>
 </instance>
 <instance ref='UniqueInstanceNameVH'>
  <value>fn_Perfios_TransactionAnalytics1</value>
 </instance>
 <instance ref='FunctionNameVH'>
  <value>fn_Perfios_TransactionAnalytics</value>
 </instance>
 <instance ref='FunctionReturnType'>
  <value>void</value>
 </instance>
 <instance ref='FunctionBodyVH'>
  <value><![CDATA[print("");
print("++++> Entering function :: fn_Perfios_TransactionAnalytics");
aBlazeApplication is some BlazeApplication initially BTCommonVar.termInput.blazeApplication as a BlazeApplication;

try{
productCode is a string initially "";
productCode = message.invocation.decisionService;
applicantId is a string;
applicantType is a string;
//aBlazeApplicant is some BlazeApplicant initially a BlazeApplicant;
applicantId = aBlazeApplicant.customerCif as a string;
applicantType = aBlazeApplicant.applicantType;


 // Self & Related Party Transactions    
 selfRelatedPartyCreditAmountFinal is a real initially 0;
 selfRelatedPartyCreditAmountPerFinal is a real initially 0;
 selfRelatedPartyCreditCountFinal is an real initially 0;
 selfRelatedPartyCreditCountPerFinal is a real initially 0;
 
 selfRelatedPartyDebitAmountFinal is a real initially 0;
 selfRelatedPartyDebitAmountPerFinal is a real initially 0;
 selfRelatedPartyDebitCountFinal is a real initially 0;
 selfRelatedPartyDebitCountPerFinal is a real initially 0;

// Value Transactions
 highValueXnsCreditAmountFinal is a real initially 0;
 highValueXnsCreditAmountPerFinal is a real initially 0;
 highValueXnsCreditCountFinal is an integer initially 0;
 highValueXnsCreditCountPerFinal is a real initially 0;

 highValueXnsDebitAmountFinal is a real initially 0;
 highValueXnsDebitAmountPerFinal is a real initially 0;
 highValueXnsDebitCountFinal is an integer initially 0;
 highValueXnsDebitCountPerFinal is a real initially 0;
 
// Non-Trade Transactions for Credit
 nonTradeXnsAmountTotalBusinessCreditXnsFinal is a real initially 0;
 nonTradeXnsCreditAmountFinal is a real initially 0;
 nonTradeXnsCreditAmountPerFinal is a real initially 0;
 nonTradeXnsCountNumberOfBusinessCreditXnsFinal is a real initially 0;
 nonTradeXnsCreditCountFinal is a real initially 0;
 nonTradeXnsCreditCountPerFinal is a real initially 0;

// Non-Trade Transactions for Debit
 nonTradeXnsAmountTotalBusinessDebitXnsFinal is a real initially 0;
 nonTradeXnsDebitAmountFinal is a real initially 0;
 nonTradeXnsDebitAmountPerFinal is a real initially 0;
 nonTradeXnsCountNumberOfBusinessDebitXnsFinal is a real initially 0;
 nonTradeXnsDebitCountFinal is a real initially 0;
 nonTradeXnsDebitCountPerFinal is a real initially 0;


finalCreditAmount is a real initially 0;
finalCreditCount is a real initially 0;
finalDebitAmount is a real initially 0;
finalDebitCount is a real initially 0;
finalCircularXnsAmount is a real initially 0;
finalCircularXnsCount is a real initially 0;
finalCircularXnsAmountPer is a real initially 0;
finalCircularXnsCountPer is a real initially 0;
 

// Create Object of BlazeAccountAnalysis for Combined Calculations

blazeAccountAnalysis is some BlazeAccountAnalysis initially a BlazeAccountAnalysis;
blazeAccountAnalysis.blazeMonthlyDetailArray = an array of BlazeMonthlyDetail;
blazeAccountAnalysis.blazeMonthlyDataArray = an array of BlazeMonthlyData;


accAnalysisArrCount is an integer initially 0;


if(perfiosData.data.accountAnalysis is known and perfiosData.data.accountAnalysis is not null)then{
	accAnalysisArrCount = perfiosData.data.accountAnalysis.count;
}

	i is an integer initially 0;
if(perfiosData.data.accountAnalysis is known and perfiosData.data.additionalMonthlyDetails is known) then{
	

	j is an integer initially 0;
	
	// ----------------------- Account Analysis Loop Start ------------------------  
	while(i < accAnalysisArrCount)
	do {
		
		monthlyDetalisCount is an integer initially 0;
		monthlyDetailsArrayCount is an integer initially 0;
		
		totalCreditAmount is a real initially 0;
		totalCreditCount is a real initially 0;
		totalDebitAmount is a real initially 0;
		totalDebitCount is a real initially 0;
		circularXnsAmount is a real initially 0;
		circularXnsCount is a real initially 0;
		
		highValueXnsCreditAmount is a real initially 0;
		highValueXnsCreditAmountPer is a real initially 0;
		highValueXnsCreditCount is an integer initially 0;
		highValueXnsCreditCountPer is a real initially 0;

		highValueXnsDebitAmount is a real initially 0;
		highValueXnsDebitAmountPer is a real initially 0;
		highValueXnsDebitCount is an integer initially 0;
		highValueXnsDebitCountPer is a real initially 0;
		
		if(perfiosData.data.accountAnalysis[i].monthlyDetails is known) then{
			monthlyDetailsArrayCount = perfiosData.data.accountAnalysis[i].monthlyDetails.count - 12;
		}
		
		j=0;
		for each MonthlyDetail in perfiosData.data.accountAnalysis[i].monthlyDetails such that(it <> unknown)
		do {
			
			aMonthlyDetails is some MonthlyDetail initially it as a MonthlyDetail;
		
			// ------------- Latest 12 Months Data -------------
			if(monthlyDetalisCount >= monthlyDetailsArrayCount) then{
				
				if(aMonthlyDetails.totalCredit is known) then{
					totalCreditAmount = totalCreditAmount + aMonthlyDetails.totalCredit;
				}
				if(aMonthlyDetails.credits is known) then{
					totalCreditCount = totalCreditCount + aMonthlyDetails.credits;
				}
				if(aMonthlyDetails.totalDebit is known) then{
					totalDebitAmount = totalDebitAmount + aMonthlyDetails.totalDebit;
				}
			
				if(aMonthlyDetails.debits is known) then{
					totalDebitCount = totalDebitCount + aMonthlyDetails.debits;
				}
			
				// Calculate circularXnsAmount
				if(aMonthlyDetails.totalSamePartyAmountCreditDebit is known) then{
					circularXnsAmount = circularXnsAmount + aMonthlyDetails.totalSamePartyAmountCreditDebit;
				}
			
				// Calculate circularXnsCount
				if(aMonthlyDetails.samePartyAmountCreditDebits is known) then{
					circularXnsCount = circularXnsCount + aMonthlyDetails.samePartyAmountCreditDebits;
				}
				
				if(i=0) then{
					aBlazeMonthlyDetail is some BlazeMonthlyDetail initially a BlazeMonthlyDetail;
					aBlazeMonthlyDetail.monthName = aMonthlyDetails.monthName;
					aBlazeMonthlyDetail.totalCredit = 0;
					aBlazeMonthlyDetail.credits  = 0;
					aBlazeMonthlyDetail.totalDebit = 0;
					aBlazeMonthlyDetail.debits = 0;
					aBlazeMonthlyDetail.totalSamePartyAmountCreditDebit = 0;
					aBlazeMonthlyDetail.samePartyAmountCreditDebits = 0;
					
					if(aMonthlyDetails.totalCredit is known)then{
						aBlazeMonthlyDetail.totalCredit = aMonthlyDetails.totalCredit;
					}
					if(aMonthlyDetails.credits is known)then{
						aBlazeMonthlyDetail.credits = aMonthlyDetails.credits;
					}
					if(aMonthlyDetails.totalDebit is known)then{
						aBlazeMonthlyDetail.totalDebit = aMonthlyDetails.totalDebit;
					}
					if(aMonthlyDetails.debits is known)then{
						aBlazeMonthlyDetail.debits = aMonthlyDetails.debits;
					}
					if(aMonthlyDetails.totalSamePartyAmountCreditDebit is known)then{
						aBlazeMonthlyDetail.totalSamePartyAmountCreditDebit = aMonthlyDetails.totalSamePartyAmountCreditDebit;
					}
					if(aMonthlyDetails.samePartyAmountCreditDebits is known)then{
						aBlazeMonthlyDetail.samePartyAmountCreditDebits = aMonthlyDetails.samePartyAmountCreditDebits;
					}
					
					blazeAccountAnalysis.blazeMonthlyDetailArray.append(aBlazeMonthlyDetail);
				}
				else{
					
					if(aMonthlyDetails.totalCredit is known)then{
						blazeAccountAnalysis.blazeMonthlyDetailArray[j].totalCredit = blazeAccountAnalysis.blazeMonthlyDetailArray[j].totalCredit + aMonthlyDetails.totalCredit;
					}
					if(aMonthlyDetails.credits is known)then{
						blazeAccountAnalysis.blazeMonthlyDetailArray[j].credits = blazeAccountAnalysis.blazeMonthlyDetailArray[j].credits + aMonthlyDetails.credits;
					}
					if(aMonthlyDetails.totalDebit is known)then{
						blazeAccountAnalysis.blazeMonthlyDetailArray[j].totalDebit = blazeAccountAnalysis.blazeMonthlyDetailArray[j].totalDebit + aMonthlyDetails.totalDebit;
					}
					if(aMonthlyDetails.debits is known)then{
						blazeAccountAnalysis.blazeMonthlyDetailArray[j].debits = blazeAccountAnalysis.blazeMonthlyDetailArray[j].debits + aMonthlyDetails.debits;
					}
					if(aMonthlyDetails.totalSamePartyAmountCreditDebit is known)then{
						blazeAccountAnalysis.blazeMonthlyDetailArray[j].totalSamePartyAmountCreditDebit = blazeAccountAnalysis.blazeMonthlyDetailArray[j].totalSamePartyAmountCreditDebit + aMonthlyDetails.totalSamePartyAmountCreditDebit;
					}
					if(aMonthlyDetails.samePartyAmountCreditDebits is known)then{
						blazeAccountAnalysis.blazeMonthlyDetailArray[j].samePartyAmountCreditDebits = blazeAccountAnalysis.blazeMonthlyDetailArray[j].samePartyAmountCreditDebits + aMonthlyDetails.samePartyAmountCreditDebits;
					}
				
				}
			}
			monthlyDetalisCount = monthlyDetalisCount + 1;
			j = j +1;
		}
		
		// Entering CombinedHighValueCreditXn Loop
		for each CombinedHighValueCreditXn in perfiosData.data.combinedHighValueCreditXns such that(it <> unknown)
			do {
			combinedHighValueCreditX is some CombinedHighValueCreditXn initially it as a CombinedHighValueCreditXn;
			
				// Calculate highValueXnsCreditAmount
				if((combinedHighValueCreditX.amount is known and combinedHighValueCreditX.accNo is known) and perfiosData.data.accountAnalysis[i].accountNo is known) then{
					if(combinedHighValueCreditX.accNo = perfiosData.data.accountAnalysis[i].accountNo)then{
						
						highValueXnsCreditAmount = highValueXnsCreditAmount + combinedHighValueCreditX.amount;
						
						// Calculate highValueXnsCreditCount
						highValueXnsCreditCount = highValueXnsCreditCount + 1;
					}
				}
			// Exiting CombinedHighValueCreditXn Loop
		}
		
		// Calculate highValueXnsCreditAmountPer
		if(highValueXnsCreditAmount is known and totalCreditAmount is known) then{
			highValueXnsCreditAmountPer = (highValueXnsCreditAmount/totalCreditAmount)*100;
		}
		
		// Calculate applicant.highValueXnsCreditCountPer
		if(highValueXnsCreditCount is known and totalCreditCount is known) then{
			highValueXnsCreditCountPer = (highValueXnsCreditCount/totalCreditCount)*100;
		}
	
		// Calculate highValueXnsCreditAmountFinal
		highValueXnsCreditAmountFinal = highValueXnsCreditAmountFinal + highValueXnsCreditAmount;
		
		// Calculate highValueXnsCreditCount
		highValueXnsCreditCountFinal = highValueXnsCreditCountFinal + highValueXnsCreditCount;
	
		// Entering CombinedHighValueDebitXns Loop
		for each CombinedHighValueDebitXns in perfiosData.data.combinedHighValueDebitXns such that(it <> unknown)
			do {
			combinedHighValueDebitX is some CombinedHighValueDebitXns initially it as a CombinedHighValueDebitXns;
		
			// Calculate highValueXnsDebitAmount
			if((combinedHighValueDebitX.amount is known and combinedHighValueDebitX.accNo is known) and perfiosData.data.accountAnalysis[i].accountNo is known) then{
				if(combinedHighValueDebitX.accNo = perfiosData.data.accountAnalysis[i].accountNo)then{
					
					highValueXnsDebitAmount = highValueXnsDebitAmount + combinedHighValueDebitX.amount;
					
					// Calculate highValueXnsDebitCount
					highValueXnsDebitCount = highValueXnsDebitCount + 1;
				}
			}
			// Exiting CombinedHighValueDebitXns Loop
		}
		
		// Calculate highValueXnsDebitAmountPer
		if(highValueXnsDebitAmount is known and totalDebitAmount is known) then{
			highValueXnsDebitAmountPer = (highValueXnsDebitAmount/totalDebitAmount)*100;
		}
	
		// Calculate highValueXnsDebitCountPer
		if(highValueXnsDebitCount is known and totalDebitCount is known) then{
			highValueXnsDebitCountPer = (highValueXnsDebitCount/totalDebitCount)*100;
		}
		
		// Calculate highValueXnsDebitAmountFinal
		highValueXnsDebitAmountFinal = highValueXnsDebitAmountFinal + highValueXnsDebitAmount;
		
		// Calculate highValueXnsDebitCountFinal
		highValueXnsDebitCountFinal = highValueXnsDebitCountFinal + highValueXnsDebitCount;
		
		
		
		if(i = 0)then{
			j=0;
			monthDataCount is an integer initially 0;
			monthlyDataArrayCount is an integer initially 0;
			
			// ---------------Start MonthlyData1 Variable -----------------
			selfRelatedPartyCreditAmountMonData1 is a real initially 0;
			selfRelatedPartyCreditAmountPerMonData1 is a real initially 0;
			selfRelatedPartyCreditCountMonData1 is a real initially 0;
			selfRelatedPartyCreditCountPerMonData1 is a real initially 0;
			selfRelatedPartyDebitAmountMonData1 is a real initially 0;
			selfRelatedPartyDebitAmountPerMonData1 is a real initially 0;
			selfRelatedPartyDebitCountMonData1 is a real initially 0;
			selfRelatedPartyDebitCountPerMonData1 is a real initially 0;
			
			nonTradeXnsAmountTotalBusinessCreditXnsMonData1 is a real initially 0;
			nonTradeXnsCountNumberOfBusinessCreditXnsMonData1 is a real initially 0;
			nonTradeXnsAmountTotalBusinessDebitXnsMonData1 is a real initially 0;
			nonTradeXnsCountNumberOfBusinessDebitXnsMonData1 is a real initially 0;
			
			nonTradeXnsCreditAmountMonData1 is a real initially 0;
			nonTradeXnsCreditAmountPerMonData1 is a real initially 0;
			nonTradeXnsCreditCountMonData1 is a real initially 0;
			nonTradeXnsCreditCountPerMonData1 is a real initially 0;
			nonTradeXnsDebitAmountMonData1 is a real initially 0;
			nonTradeXnsDebitAmountPerMonData1 is a real initially 0;
			nonTradeXnsDebitCountMonData1 is a real initially 0;
			nonTradeXnsDebitCountPerMonData1 is a real initially 0;

			circularXnsAmountPerMonData1 is a real initially 0;
			circularXnsCountPerMonData1 is a real initially 0;
			 
			// ---------------End MonthlyData1 Variable -------------------
			
			
			
			monthlyDataArrayCount = perfiosData.data.additionalMonthlyDetails.monthlyData1.count - 12;
			
			// --------------------- Start MonthlyData1 Loop ------------------------
			for each MonthlyData in perfiosData.data.additionalMonthlyDetails.monthlyData1 such that(it <> unknown) do {
				
				aBlazeMonthlyData is some BlazeMonthlyData initially a BlazeMonthlyData;
				
				// Calculation for Combined variables
				aBlazeMonthlyData.totalOfSelfAndRelatedPartyCreditTxns = 0;
				aBlazeMonthlyData.numberOfSelfAndRelatedPartyCreditTxns = 0;
				aBlazeMonthlyData.totalOfSelfAndRelatedPartyDebitTxns = 0;
				aBlazeMonthlyData.numberOfSelfAndRelatedPartyDebitTxns = 0;
				aBlazeMonthlyData.totalBusinessCreditTxns = 0;
				aBlazeMonthlyData.numberOfBusinessCreditTxns = 0;
				aBlazeMonthlyData.totalBusinessDebitTxns = 0;
				aBlazeMonthlyData.numberOfBusinessDebitTxns = 0;
				
				//------------------ latest 12 month ------------------
				if( monthDataCount >= monthlyDataArrayCount) then {
			
					if(it.totalOfSelfAndRelatedPartyCreditTxns is known) then{
						
						// Calculate selfRelatedPartyCreditAmount for individual account
						selfRelatedPartyCreditAmountMonData1 = selfRelatedPartyCreditAmountMonData1 + it.totalOfSelfAndRelatedPartyCreditTxns;
						
						// Calculate selfRelatedPartyCreditAmount  for final account
						aBlazeMonthlyData.totalOfSelfAndRelatedPartyCreditTxns = it.totalOfSelfAndRelatedPartyCreditTxns;
					}
					if(it.numberOfSelfAndRelatedPartyCreditTxns is known) then{
						
						// Calculate selfRelatedPartyCreditCount for individual account
						selfRelatedPartyCreditCountMonData1 = selfRelatedPartyCreditCountMonData1 + it.numberOfSelfAndRelatedPartyCreditTxns;
						
						// Calculate selfRelatedPartyCreditCount for final account
						aBlazeMonthlyData.numberOfSelfAndRelatedPartyCreditTxns = it.numberOfSelfAndRelatedPartyCreditTxns;
					}
					if(it.totalOfSelfAndRelatedPartyDebitTxns is known) then{
						
						// Calculate selfRelatedPartyDebitAmount for individual account
						selfRelatedPartyDebitAmountMonData1 = selfRelatedPartyDebitAmountMonData1 + it.totalOfSelfAndRelatedPartyDebitTxns;
						
						// Calculate selfRelatedPartyDebitAmount for final account
						aBlazeMonthlyData.totalOfSelfAndRelatedPartyDebitTxns = it.totalOfSelfAndRelatedPartyDebitTxns;
					}
					if(it.numberOfSelfAndRelatedPartyDebitTxns is known) then{
						
						// Calculate selfRelatedPartyDebitCount for individual account
						selfRelatedPartyDebitCountMonData1 = selfRelatedPartyDebitCountMonData1 + it.numberOfSelfAndRelatedPartyDebitTxns;
						
						// Calculate selfRelatedPartyDebitCount for final account
						aBlazeMonthlyData.numberOfSelfAndRelatedPartyDebitTxns = it.numberOfSelfAndRelatedPartyDebitTxns;
					}
			
					
					if(it.totalBusinessCreditTxns is known) then{
						
						// Calculate totalBusinessCreditTxns for individual account
						nonTradeXnsAmountTotalBusinessCreditXnsMonData1 = nonTradeXnsAmountTotalBusinessCreditXnsMonData1 + it.totalBusinessCreditTxns;
						
						// Calculate totalBusinessCreditTxns for final account
						aBlazeMonthlyData.totalBusinessCreditTxns = it.totalBusinessCreditTxns;
					}
					if(it.numberOfBusinessCreditTxns is known) then{
						
						// Calculate numberOfBusinessCreditTxns  for individual account
						nonTradeXnsCountNumberOfBusinessCreditXnsMonData1 = nonTradeXnsCountNumberOfBusinessCreditXnsMonData1 + it.numberOfBusinessCreditTxns;
						
						// Calculate numberOfBusinessCreditTxns  for final account
						aBlazeMonthlyData.numberOfBusinessCreditTxns = it.numberOfBusinessCreditTxns;
					}
					if(it.totalBusinessDebitTxns is known) then{
						
						// Calculate totalBusinessDebitTxns for individual account
						nonTradeXnsAmountTotalBusinessDebitXnsMonData1 = nonTradeXnsAmountTotalBusinessDebitXnsMonData1 + it.totalBusinessDebitTxns;
						
						// Calculate totalBusinessDebitTxns for final account
						aBlazeMonthlyData.totalBusinessDebitTxns = it.totalBusinessDebitTxns;
					}
					if(it.numberOfBusinessDebitTxns is known) then{
						
						// Calculate numberOfBusinessDebitTxns  for individual account
						nonTradeXnsCountNumberOfBusinessDebitXnsMonData1 = nonTradeXnsCountNumberOfBusinessDebitXnsMonData1 + it.numberOfBusinessDebitTxns;
						
						// Calculate numberOfBusinessDebitTxns  for final account
						aBlazeMonthlyData.numberOfBusinessDebitTxns = it.numberOfBusinessDebitTxns;
					}
				}
				blazeAccountAnalysis.blazeMonthlyDataArray.append(aBlazeMonthlyData);
				monthDataCount = monthDataCount + 1;
				j = j + 1;
			}
			// ------------------------- End MonthlyData1 Loop -----------------------
			
			// ---------------- Self & Related Party Transactions Start-------------------
			
			// Calculate selfRelatedPartyCreditAmountPerMonData1
			if(selfRelatedPartyCreditAmountMonData1 is known and totalCreditAmount is known) then{
				selfRelatedPartyCreditAmountPerMonData1 = (selfRelatedPartyCreditAmountMonData1/totalCreditAmount)*100;
			}
			
			// Calculate selfRelatedPartyCreditCountPerMonData1
			if(selfRelatedPartyCreditCountMonData1 is known and totalCreditCount is known) then{
				selfRelatedPartyCreditCountPerMonData1 = (selfRelatedPartyCreditCountMonData1/totalCreditCount)*100;
			}
			
			// Calculate selfRelatedPartyDebitAmountPerMonData1
			if(selfRelatedPartyDebitAmountMonData1 is known and totalDebitAmount is known) then{
				selfRelatedPartyDebitAmountPerMonData1 = (selfRelatedPartyDebitAmountMonData1/totalDebitAmount)*100;
			}
			
			// Calculate selfRelatedPartyDebitCountPerMonData1
			if(selfRelatedPartyDebitCountMonData1 is known and totalDebitCount is known) then{
				selfRelatedPartyDebitCountPerMonData1 = (selfRelatedPartyDebitCountMonData1/totalDebitCount)*100;
			}
			// ---------------- Self & Related Party Transactions End-------------------
			
			// -------------------- Non-Trade Transactions start -----------------------
			
			// Calculate nonTradeXnsCreditAmountMonData1
			if(nonTradeXnsAmountTotalBusinessCreditXnsMonData1 is known and totalCreditAmount is known) then{
				nonTradeXnsCreditAmountMonData1 = (nonTradeXnsAmountTotalBusinessCreditXnsMonData1 - totalCreditAmount);
			}
			// Calculate nonTradeXnsCreditAmountPerMonData1
			if(nonTradeXnsCreditAmountMonData1 is known and totalCreditAmount is known) then{
				nonTradeXnsCreditAmountPerMonData1 = (nonTradeXnsCreditAmountMonData1/totalCreditAmount)*100;
			}
			
			// Calculate nonTradeXnsCreditCountMonData1
			if(nonTradeXnsCountNumberOfBusinessCreditXnsMonData1 is known and totalCreditCount is known) then{
				nonTradeXnsCreditCountMonData1 = nonTradeXnsCountNumberOfBusinessCreditXnsMonData1 - totalCreditCount;
			}
			// Calculate nonTradeXnsCreditCountPer
			if(nonTradeXnsCreditCountMonData1 is known and totalCreditCount is known) then{
				nonTradeXnsCreditCountPerMonData1 = (nonTradeXnsCreditCountMonData1/totalCreditCount)*100;
			}
			
			// Calculate nonTradeXnsDebitAmountMonData1
			if(nonTradeXnsAmountTotalBusinessDebitXnsMonData1 is known and totalDebitAmount is known) then{
				nonTradeXnsDebitAmountMonData1 = nonTradeXnsAmountTotalBusinessDebitXnsMonData1 - totalDebitAmount;
			}
	
			// Calculate nonTradeXnsDebitAmountPerMonData1
			if(nonTradeXnsDebitAmountMonData1 is known and totalDebitAmount is known) then{
				nonTradeXnsDebitAmountPerMonData1 = (nonTradeXnsDebitAmountMonData1/totalDebitAmount)*100;
			}
			
			// Calculate nonTradeXnsDebitCountMonData1
			if(nonTradeXnsCountNumberOfBusinessDebitXnsMonData1 is known and totalDebitCount is known) then{
				nonTradeXnsDebitCountMonData1 = nonTradeXnsCountNumberOfBusinessDebitXnsMonData1 - totalDebitCount;
			}
	
			// Calculate nonTradeXnsDebitCountPerMonData1
			if(nonTradeXnsDebitCountMonData1 is known and totalDebitCount is known) then{
				nonTradeXnsDebitCountPerMonData1 = (nonTradeXnsDebitCountMonData1/totalDebitCount)*100;
			}
		
			// -------------------- Non-Trade Transactions End -------------------------
			
			// ------------------- Circular Transactions Start -------------------------
			
			// Calculate circularXnsAmountPerMonData1
			if(circularXnsAmount is known) then{
				circularXnsAmountPerMonData1 = (circularXnsAmount / (totalCreditAmount + totalDebitAmount))*100;
			}
	
			// Calculate circularXnsCountPerMonData1
			if(circularXnsCount is known) then{
				circularXnsCountPerMonData1 = (circularXnsCount / (totalDebitCount + totalCreditCount))*100;
			}
			
			// ------------------- Circular Transactions End ---------------------------
			
			// ############## Append ###################
			
			fn_AppendCalculatedVariable(message,"selfRelatedPartyCreditAmountMonData1", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyCreditAmountMonData1,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyCreditAmountPerMonData1", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyCreditAmountPerMonData1,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyCreditCountMonData1", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyCreditCountMonData1,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyCreditCountPerMonData1", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyCreditCountPerMonData1,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyDebitAmountMonData1", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyDebitAmountMonData1,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyDebitAmountPerMonData1", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyDebitAmountPerMonData1,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyDebitCountMonData1", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyDebitCountMonData1,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyDebitCountPerMonData1", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyDebitCountPerMonData1,-2) as a string);
	
			fn_AppendCalculatedVariable(message,"highValueXnsCreditAmount", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(highValueXnsCreditAmount,-2) as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsCreditAmountPer", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(highValueXnsCreditAmountPer,-2) as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsCreditCount", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, highValueXnsCreditCount as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsCreditCountPer", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(highValueXnsCreditCountPer,-2) as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsDebitAmount", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(highValueXnsDebitAmount,-2) as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsDebitAmountPer", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(highValueXnsDebitAmountPer,-2) as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsDebitCount", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, highValueXnsDebitCount as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsDebitCountPer", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(highValueXnsDebitCountPer,-2) as a string);
	
			fn_AppendCalculatedVariable(message,"nonTradeXnsCreditAmountMonData1", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsCreditAmountMonData1,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsCreditAmountPerMonData1", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsCreditAmountPerMonData1,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsCreditCountMonData1", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsCreditCountMonData1,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsCreditCountPerMonData1", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsCreditCountPerMonData1,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsDebitAmountMonData1", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsDebitAmountMonData1,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsDebitAmountPerMonData1", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsDebitAmountPerMonData1,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsDebitCountMonData1", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsDebitCountMonData1,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsDebitCountPerMonData1", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsDebitCountPerMonData1,-2) as a string);
	
	
			fn_AppendCalculatedVariable(message,"circularXnsAmount1", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(circularXnsAmount,-2) as a string);
			fn_AppendCalculatedVariable(message,"circularXnsAmountPerMonData1", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(circularXnsAmountPerMonData1,-2) as a string);
			fn_AppendCalculatedVariable(message,"circularXnsCount1", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(circularXnsCount,-2) as a string);
			fn_AppendCalculatedVariable(message,"circularXnsCountPerMonData1", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(circularXnsCountPerMonData1,-2) as a string);
			
			print("selfRelatedPartyCreditAmountMonData1--------------------------------->"selfRelatedPartyCreditAmountMonData1);
			print("selfRelatedPartyCreditAmountPerMonData1--------------------------------->"selfRelatedPartyCreditAmountPerMonData1);
			print("selfRelatedPartyCreditCountMonData1--------------------------------->"selfRelatedPartyCreditCountMonData1);
			print("selfRelatedPartyCreditCountPerMonData1--------------------------------->"selfRelatedPartyCreditCountPerMonData1);
			print("selfRelatedPartyDebitAmountMonData1--------------------------------->"selfRelatedPartyDebitAmountMonData1);
			print("selfRelatedPartyDebitAmountPerMonData1--------------------------------->"selfRelatedPartyDebitAmountPerMonData1);
			print("selfRelatedPartyDebitCountMonData1--------------------------------->"selfRelatedPartyDebitCountMonData1);
			print("selfRelatedPartyDebitCountPerMonData1--------------------------------->"selfRelatedPartyDebitCountPerMonData1);
			print("highValueXnsCreditAmount1--------------------------------->"highValueXnsCreditAmount);
			print("highValueXnsCreditAmountPer1--------------------------------->"highValueXnsCreditAmountPer);
			print("highValueXnsCreditCount1--------------------------------->"highValueXnsCreditCount);
			print("highValueXnsCreditCountPer1--------------------------------->"highValueXnsCreditCountPer);
			print("highValueXnsDebitAmount1--------------------------------->"highValueXnsDebitAmount);
			print("highValueXnsDebitAmountPer1--------------------------------->"highValueXnsDebitAmountPer);
			print("highValueXnsDebitCount1--------------------------------->"highValueXnsDebitCount);
			print("highValueXnsDebitCountPer1--------------------------------->"highValueXnsDebitCountPer);
			print("nonTradeXnsCreditAmountMonData1--------------------------------->"nonTradeXnsCreditAmountMonData1);
			print("nonTradeXnsCreditAmountPerMonData1--------------------------------->"nonTradeXnsCreditAmountPerMonData1);
			print("nonTradeXnsCreditCountMonData1--------------------------------->"nonTradeXnsCreditCountMonData1);
			print("nonTradeXnsCreditCountPerMonData1--------------------------------->"nonTradeXnsCreditCountPerMonData1);
			print("nonTradeXnsDebitAmountMonData1--------------------------------->"nonTradeXnsDebitAmountMonData1);
			print("nonTradeXnsDebitAmountPerMonData1--------------------------------->"nonTradeXnsDebitAmountPerMonData1);
			print("nonTradeXnsDebitCountMonData1--------------------------------->"nonTradeXnsDebitCountMonData1);
			print("nonTradeXnsDebitCountPerMonData1--------------------------------->"nonTradeXnsDebitCountPerMonData1);
			
			print("circularXnsAmount--------------------------------->"circularXnsAmount);
			print("circularXnsAmountPerMonData1--------------------------------->"circularXnsAmountPerMonData1);
			print("circularXnsCount--------------------------------->"circularXnsCount);
			print("circularXnsCountPerMonData1--------------------------------->"circularXnsCountPerMonData1);
		}
		else if(i = 1)then{
			j=0;
			monthDataCount is an integer initially 0;
			monthlyDataArrayCount is an integer initially 0;
			
			// ---------------Start MonthlyData2 Variable -----------------
			selfRelatedPartyCreditAmountMonData2 is a real initially 0;
			selfRelatedPartyCreditAmountPerMonData2 is a real initially 0;
			selfRelatedPartyCreditCountMonData2 is a real initially 0;
			selfRelatedPartyCreditCountPerMonData2 is a real initially 0;
			selfRelatedPartyDebitAmountMonData2 is a real initially 0;
			selfRelatedPartyDebitAmountPerMonData2 is a real initially 0;
			selfRelatedPartyDebitCountMonData2 is a real initially 0;
			selfRelatedPartyDebitCountPerMonData2 is a real initially 0;
			
			nonTradeXnsAmountTotalBusinessCreditXnsMonData2 is a real initially 0;
			nonTradeXnsCountNumberOfBusinessCreditXnsMonData2 is a real initially 0;
			nonTradeXnsAmountTotalBusinessDebitXnsMonData2 is a real initially 0;
			nonTradeXnsCountNumberOfBusinessDebitXnsMonData2 is a real initially 0;
			
			nonTradeXnsCreditAmountMonData2 is a real initially 0;
			nonTradeXnsCreditAmountPerMonData2 is a real initially 0;
			nonTradeXnsCreditCountMonData2 is a real initially 0;
			nonTradeXnsCreditCountPerMonData2 is a real initially 0;
			nonTradeXnsDebitAmountMonData2 is a real initially 0;
			nonTradeXnsDebitAmountPerMonData2 is a real initially 0;
			nonTradeXnsDebitCountMonData2 is a real initially 0;
			nonTradeXnsDebitCountPerMonData2 is a real initially 0;

			circularXnsAmountPerMonData2 is a real initially 0;
			circularXnsCountPerMonData2 is a real initially 0;
			 
			// ---------------End MonthlyData2 Variable -------------------
			
			
			
			monthlyDataArrayCount = perfiosData.data.additionalMonthlyDetails.monthlyData2.count - 12;
			
			// --------------------- Start MonthlyData2 Loop ------------------------
			for each MonthlyData in perfiosData.data.additionalMonthlyDetails.monthlyData2 such that(it <> unknown) do {
				
				
				//------------------ latest 12 month ------------------
				if( monthDataCount >= monthlyDataArrayCount) then {
			
					if(it.totalOfSelfAndRelatedPartyCreditTxns is known) then{
						
						// Calculate selfRelatedPartyCreditAmount for individual account
						selfRelatedPartyCreditAmountMonData2 = selfRelatedPartyCreditAmountMonData2 + it.totalOfSelfAndRelatedPartyCreditTxns;
						
						// Calculate selfRelatedPartyCreditAmount  for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyCreditTxns + it.totalOfSelfAndRelatedPartyCreditTxns;
					}
					if(it.numberOfSelfAndRelatedPartyCreditTxns is known) then{
						
						// Calculate selfRelatedPartyCreditCount for individual account
						selfRelatedPartyCreditCountMonData2 = selfRelatedPartyCreditCountMonData2 + it.numberOfSelfAndRelatedPartyCreditTxns;
						
						// Calculate selfRelatedPartyCreditCount for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyCreditTxns + it.numberOfSelfAndRelatedPartyCreditTxns;
					}
					if(it.totalOfSelfAndRelatedPartyDebitTxns is known) then{
						
						// Calculate selfRelatedPartyDebitAmount for individual account
						selfRelatedPartyDebitAmountMonData2 = selfRelatedPartyDebitAmountMonData2 + it.totalOfSelfAndRelatedPartyDebitTxns;
						
						// Calculate selfRelatedPartyDebitAmount for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyDebitTxns + it.totalOfSelfAndRelatedPartyDebitTxns;
					}
					if(it.numberOfSelfAndRelatedPartyDebitTxns is known) then{
						
						// Calculate selfRelatedPartyDebitCount for individual account
						selfRelatedPartyDebitCountMonData2 = selfRelatedPartyDebitCountMonData2 + it.numberOfSelfAndRelatedPartyDebitTxns;
						
						// Calculate selfRelatedPartyDebitCount for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyDebitTxns + it.numberOfSelfAndRelatedPartyDebitTxns;
					}
	
					if(it.totalBusinessCreditTxns is known) then{
						
						// Calculate totalBusinessCreditTxns for individual account
						nonTradeXnsAmountTotalBusinessCreditXnsMonData2 = nonTradeXnsAmountTotalBusinessCreditXnsMonData2 + it.totalBusinessCreditTxns;
						
						// Calculate totalBusinessCreditTxns for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessCreditTxns + it.totalBusinessCreditTxns;
					}
					if(it.numberOfBusinessCreditTxns is known) then{
						
						// Calculate numberOfBusinessCreditTxns  for individual account
						nonTradeXnsCountNumberOfBusinessCreditXnsMonData2 = nonTradeXnsCountNumberOfBusinessCreditXnsMonData2 + it.numberOfBusinessCreditTxns;
						
						// Calculate numberOfBusinessCreditTxns  for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns + it.numberOfBusinessCreditTxns;
					}
					if(it.totalBusinessDebitTxns is known) then{
						
						// Calculate totalBusinessDebitTxns for individual account
						nonTradeXnsAmountTotalBusinessDebitXnsMonData2 = nonTradeXnsAmountTotalBusinessDebitXnsMonData2 + it.totalBusinessDebitTxns;
						
						// Calculate totalBusinessDebitTxns for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessDebitTxns + it.totalBusinessDebitTxns;
					}
					if(it.numberOfBusinessDebitTxns is known) then{
						
						// Calculate numberOfBusinessDebitTxns  for individual account
						nonTradeXnsCountNumberOfBusinessDebitXnsMonData2 = nonTradeXnsCountNumberOfBusinessDebitXnsMonData2 + it.numberOfBusinessDebitTxns;
						
						// Calculate numberOfBusinessDebitTxns  for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns + it.numberOfBusinessDebitTxns;
					}
				}
				monthDataCount = monthDataCount + 1;
				j = j + 1;
			}
			// ------------------------- End MonthlyData1 Loop -----------------------
			
			// ---------------- Self & Related Party Transactions Start-------------------
			
			// Calculate selfRelatedPartyCreditAmountPerMonData2
			if(selfRelatedPartyCreditAmountMonData2 is known and totalCreditAmount is known) then{
				selfRelatedPartyCreditAmountPerMonData2 = (selfRelatedPartyCreditAmountMonData2/totalCreditAmount)*100;
			}
			
			// Calculate selfRelatedPartyCreditCountPerMonData2
			if(selfRelatedPartyCreditCountMonData2 is known and totalCreditCount is known) then{
				selfRelatedPartyCreditCountPerMonData2 = (selfRelatedPartyCreditCountMonData2/totalCreditCount)*100;
			}
			
			// Calculate selfRelatedPartyDebitAmountPerMonData2
			if(selfRelatedPartyDebitAmountMonData2 is known and totalDebitAmount is known) then{
				selfRelatedPartyDebitAmountPerMonData2 = (selfRelatedPartyDebitAmountMonData2/totalDebitAmount)*100;
			}
			
			// Calculate selfRelatedPartyDebitCountPerMonData2
			if(selfRelatedPartyDebitCountMonData2 is known and totalDebitCount is known) then{
				selfRelatedPartyDebitCountPerMonData2 = (selfRelatedPartyDebitCountMonData2/totalDebitCount)*100;
			}
			// ---------------- Self & Related Party Transactions End-------------------
			
			// -------------------- Non-Trade Transactions start -----------------------
			
			// Calculate nonTradeXnsCreditAmountMonData2
			if(nonTradeXnsAmountTotalBusinessCreditXnsMonData2 is known and totalCreditAmount is known) then{
				nonTradeXnsCreditAmountMonData2 = (nonTradeXnsAmountTotalBusinessCreditXnsMonData2 - totalCreditAmount);
			}
			// Calculate nonTradeXnsCreditAmountPerMonData2
			if(nonTradeXnsCreditAmountMonData2 is known and totalCreditAmount is known) then{
				nonTradeXnsCreditAmountPerMonData2 = (nonTradeXnsCreditAmountMonData2/totalCreditAmount)*100;
			}
			
			// Calculate nonTradeXnsCreditCountMonData2
			if(nonTradeXnsCountNumberOfBusinessCreditXnsMonData2 is known and totalCreditCount is known) then{
				nonTradeXnsCreditCountMonData2 = nonTradeXnsCountNumberOfBusinessCreditXnsMonData2 - totalCreditCount;
			}
			// Calculate nonTradeXnsCreditCountPerMonData2
			if(nonTradeXnsCreditCountMonData2 is known and totalCreditCount is known) then{
				nonTradeXnsCreditCountPerMonData2 = (nonTradeXnsCreditCountMonData2/totalCreditCount)*100;
			}
			
			// Calculate nonTradeXnsDebitAmountMonData2
			if(nonTradeXnsAmountTotalBusinessDebitXnsMonData2 is known and totalDebitAmount is known) then{
				nonTradeXnsDebitAmountMonData2 = nonTradeXnsAmountTotalBusinessDebitXnsMonData2 - totalDebitAmount;
			}
	
			// Calculate nonTradeXnsDebitAmountPerMonData2
			if(nonTradeXnsDebitAmountMonData2 is known and totalDebitAmount is known) then{
				nonTradeXnsDebitAmountPerMonData2 = (nonTradeXnsDebitAmountMonData2/totalDebitAmount)*100;
			}
			
			// Calculate nonTradeXnsDebitCountMonData2
			if(nonTradeXnsCountNumberOfBusinessDebitXnsMonData2 is known and totalDebitCount is known) then{
				nonTradeXnsDebitCountMonData2 = nonTradeXnsCountNumberOfBusinessDebitXnsMonData2 - totalDebitCount;
			}
	
			// Calculate nonTradeXnsDebitCountPerMonData2
			if(nonTradeXnsDebitCountMonData2 is known and totalDebitCount is known) then{
				nonTradeXnsDebitCountPerMonData2 = (nonTradeXnsDebitCountMonData2/totalDebitCount)*100;
			}
		
			// -------------------- Non-Trade Transactions End -------------------------
			
			// ------------------- Circular Transactions Start -------------------------
			
			// Calculate circularXnsAmountPerMonData1
			if(circularXnsAmount is known) then{
				circularXnsAmountPerMonData2 = (circularXnsAmount / (totalCreditAmount + totalDebitAmount))*100;
			}
	
			// Calculate circularXnsCountPerMonData1
			if(circularXnsCount is known) then{
				circularXnsCountPerMonData2 = (circularXnsCount / (totalDebitCount + totalCreditCount))*100;
			}
			
			// ------------------- Circular Transactions End ---------------------------
			
			// ############## Append ###################
			
			fn_AppendCalculatedVariable(message,"selfRelatedPartyCreditAmountMonData2", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyCreditAmountMonData2,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyCreditAmountPerMonData2", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyCreditAmountPerMonData2,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyCreditCountMonData2", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyCreditCountMonData2,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyCreditCountPerMonData2", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyCreditCountPerMonData2,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyDebitAmountMonData2", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyDebitAmountMonData2,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyDebitAmountPerMonData2", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyDebitAmountPerMonData2,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyDebitCountMonData2", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyDebitCountMonData2,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyDebitCountPerMonData2", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyDebitCountPerMonData2,-2) as a string);
	
			fn_AppendCalculatedVariable(message,"highValueXnsCreditAmount", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(highValueXnsCreditAmount,-2) as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsCreditAmountPer", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(highValueXnsCreditAmountPer,-2) as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsCreditCount", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, highValueXnsCreditCount as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsCreditCountPer", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(highValueXnsCreditCountPer,-2) as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsDebitAmount", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(highValueXnsDebitAmount,-2) as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsDebitAmountPer", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(highValueXnsDebitAmountPer,-2) as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsDebitCount", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, highValueXnsDebitCount as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsDebitCountPer", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(highValueXnsDebitCountPer,-2) as a string);
	
			fn_AppendCalculatedVariable(message,"nonTradeXnsCreditAmountMonData2", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsCreditAmountMonData2,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsCreditAmountPerMonData2", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsCreditAmountPerMonData2,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsCreditCountMonData2", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsCreditCountMonData2,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsCreditCountPerMonData2", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsCreditCountPerMonData2,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsDebitAmountMonData2", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsDebitAmountMonData2,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsDebitAmountPerMonData2", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsDebitAmountPerMonData2,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsDebitCountMonData2", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsDebitCountMonData2,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsDebitCountPerMonData2", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsDebitCountPerMonData2,-2) as a string);
	
	
			fn_AppendCalculatedVariable(message,"circularXnsAmount", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(circularXnsAmount,-2) as a string);
			fn_AppendCalculatedVariable(message,"circularXnsAmountPerMonData2", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(circularXnsAmountPerMonData2,-2) as a string);
			fn_AppendCalculatedVariable(message,"circularXnsCount", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(circularXnsCount,-2) as a string);
			fn_AppendCalculatedVariable(message,"circularXnsCountPerMonData2", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(circularXnsCountPerMonData2,-2) as a string);
			
			print("selfRelatedPartyCreditAmountMonData2--------------------------------->"selfRelatedPartyCreditAmountMonData2);
			print("selfRelatedPartyCreditAmountPerMonData2--------------------------------->"selfRelatedPartyCreditAmountPerMonData2);
			print("selfRelatedPartyCreditCountMonData2--------------------------------->"selfRelatedPartyCreditCountMonData2);
			print("selfRelatedPartyCreditCountPerMonData2--------------------------------->"selfRelatedPartyCreditCountPerMonData2);
			print("selfRelatedPartyDebitAmountMonData2--------------------------------->"selfRelatedPartyDebitAmountMonData2);
			print("selfRelatedPartyDebitAmountPerMonData2--------------------------------->"selfRelatedPartyDebitAmountPerMonData2);
			print("selfRelatedPartyDebitCountMonData2--------------------------------->"selfRelatedPartyDebitCountMonData2);
			print("selfRelatedPartyDebitCountPerMonData2--------------------------------->"selfRelatedPartyDebitCountPerMonData2);
			print("highValueXnsCreditAmount2--------------------------------->"highValueXnsCreditAmount);
			print("highValueXnsCreditAmountPer2--------------------------------->"highValueXnsCreditAmountPer);
			print("highValueXnsCreditCount2--------------------------------->"highValueXnsCreditCount);
			print("highValueXnsCreditCountPer2--------------------------------->"highValueXnsCreditCountPer);
			print("highValueXnsDebitAmount2--------------------------------->"highValueXnsDebitAmount);
			print("highValueXnsDebitAmountPer2--------------------------------->"highValueXnsDebitAmountPer);
			print("highValueXnsDebitCount2--------------------------------->"highValueXnsDebitCount);
			print("highValueXnsDebitCountPer2--------------------------------->"highValueXnsDebitCountPer);
			print("nonTradeXnsCreditAmountMonData2--------------------------------->"nonTradeXnsCreditAmountMonData2);
			print("nonTradeXnsCreditAmountPerMonData2--------------------------------->"nonTradeXnsCreditAmountPerMonData2);
			print("nonTradeXnsCreditCountMonData2--------------------------------->"nonTradeXnsCreditCountMonData2);
			print("nonTradeXnsCreditCountPerMonData2--------------------------------->"nonTradeXnsCreditCountPerMonData2);
			print("nonTradeXnsDebitAmountMonData2--------------------------------->"nonTradeXnsDebitAmountMonData2);
			print("nonTradeXnsDebitAmountPerMonData2--------------------------------->"nonTradeXnsDebitAmountPerMonData2);
			print("nonTradeXnsDebitCountMonData2--------------------------------->"nonTradeXnsDebitCountMonData2);
			print("nonTradeXnsDebitCountPerMonData2--------------------------------->"nonTradeXnsDebitCountPerMonData2);
			
			print("circularXnsAmount--------------------------------->"circularXnsAmount);
			print("circularXnsAmountPerMonData2--------------------------------->"circularXnsAmountPerMonData2);
			print("circularXnsCount--------------------------------->"circularXnsCount);
			print("circularXnsCountPerMonData2--------------------------------->"circularXnsCountPerMonData2);
		}
		else if(i = 2)then{
			j=0;
			monthDataCount is an integer initially 0;
			monthlyDataArrayCount is an integer initially 0;
			
			// ---------------Start MonthlyData3 Variable -----------------
			selfRelatedPartyCreditAmountMonData3 is a real initially 0;
			selfRelatedPartyCreditAmountPerMonData3 is a real initially 0;
			selfRelatedPartyCreditCountMonData3 is a real initially 0;
			selfRelatedPartyCreditCountPerMonData3 is a real initially 0;
			selfRelatedPartyDebitAmountMonData3 is a real initially 0;
			selfRelatedPartyDebitAmountPerMonData3 is a real initially 0;
			selfRelatedPartyDebitCountMonData3 is a real initially 0;
			selfRelatedPartyDebitCountPerMonData3 is a real initially 0;
			
			nonTradeXnsAmountTotalBusinessCreditXnsMonData3 is a real initially 0;
			nonTradeXnsCountNumberOfBusinessCreditXnsMonData3 is a real initially 0;
			nonTradeXnsAmountTotalBusinessDebitXnsMonData3 is a real initially 0;
			nonTradeXnsCountNumberOfBusinessDebitXnsMonData3 is a real initially 0;
			
			nonTradeXnsCreditAmountMonData3 is a real initially 0;
			nonTradeXnsCreditAmountPerMonData3 is a real initially 0;
			nonTradeXnsCreditCountMonData3 is a real initially 0;
			nonTradeXnsCreditCountPerMonData3 is a real initially 0;
			nonTradeXnsDebitAmountMonData3 is a real initially 0;
			nonTradeXnsDebitAmountPerMonData3 is a real initially 0;
			nonTradeXnsDebitCountMonData3 is a real initially 0;
			nonTradeXnsDebitCountPerMonData3 is a real initially 0;

			circularXnsAmountPerMonData3 is a real initially 0;
			circularXnsCountPerMonData3 is a real initially 0;
			 
			// ---------------End MonthlyData3 Variable -------------------
			
			
			
			monthlyDataArrayCount = perfiosData.data.additionalMonthlyDetails.monthlyData3.count - 12;
			
			// --------------------- Start MonthlyData3 Loop ------------------------
			for each MonthlyData in perfiosData.data.additionalMonthlyDetails.monthlyData3 such that(it <> unknown) do {
				
				
				//------------------ latest 12 month ------------------
				if( monthDataCount >= monthlyDataArrayCount) then {
			
					if(it.totalOfSelfAndRelatedPartyCreditTxns is known) then{
						
						// Calculate selfRelatedPartyCreditAmount for individual account
						selfRelatedPartyCreditAmountMonData3 = selfRelatedPartyCreditAmountMonData3 + it.totalOfSelfAndRelatedPartyCreditTxns;
						
						// Calculate selfRelatedPartyCreditAmount  for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyCreditTxns + it.totalOfSelfAndRelatedPartyCreditTxns;
					}
					if(it.numberOfSelfAndRelatedPartyCreditTxns is known) then{
						
						// Calculate selfRelatedPartyCreditCount for individual account
						selfRelatedPartyCreditCountMonData3 = selfRelatedPartyCreditCountMonData3 + it.numberOfSelfAndRelatedPartyCreditTxns;
						
						// Calculate selfRelatedPartyCreditCount for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyCreditTxns + it.numberOfSelfAndRelatedPartyCreditTxns;
					}
					if(it.totalOfSelfAndRelatedPartyDebitTxns is known) then{
						
						// Calculate selfRelatedPartyDebitAmount for individual account
						selfRelatedPartyDebitAmountMonData3 = selfRelatedPartyDebitAmountMonData3 + it.totalOfSelfAndRelatedPartyDebitTxns;
						
						// Calculate selfRelatedPartyDebitAmount for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyDebitTxns + it.totalOfSelfAndRelatedPartyDebitTxns;
					}
					if(it.numberOfSelfAndRelatedPartyDebitTxns is known) then{
						
						// Calculate selfRelatedPartyDebitCount for individual account
						selfRelatedPartyDebitCountMonData3 = selfRelatedPartyDebitCountMonData3 + it.numberOfSelfAndRelatedPartyDebitTxns;
						
						// Calculate selfRelatedPartyDebitCount for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyDebitTxns + it.numberOfSelfAndRelatedPartyDebitTxns;
					}
			
					
					if(it.totalBusinessCreditTxns is known) then{
						
						// Calculate totalBusinessCreditTxns for individual account
						nonTradeXnsAmountTotalBusinessCreditXnsMonData3 = nonTradeXnsAmountTotalBusinessCreditXnsMonData3 + it.totalBusinessCreditTxns;
						
						// Calculate totalBusinessCreditTxns for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessCreditTxns + it.totalBusinessCreditTxns;
					}
					if(it.numberOfBusinessCreditTxns is known) then{
						
						// Calculate numberOfBusinessCreditTxns  for individual account
						nonTradeXnsCountNumberOfBusinessCreditXnsMonData3 = nonTradeXnsCountNumberOfBusinessCreditXnsMonData3 + it.numberOfBusinessCreditTxns;
						
						// Calculate numberOfBusinessCreditTxns  for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns + it.numberOfBusinessCreditTxns;
					}
					if(it.totalBusinessDebitTxns is known) then{
						
						// Calculate totalBusinessDebitTxns for individual account
						nonTradeXnsAmountTotalBusinessDebitXnsMonData3 = nonTradeXnsAmountTotalBusinessDebitXnsMonData3 + it.totalBusinessDebitTxns;
						
						// Calculate totalBusinessDebitTxns for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessDebitTxns + it.totalBusinessDebitTxns;
					}
					if(it.numberOfBusinessDebitTxns is known) then{
						
						// Calculate numberOfBusinessDebitTxns  for individual account
						nonTradeXnsCountNumberOfBusinessDebitXnsMonData3 = nonTradeXnsCountNumberOfBusinessDebitXnsMonData3 + it.numberOfBusinessDebitTxns;
						
						// Calculate numberOfBusinessDebitTxns  for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns + it.numberOfBusinessDebitTxns;
					}
				}
				monthDataCount = monthDataCount + 1;
				j = j + 1;
			}
			// ------------------------- End MonthlyData1 Loop -----------------------
			
			// ---------------- Self & Related Party Transactions Start-------------------
			
			// Calculate selfRelatedPartyCreditAmountPerMonData3
			if(selfRelatedPartyCreditAmountMonData3 is known and totalCreditAmount is known) then{
				selfRelatedPartyCreditAmountPerMonData3 = (selfRelatedPartyCreditAmountMonData3/totalCreditAmount)*100;
			}
			
			// Calculate selfRelatedPartyCreditCountPerMonData3
			if(selfRelatedPartyCreditCountMonData3 is known and totalCreditCount is known) then{
				selfRelatedPartyCreditCountPerMonData3 = (selfRelatedPartyCreditCountMonData3/totalCreditCount)*100;
			}
			
			// Calculate selfRelatedPartyDebitAmountPerMonData3
			if(selfRelatedPartyDebitAmountMonData3 is known and totalDebitAmount is known) then{
				selfRelatedPartyDebitAmountPerMonData3 = (selfRelatedPartyDebitAmountMonData3/totalDebitAmount)*100;
			}
			
			// Calculate selfRelatedPartyDebitCountPerMonData3
			if(selfRelatedPartyDebitCountMonData3 is known and totalDebitCount is known) then{
				selfRelatedPartyDebitCountPerMonData3 = (selfRelatedPartyDebitCountMonData3/totalDebitCount)*100;
			}
			// ---------------- Self & Related Party Transactions End-------------------
			
			// -------------------- Non-Trade Transactions start -----------------------
			
			// Calculate nonTradeXnsCreditAmountMonData3
			if(nonTradeXnsAmountTotalBusinessCreditXnsMonData3 is known and totalCreditAmount is known) then{
				nonTradeXnsCreditAmountMonData3 = (nonTradeXnsAmountTotalBusinessCreditXnsMonData3 - totalCreditAmount);
			}
			// Calculate nonTradeXnsCreditAmountPerMonData3
			if(nonTradeXnsCreditAmountMonData3 is known and totalCreditAmount is known) then{
				nonTradeXnsCreditAmountPerMonData3 = (nonTradeXnsCreditAmountMonData3/totalCreditAmount)*100;
			}
			
			// Calculate nonTradeXnsCreditCountMonData3
			if(nonTradeXnsCountNumberOfBusinessCreditXnsMonData3 is known and totalCreditCount is known) then{
				nonTradeXnsCreditCountMonData3 = nonTradeXnsCountNumberOfBusinessCreditXnsMonData3 - totalCreditCount;
			}
			// Calculate nonTradeXnsCreditCountPerMonData3
			if(nonTradeXnsCreditCountMonData3 is known and totalCreditCount is known) then{
				nonTradeXnsCreditCountPerMonData3 = (nonTradeXnsCreditCountMonData3/totalCreditCount)*100;
			}
			
			// Calculate nonTradeXnsDebitAmountMonData3
			if(nonTradeXnsAmountTotalBusinessDebitXnsMonData3 is known and totalDebitAmount is known) then{
				nonTradeXnsDebitAmountMonData3 = nonTradeXnsAmountTotalBusinessDebitXnsMonData3 - totalDebitAmount;
			}
	
			// Calculate nonTradeXnsDebitAmountPerMonData3
			if(nonTradeXnsDebitAmountMonData3 is known and totalDebitAmount is known) then{
				nonTradeXnsDebitAmountPerMonData3 = (nonTradeXnsDebitAmountMonData3/totalDebitAmount)*100;
			}
			
			// Calculate nonTradeXnsDebitCountMonData3
			if(nonTradeXnsCountNumberOfBusinessDebitXnsMonData3 is known and totalDebitCount is known) then{
				nonTradeXnsDebitCountMonData3 = nonTradeXnsCountNumberOfBusinessDebitXnsMonData3 - totalDebitCount;
			}
	
			// Calculate nonTradeXnsDebitCountPerMonData3
			if(nonTradeXnsDebitCountMonData3 is known and totalDebitCount is known) then{
				nonTradeXnsDebitCountPerMonData3 = (nonTradeXnsDebitCountMonData3/totalDebitCount)*100;
			}
		
			// -------------------- Non-Trade Transactions End -------------------------
			
			// ------------------- Circular Transactions Start -------------------------
			
			// Calculate circularXnsAmountPerMonData3
			if(circularXnsAmount is known) then{
				circularXnsAmountPerMonData3 = (circularXnsAmount / (totalCreditAmount + totalDebitAmount))*100;
			}
	
			// Calculate circularXnsCountPerMonData3
			if(circularXnsCount is known) then{
				circularXnsCountPerMonData3 = (circularXnsCount / (totalDebitCount + totalCreditCount))*100;
			}
			
			// ------------------- Circular Transactions End ---------------------------
			
			// ############## Append ###################
			
			fn_AppendCalculatedVariable(message,"selfRelatedPartyCreditAmountMonData3", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyCreditAmountMonData3,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyCreditAmountPerMonData3", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyCreditAmountPerMonData3,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyCreditCountMonData3", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyCreditCountMonData3,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyCreditCountPerMonData3", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyCreditCountPerMonData3,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyDebitAmountMonData3", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyDebitAmountMonData3,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyDebitAmountPerMonData3", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyDebitAmountPerMonData3,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyDebitCountMonData3", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyDebitCountMonData3,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyDebitCountPerMonData3", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyDebitCountPerMonData3,-2) as a string);
	
			fn_AppendCalculatedVariable(message,"highValueXnsCreditAmount", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(highValueXnsCreditAmount,-2) as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsCreditAmountPer", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(highValueXnsCreditAmountPer,-2) as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsCreditCount", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, highValueXnsCreditCount as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsCreditCountPer", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(highValueXnsCreditCountPer,-2) as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsDebitAmount", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(highValueXnsDebitAmount,-2) as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsDebitAmountPer", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(highValueXnsDebitAmountPer,-2) as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsDebitCount", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, highValueXnsDebitCount as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsDebitCountPer", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(highValueXnsDebitCountPer,-2) as a string);
	
			fn_AppendCalculatedVariable(message,"nonTradeXnsCreditAmountMonData3", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsCreditAmountMonData3,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsCreditAmountPerMonData3", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsCreditAmountPerMonData3,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsCreditCountMonData3", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsCreditCountMonData3,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsCreditCountPerMonData3", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsCreditCountPerMonData3,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsDebitAmountMonData3", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsDebitAmountMonData3,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsDebitAmountPerMonData3", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsDebitAmountPerMonData3,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsDebitCountMonData3", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsDebitCountMonData3,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsDebitCountPerMonData3", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsDebitCountPerMonData3,-2) as a string);
	
	
			fn_AppendCalculatedVariable(message,"circularXnsAmount", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(circularXnsAmount,-2) as a string);
			fn_AppendCalculatedVariable(message,"circularXnsAmountPerMonData3", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(circularXnsAmountPerMonData3,-2) as a string);
			fn_AppendCalculatedVariable(message,"circularXnsCount", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(circularXnsCount,-2) as a string);
			fn_AppendCalculatedVariable(message,"circularXnsCountPerMonData3", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(circularXnsCountPerMonData3,-2) as a string);
			
			print("selfRelatedPartyCreditAmountMonData3--------------------------------->"selfRelatedPartyCreditAmountMonData3);
			print("selfRelatedPartyCreditAmountPerMonData3--------------------------------->"selfRelatedPartyCreditAmountPerMonData3);
			print("selfRelatedPartyCreditCountMonData3--------------------------------->"selfRelatedPartyCreditCountMonData3);
			print("selfRelatedPartyCreditCountPerMonData3--------------------------------->"selfRelatedPartyCreditCountPerMonData3);
			print("selfRelatedPartyDebitAmountMonData3--------------------------------->"selfRelatedPartyDebitAmountMonData3);
			print("selfRelatedPartyDebitAmountPerMonData3--------------------------------->"selfRelatedPartyDebitAmountPerMonData3);
			print("selfRelatedPartyDebitCountMonData3--------------------------------->"selfRelatedPartyDebitCountMonData3);
			print("selfRelatedPartyDebitCountPerMonData3--------------------------------->"selfRelatedPartyDebitCountPerMonData3);
			print("highValueXnsCreditAmount3--------------------------------->"highValueXnsCreditAmount);
			print("highValueXnsCreditAmountPer3--------------------------------->"highValueXnsCreditAmountPer);
			print("highValueXnsCreditCount3--------------------------------->"highValueXnsCreditCount);
			print("highValueXnsCreditCountPer3--------------------------------->"highValueXnsCreditCountPer);
			print("highValueXnsDebitAmount3--------------------------------->"highValueXnsDebitAmount);
			print("highValueXnsDebitAmountPer3--------------------------------->"highValueXnsDebitAmountPer);
			print("highValueXnsDebitCount3--------------------------------->"highValueXnsDebitCount);
			print("highValueXnsDebitCountPer3--------------------------------->"highValueXnsDebitCountPer);
			print("nonTradeXnsCreditAmountMonData3--------------------------------->"nonTradeXnsCreditAmountMonData3);
			print("nonTradeXnsCreditAmountPerMonData3--------------------------------->"nonTradeXnsCreditAmountPerMonData3);
			print("nonTradeXnsCreditCountMonData3--------------------------------->"nonTradeXnsCreditCountMonData3);
			print("nonTradeXnsCreditCountPerMonData3--------------------------------->"nonTradeXnsCreditCountPerMonData3);
			print("nonTradeXnsDebitAmountMonData3--------------------------------->"nonTradeXnsDebitAmountMonData3);
			print("nonTradeXnsDebitAmountPerMonData3--------------------------------->"nonTradeXnsDebitAmountPerMonData3);
			print("nonTradeXnsDebitCountMonData3--------------------------------->"nonTradeXnsDebitCountMonData3);
			print("nonTradeXnsDebitCountPerMonData3--------------------------------->"nonTradeXnsDebitCountPerMonData3);
			
			print("circularXnsAmount--------------------------------->"circularXnsAmount);
			print("circularXnsAmountPerMonData3--------------------------------->"circularXnsAmountPerMonData3);
			print("circularXnsCount--------------------------------->"circularXnsCount);
			print("circularXnsCountPerMonData3--------------------------------->"circularXnsCountPerMonData3); 
		}
		else if(i = 3)then{
			j=0;
			monthDataCount is an integer initially 0;
			monthlyDataArrayCount is an integer initially 0;
			
			// ---------------Start MonthlyData4 Variable -----------------
			selfRelatedPartyCreditAmountMonData4 is a real initially 0;
			selfRelatedPartyCreditAmountPerMonData4 is a real initially 0;
			selfRelatedPartyCreditCountMonData4 is a real initially 0;
			selfRelatedPartyCreditCountPerMonData4 is a real initially 0;
			selfRelatedPartyDebitAmountMonData4 is a real initially 0;
			selfRelatedPartyDebitAmountPerMonData4 is a real initially 0;
			selfRelatedPartyDebitCountMonData4 is a real initially 0;
			selfRelatedPartyDebitCountPerMonData4 is a real initially 0;
			
			nonTradeXnsAmountTotalBusinessCreditXnsMonData4 is a real initially 0;
			nonTradeXnsCountNumberOfBusinessCreditXnsMonData4 is a real initially 0;
			nonTradeXnsAmountTotalBusinessDebitXnsMonData4 is a real initially 0;
			nonTradeXnsCountNumberOfBusinessDebitXnsMonData4 is a real initially 0;
			
			nonTradeXnsCreditAmountMonData4 is a real initially 0;
			nonTradeXnsCreditAmountPerMonData4 is a real initially 0;
			nonTradeXnsCreditCountMonData4 is a real initially 0;
			nonTradeXnsCreditCountPerMonData4 is a real initially 0;
			nonTradeXnsDebitAmountMonData4 is a real initially 0;
			nonTradeXnsDebitAmountPerMonData4 is a real initially 0;
			nonTradeXnsDebitCountMonData4 is a real initially 0;
			nonTradeXnsDebitCountPerMonData4 is a real initially 0;

			circularXnsAmountPerMonData4 is a real initially 0;
			circularXnsCountPerMonData4 is a real initially 0;
			 
			// ---------------End MonthlyData4 Variable -------------------
			
			
			
			monthlyDataArrayCount = perfiosData.data.additionalMonthlyDetails.monthlyData4.count - 12;
			
			// --------------------- Start MonthlyData4 Loop ------------------------
			for each MonthlyData in perfiosData.data.additionalMonthlyDetails.monthlyData4 such that(it <> unknown) do {
				
				
				//------------------ latest 12 month ------------------
				if( monthDataCount >= monthlyDataArrayCount) then {
			
					if(it.totalOfSelfAndRelatedPartyCreditTxns is known) then{
						
						// Calculate selfRelatedPartyCreditAmount for individual account
						selfRelatedPartyCreditAmountMonData4 = selfRelatedPartyCreditAmountMonData4 + it.totalOfSelfAndRelatedPartyCreditTxns;
						
						// Calculate selfRelatedPartyCreditAmount  for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyCreditTxns + it.totalOfSelfAndRelatedPartyCreditTxns;
					}
					if(it.numberOfSelfAndRelatedPartyCreditTxns is known) then{
						
						// Calculate selfRelatedPartyCreditCount for individual account
						selfRelatedPartyCreditCountMonData4 = selfRelatedPartyCreditCountMonData4 + it.numberOfSelfAndRelatedPartyCreditTxns;
						
						// Calculate selfRelatedPartyCreditCount for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyCreditTxns + it.numberOfSelfAndRelatedPartyCreditTxns;
					}
					if(it.totalOfSelfAndRelatedPartyDebitTxns is known) then{
						
						// Calculate selfRelatedPartyDebitAmount for individual account
						selfRelatedPartyDebitAmountMonData4 = selfRelatedPartyDebitAmountMonData4 + it.totalOfSelfAndRelatedPartyDebitTxns;
						
						// Calculate selfRelatedPartyDebitAmount for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyDebitTxns + it.totalOfSelfAndRelatedPartyDebitTxns;
					}
					if(it.numberOfSelfAndRelatedPartyDebitTxns is known) then{
						
						// Calculate selfRelatedPartyDebitCount for individual account
						selfRelatedPartyDebitCountMonData4 = selfRelatedPartyDebitCountMonData4 + it.numberOfSelfAndRelatedPartyDebitTxns;
						
						// Calculate selfRelatedPartyDebitCount for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyDebitTxns + it.numberOfSelfAndRelatedPartyDebitTxns;
					}
			
					
					if(it.totalBusinessCreditTxns is known) then{
						
						// Calculate totalBusinessCreditTxns for individual account
						nonTradeXnsAmountTotalBusinessCreditXnsMonData4 = nonTradeXnsAmountTotalBusinessCreditXnsMonData4 + it.totalBusinessCreditTxns;
						
						// Calculate totalBusinessCreditTxns for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessCreditTxns + it.totalBusinessCreditTxns;
					}
					if(it.numberOfBusinessCreditTxns is known) then{
						
						// Calculate numberOfBusinessCreditTxns  for individual account
						nonTradeXnsCountNumberOfBusinessCreditXnsMonData4 = nonTradeXnsCountNumberOfBusinessCreditXnsMonData4 + it.numberOfBusinessCreditTxns;
						
						// Calculate numberOfBusinessCreditTxns  for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns + it.numberOfBusinessCreditTxns;
					}
					if(it.totalBusinessDebitTxns is known) then{
						
						// Calculate totalBusinessDebitTxns for individual account
						nonTradeXnsAmountTotalBusinessDebitXnsMonData4 = nonTradeXnsAmountTotalBusinessDebitXnsMonData4 + it.totalBusinessDebitTxns;
						
						// Calculate totalBusinessDebitTxns for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessDebitTxns + it.totalBusinessDebitTxns;
					}
					if(it.numberOfBusinessDebitTxns is known) then{
						
						// Calculate numberOfBusinessDebitTxns  for individual account
						nonTradeXnsCountNumberOfBusinessDebitXnsMonData4 = nonTradeXnsCountNumberOfBusinessDebitXnsMonData4 + it.numberOfBusinessDebitTxns;
						
						// Calculate numberOfBusinessDebitTxns  for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns + it.numberOfBusinessDebitTxns;
					}
				}
				monthDataCount = monthDataCount + 1;
				j = j + 1;
			}
			// ------------------------- End MonthlyData4 Loop -----------------------
			
			// ---------------- Self & Related Party Transactions Start-------------------
			
			// Calculate selfRelatedPartyCreditAmountPerMonData4
			if(selfRelatedPartyCreditAmountMonData4 is known and totalCreditAmount is known) then{
				selfRelatedPartyCreditAmountPerMonData4 = (selfRelatedPartyCreditAmountMonData4/totalCreditAmount)*100;
			}
			
			// Calculate selfRelatedPartyCreditCountPerMonData4
			if(selfRelatedPartyCreditCountMonData4 is known and totalCreditCount is known) then{
				selfRelatedPartyCreditCountPerMonData4 = (selfRelatedPartyCreditCountMonData4/totalCreditCount)*100;
			}
			
			// Calculate selfRelatedPartyDebitAmountPerMonData4
			if(selfRelatedPartyDebitAmountMonData4 is known and totalDebitAmount is known) then{
				selfRelatedPartyDebitAmountPerMonData4 = (selfRelatedPartyDebitAmountMonData4/totalDebitAmount)*100;
			}
			
			// Calculate selfRelatedPartyDebitCountPerMonData4
			if(selfRelatedPartyDebitCountMonData4 is known and totalDebitCount is known) then{
				selfRelatedPartyDebitCountPerMonData4 = (selfRelatedPartyDebitCountMonData4/totalDebitCount)*100;
			}
			// ---------------- Self & Related Party Transactions End-------------------
			
			// -------------------- Non-Trade Transactions start -----------------------
			
			// Calculate nonTradeXnsCreditAmountMonData4
			if(nonTradeXnsAmountTotalBusinessCreditXnsMonData4 is known and totalCreditAmount is known) then{
				nonTradeXnsCreditAmountMonData4 = (nonTradeXnsAmountTotalBusinessCreditXnsMonData4 - totalCreditAmount);
			}
			// Calculate nonTradeXnsCreditAmountPerMonData4
			if(nonTradeXnsCreditAmountMonData4 is known and totalCreditAmount is known) then{
				nonTradeXnsCreditAmountPerMonData4 = (nonTradeXnsCreditAmountMonData4/totalCreditAmount)*100;
			}
			
			// Calculate nonTradeXnsCreditCountMonData4
			if(nonTradeXnsCountNumberOfBusinessCreditXnsMonData4 is known and totalCreditCount is known) then{
				nonTradeXnsCreditCountMonData4 = nonTradeXnsCountNumberOfBusinessCreditXnsMonData4 - totalCreditCount;
			}
			// Calculate nonTradeXnsCreditCountPerMonData4
			if(nonTradeXnsCreditCountMonData4 is known and totalCreditCount is known) then{
				nonTradeXnsCreditCountPerMonData4 = (nonTradeXnsCreditCountMonData4/totalCreditCount)*100;
			}
			
			// Calculate nonTradeXnsDebitAmountMonData4
			if(nonTradeXnsAmountTotalBusinessDebitXnsMonData4 is known and totalDebitAmount is known) then{
				nonTradeXnsDebitAmountMonData4 = nonTradeXnsAmountTotalBusinessDebitXnsMonData4 - totalDebitAmount;
			}
	
			// Calculate nonTradeXnsDebitAmountPerMonData4
			if(nonTradeXnsDebitAmountMonData4 is known and totalDebitAmount is known) then{
				nonTradeXnsDebitAmountPerMonData4 = (nonTradeXnsDebitAmountMonData4/totalDebitAmount)*100;
			}
			
			// Calculate nonTradeXnsDebitCountMonData4
			if(nonTradeXnsCountNumberOfBusinessDebitXnsMonData4 is known and totalDebitCount is known) then{
				nonTradeXnsDebitCountMonData4 = nonTradeXnsCountNumberOfBusinessDebitXnsMonData4 - totalDebitCount;
			}
	
			// Calculate nonTradeXnsDebitCountPerMonData4
			if(nonTradeXnsDebitCountMonData4 is known and totalDebitCount is known) then{
				nonTradeXnsDebitCountPerMonData4 = (nonTradeXnsDebitCountMonData4/totalDebitCount)*100;
			}
		
			// -------------------- Non-Trade Transactions End -------------------------
			
			// ------------------- Circular Transactions Start -------------------------
			
			// Calculate circularXnsAmountPerMonData4
			if(circularXnsAmount is known) then{
				circularXnsAmountPerMonData4 = (circularXnsAmount / (totalCreditAmount + totalDebitAmount))*100;
			}
	
			// Calculate circularXnsCountPerMonData4
			if(circularXnsCount is known) then{
				circularXnsCountPerMonData4 = (circularXnsCount / (totalDebitCount + totalCreditCount))*100;
			}
			
			// ------------------- Circular Transactions End ---------------------------
			
			// ############## Append ###################
			
			fn_AppendCalculatedVariable(message,"selfRelatedPartyCreditAmountMonData4", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyCreditAmountMonData4,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyCreditAmountPerMonData4", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyCreditAmountPerMonData4,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyCreditCountMonData4", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyCreditCountMonData4,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyCreditCountPerMonData4", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyCreditCountPerMonData4,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyDebitAmountMonData4", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyDebitAmountMonData4,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyDebitAmountPerMonData4", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyDebitAmountPerMonData4,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyDebitCountMonData4", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyDebitCountMonData4,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyDebitCountPerMonData4", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyDebitCountPerMonData4,-2) as a string);
	
			fn_AppendCalculatedVariable(message,"highValueXnsCreditAmount", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(highValueXnsCreditAmount,-2) as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsCreditAmountPer", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(highValueXnsCreditAmountPer,-2) as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsCreditCount", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, highValueXnsCreditCount as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsCreditCountPer", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(highValueXnsCreditCountPer,-2) as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsDebitAmount", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(highValueXnsDebitAmount,-2) as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsDebitAmountPer", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(highValueXnsDebitAmountPer,-2) as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsDebitCount", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, highValueXnsDebitCount as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsDebitCountPer", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(highValueXnsDebitCountPer,-2) as a string);
	
			fn_AppendCalculatedVariable(message,"nonTradeXnsCreditAmountMonData4", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsCreditAmountMonData4,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsCreditAmountPerMonData4", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsCreditAmountPerMonData4,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsCreditCountMonData4", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsCreditCountMonData4,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsCreditCountPerMonData4", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsCreditCountPerMonData4,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsDebitAmountMonData4", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsDebitAmountMonData4,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsDebitAmountPerMonData4", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsDebitAmountPerMonData4,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsDebitCountMonData4", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsDebitCountMonData4,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsDebitCountPerMonData4", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsDebitCountPerMonData4,-2) as a string);
	
	
			fn_AppendCalculatedVariable(message,"circularXnsAmount", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(circularXnsAmount,-2) as a string);
			fn_AppendCalculatedVariable(message,"circularXnsAmountPerMonData4", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(circularXnsAmountPerMonData4,-2) as a string);
			fn_AppendCalculatedVariable(message,"circularXnsCount", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(circularXnsCount,-2) as a string);
			fn_AppendCalculatedVariable(message,"circularXnsCountPerMonData4", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(circularXnsCountPerMonData4,-2) as a string);
			
			print("selfRelatedPartyCreditAmountMonData4--------------------------------->"selfRelatedPartyCreditAmountMonData4);
			print("selfRelatedPartyCreditAmountPerMonData4--------------------------------->"selfRelatedPartyCreditAmountPerMonData4);
			print("selfRelatedPartyCreditCountMonData4--------------------------------->"selfRelatedPartyCreditCountMonData4);
			print("selfRelatedPartyCreditCountPerMonData4--------------------------------->"selfRelatedPartyCreditCountPerMonData4);
			print("selfRelatedPartyDebitAmountMonData4--------------------------------->"selfRelatedPartyDebitAmountMonData4);
			print("selfRelatedPartyDebitAmountPerMonData4--------------------------------->"selfRelatedPartyDebitAmountPerMonData4);
			print("selfRelatedPartyDebitCountMonData4--------------------------------->"selfRelatedPartyDebitCountMonData4);
			print("selfRelatedPartyDebitCountPerMonData4--------------------------------->"selfRelatedPartyDebitCountPerMonData4);
			print("highValueXnsCreditAmount4--------------------------------->"highValueXnsCreditAmount);
			print("highValueXnsCreditAmountPer4--------------------------------->"highValueXnsCreditAmountPer);
			print("highValueXnsCreditCount4--------------------------------->"highValueXnsCreditCount);
			print("highValueXnsCreditCountPer4--------------------------------->"highValueXnsCreditCountPer);
			print("highValueXnsDebitAmount4--------------------------------->"highValueXnsDebitAmount);
			print("highValueXnsDebitAmountPer4--------------------------------->"highValueXnsDebitAmountPer);
			print("highValueXnsDebitCount4--------------------------------->"highValueXnsDebitCount);
			print("highValueXnsDebitCountPer4--------------------------------->"highValueXnsDebitCountPer);
			print("nonTradeXnsCreditAmountMonData4--------------------------------->"nonTradeXnsCreditAmountMonData4);
			print("nonTradeXnsCreditAmountPerMonData4--------------------------------->"nonTradeXnsCreditAmountPerMonData4);
			print("nonTradeXnsCreditCountMonData4--------------------------------->"nonTradeXnsCreditCountMonData4);
			print("nonTradeXnsCreditCountPerMonData4--------------------------------->"nonTradeXnsCreditCountPerMonData4);
			print("nonTradeXnsDebitAmountMonData4--------------------------------->"nonTradeXnsDebitAmountMonData4);
			print("nonTradeXnsDebitAmountPerMonData4--------------------------------->"nonTradeXnsDebitAmountPerMonData4);
			print("nonTradeXnsDebitCountMonData4--------------------------------->"nonTradeXnsDebitCountMonData4);
			print("nonTradeXnsDebitCountPerMonData4--------------------------------->"nonTradeXnsDebitCountPerMonData4);
			
			print("circularXnsAmount--------------------------------->"circularXnsAmount);
			print("circularXnsAmountPerMonData4--------------------------------->"circularXnsAmountPerMonData4);
			print("circularXnsCount--------------------------------->"circularXnsCount);
			print("circularXnsCountPerMonData4--------------------------------->"circularXnsCountPerMonData4);  
		}
		else if(i = 4)then{
			j=0;
			monthDataCount is an integer initially 0;
			monthlyDataArrayCount is an integer initially 0;
			
			// ---------------Start MonthlyData5 Variable -----------------
			selfRelatedPartyCreditAmountMonData5 is a real initially 0;
			selfRelatedPartyCreditAmountPerMonData5 is a real initially 0;
			selfRelatedPartyCreditCountMonData5 is a real initially 0;
			selfRelatedPartyCreditCountPerMonData5 is a real initially 0;
			selfRelatedPartyDebitAmountMonData5 is a real initially 0;
			selfRelatedPartyDebitAmountPerMonData5 is a real initially 0;
			selfRelatedPartyDebitCountMonData5 is a real initially 0;
			selfRelatedPartyDebitCountPerMonData5 is a real initially 0;
			
			nonTradeXnsAmountTotalBusinessCreditXnsMonData5 is a real initially 0;
			nonTradeXnsCountNumberOfBusinessCreditXnsMonData5 is a real initially 0;
			nonTradeXnsAmountTotalBusinessDebitXnsMonData5 is a real initially 0;
			nonTradeXnsCountNumberOfBusinessDebitXnsMonData5 is a real initially 0;
			
			nonTradeXnsCreditAmountMonData5 is a real initially 0;
			nonTradeXnsCreditAmountPerMonData5 is a real initially 0;
			nonTradeXnsCreditCountMonData5 is a real initially 0;
			nonTradeXnsCreditCountPerMonData5 is a real initially 0;
			nonTradeXnsDebitAmountMonData5 is a real initially 0;
			nonTradeXnsDebitAmountPerMonData5 is a real initially 0;
			nonTradeXnsDebitCountMonData5 is a real initially 0;
			nonTradeXnsDebitCountPerMonData5 is a real initially 0;

			circularXnsAmountPerMonData5 is a real initially 0;
			circularXnsCountPerMonData5 is a real initially 0;
			 
			// ---------------End MonthlyData5 Variable -------------------
			
			
			
			monthlyDataArrayCount = perfiosData.data.additionalMonthlyDetails.monthlyData5.count - 12;
			
			// --------------------- Start MonthlyData5 Loop ------------------------
			for each MonthlyData in perfiosData.data.additionalMonthlyDetails.monthlyData5 such that(it <> unknown) do {
				
				
				//------------------ latest 12 month ------------------
				if( monthDataCount >= monthlyDataArrayCount) then {
			
					if(it.totalOfSelfAndRelatedPartyCreditTxns is known) then{
						
						// Calculate selfRelatedPartyCreditAmount for individual account
						selfRelatedPartyCreditAmountMonData5 = selfRelatedPartyCreditAmountMonData5 + it.totalOfSelfAndRelatedPartyCreditTxns;
						
						// Calculate selfRelatedPartyCreditAmount  for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyCreditTxns + it.totalOfSelfAndRelatedPartyCreditTxns;
					}
					if(it.numberOfSelfAndRelatedPartyCreditTxns is known) then{
						
						// Calculate selfRelatedPartyCreditCount for individual account
						selfRelatedPartyCreditCountMonData5 = selfRelatedPartyCreditCountMonData5 + it.numberOfSelfAndRelatedPartyCreditTxns;
						
						// Calculate selfRelatedPartyCreditCount for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyCreditTxns + it.numberOfSelfAndRelatedPartyCreditTxns;
					}
					if(it.totalOfSelfAndRelatedPartyDebitTxns is known) then{
						
						// Calculate selfRelatedPartyDebitAmount for individual account
						selfRelatedPartyDebitAmountMonData5 = selfRelatedPartyDebitAmountMonData5 + it.totalOfSelfAndRelatedPartyDebitTxns;
						
						// Calculate selfRelatedPartyDebitAmount for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyDebitTxns + it.totalOfSelfAndRelatedPartyDebitTxns;
					}
					if(it.numberOfSelfAndRelatedPartyDebitTxns is known) then{
						
						// Calculate selfRelatedPartyDebitCount for individual account
						selfRelatedPartyDebitCountMonData5 = selfRelatedPartyDebitCountMonData5 + it.numberOfSelfAndRelatedPartyDebitTxns;
						
						// Calculate selfRelatedPartyDebitCount for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyDebitTxns + it.numberOfSelfAndRelatedPartyDebitTxns;
					}
			
					
					if(it.totalBusinessCreditTxns is known) then{
						
						// Calculate totalBusinessCreditTxns for individual account
						nonTradeXnsAmountTotalBusinessCreditXnsMonData5 = nonTradeXnsAmountTotalBusinessCreditXnsMonData5 + it.totalBusinessCreditTxns;
						
						// Calculate totalBusinessCreditTxns for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessCreditTxns + it.totalBusinessCreditTxns;
					}
					if(it.numberOfBusinessCreditTxns is known) then{
						
						// Calculate numberOfBusinessCreditTxns  for individual account
						nonTradeXnsCountNumberOfBusinessCreditXnsMonData5 = nonTradeXnsCountNumberOfBusinessCreditXnsMonData5 + it.numberOfBusinessCreditTxns;
						
						// Calculate numberOfBusinessCreditTxns  for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns + it.numberOfBusinessCreditTxns;
					}
					if(it.totalBusinessDebitTxns is known) then{
						
						// Calculate totalBusinessDebitTxns for individual account
						nonTradeXnsAmountTotalBusinessDebitXnsMonData5 = nonTradeXnsAmountTotalBusinessDebitXnsMonData5 + it.totalBusinessDebitTxns;
						
						// Calculate totalBusinessDebitTxns for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessDebitTxns + it.totalBusinessDebitTxns;
					}
					if(it.numberOfBusinessDebitTxns is known) then{
						
						// Calculate numberOfBusinessDebitTxns  for individual account
						nonTradeXnsCountNumberOfBusinessDebitXnsMonData5 = nonTradeXnsCountNumberOfBusinessDebitXnsMonData5 + it.numberOfBusinessDebitTxns;
						
						// Calculate numberOfBusinessDebitTxns  for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns + it.numberOfBusinessDebitTxns;
					}
				}
				monthDataCount = monthDataCount + 1;
				j = j + 1;
			}
			// ------------------------- End MonthlyData5 Loop -----------------------
			
			// ---------------- Self & Related Party Transactions Start-------------------
			
			// Calculate selfRelatedPartyCreditAmountPerMonData5
			if(selfRelatedPartyCreditAmountMonData5 is known and totalCreditAmount is known) then{
				selfRelatedPartyCreditAmountPerMonData5 = (selfRelatedPartyCreditAmountMonData5/totalCreditAmount)*100;
			}
			
			// Calculate selfRelatedPartyCreditCountPerMonData5
			if(selfRelatedPartyCreditCountMonData5 is known and totalCreditCount is known) then{
				selfRelatedPartyCreditCountPerMonData5 = (selfRelatedPartyCreditCountMonData5/totalCreditCount)*100;
			}
			
			// Calculate selfRelatedPartyDebitAmountPerMonData5
			if(selfRelatedPartyDebitAmountMonData5 is known and totalDebitAmount is known) then{
				selfRelatedPartyDebitAmountPerMonData5 = (selfRelatedPartyDebitAmountMonData5/totalDebitAmount)*100;
			}
			
			// Calculate selfRelatedPartyDebitCountPerMonData5
			if(selfRelatedPartyDebitCountMonData5 is known and totalDebitCount is known) then{
				selfRelatedPartyDebitCountPerMonData5 = (selfRelatedPartyDebitCountMonData5/totalDebitCount)*100;
			}
			// ---------------- Self & Related Party Transactions End-------------------
			
			// -------------------- Non-Trade Transactions start -----------------------
			
			// Calculate nonTradeXnsCreditAmountMonData5
			if(nonTradeXnsAmountTotalBusinessCreditXnsMonData5 is known and totalCreditAmount is known) then{
				nonTradeXnsCreditAmountMonData5 = (nonTradeXnsAmountTotalBusinessCreditXnsMonData5 - totalCreditAmount);
			}
			// Calculate nonTradeXnsCreditAmountPerMonData5
			if(nonTradeXnsCreditAmountMonData5 is known and totalCreditAmount is known) then{
				nonTradeXnsCreditAmountPerMonData5 = (nonTradeXnsCreditAmountMonData5/totalCreditAmount)*100;
			}
			
			// Calculate nonTradeXnsCreditCountMonData5
			if(nonTradeXnsCountNumberOfBusinessCreditXnsMonData5 is known and totalCreditCount is known) then{
				nonTradeXnsCreditCountMonData5 = nonTradeXnsCountNumberOfBusinessCreditXnsMonData5 - totalCreditCount;
			}
			// Calculate nonTradeXnsCreditCountPerMonData5
			if(nonTradeXnsCreditCountMonData5 is known and totalCreditCount is known) then{
				nonTradeXnsCreditCountPerMonData5 = (nonTradeXnsCreditCountMonData5/totalCreditCount)*100;
			}
			
			// Calculate nonTradeXnsDebitAmountMonData5
			if(nonTradeXnsAmountTotalBusinessDebitXnsMonData5 is known and totalDebitAmount is known) then{
				nonTradeXnsDebitAmountMonData5 = nonTradeXnsAmountTotalBusinessDebitXnsMonData5 - totalDebitAmount;
			}
	
			// Calculate nonTradeXnsDebitAmountPerMonData5
			if(nonTradeXnsDebitAmountMonData5 is known and totalDebitAmount is known) then{
				nonTradeXnsDebitAmountPerMonData5 = (nonTradeXnsDebitAmountMonData5/totalDebitAmount)*100;
			}
			
			// Calculate nonTradeXnsDebitCountMonData5
			if(nonTradeXnsCountNumberOfBusinessDebitXnsMonData5 is known and totalDebitCount is known) then{
				nonTradeXnsDebitCountMonData5 = nonTradeXnsCountNumberOfBusinessDebitXnsMonData5 - totalDebitCount;
			}
	
			// Calculate nonTradeXnsDebitCountPerMonData5
			if(nonTradeXnsDebitCountMonData5 is known and totalDebitCount is known) then{
				nonTradeXnsDebitCountPerMonData5 = (nonTradeXnsDebitCountMonData5/totalDebitCount)*100;
			}
		
			// -------------------- Non-Trade Transactions End -------------------------
			
			// ------------------- Circular Transactions Start -------------------------
			
			// Calculate circularXnsAmountPerMonData5
			if(circularXnsAmount is known) then{
				circularXnsAmountPerMonData5 = (circularXnsAmount / (totalCreditAmount + totalDebitAmount))*100;
			}
	
			// Calculate circularXnsCountPerMonData5
			if(circularXnsCount is known) then{
				circularXnsCountPerMonData5 = (circularXnsCount / (totalDebitCount + totalCreditCount))*100;
			}
			
			// ------------------- Circular Transactions End ---------------------------
			
			// ############## Append ###################
			
			fn_AppendCalculatedVariable(message,"selfRelatedPartyCreditAmountMonData5", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyCreditAmountMonData5,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyCreditAmountPerMonData5", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyCreditAmountPerMonData5,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyCreditCountMonData5", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyCreditCountMonData5,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyCreditCountPerMonData5", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyCreditCountPerMonData5,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyDebitAmountMonData5", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyDebitAmountMonData5,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyDebitAmountPerMonData5", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyDebitAmountPerMonData5,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyDebitCountMonData5", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyDebitCountMonData5,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyDebitCountPerMonData5", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyDebitCountPerMonData5,-2) as a string);
	
			fn_AppendCalculatedVariable(message,"highValueXnsCreditAmount", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(highValueXnsCreditAmount,-2) as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsCreditAmountPer", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(highValueXnsCreditAmountPer,-2) as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsCreditCount", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, highValueXnsCreditCount as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsCreditCountPer", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(highValueXnsCreditCountPer,-2) as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsDebitAmount", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(highValueXnsDebitAmount,-2) as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsDebitAmountPer", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(highValueXnsDebitAmountPer,-2) as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsDebitCount", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, highValueXnsDebitCount as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsDebitCountPer", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(highValueXnsDebitCountPer,-2) as a string);
	
			fn_AppendCalculatedVariable(message,"nonTradeXnsCreditAmountMonData5", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsCreditAmountMonData5,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsCreditAmountPerMonData5", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsCreditAmountPerMonData5,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsCreditCountMonData5", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsCreditCountMonData5,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsCreditCountPerMonData5", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsCreditCountPerMonData5,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsDebitAmountMonData5", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsDebitAmountMonData5,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsDebitAmountPerMonData5", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsDebitAmountPerMonData5,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsDebitCountMonData5", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsDebitCountMonData5,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsDebitCountPerMonData5", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsDebitCountPerMonData5,-2) as a string);
	
	
			fn_AppendCalculatedVariable(message,"circularXnsAmount", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(circularXnsAmount,-2) as a string);
			fn_AppendCalculatedVariable(message,"circularXnsAmountPerMonData5", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(circularXnsAmountPerMonData5,-2) as a string);
			fn_AppendCalculatedVariable(message,"circularXnsCount", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(circularXnsCount,-2) as a string);
			fn_AppendCalculatedVariable(message,"circularXnsCountPerMonData5", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(circularXnsCountPerMonData5,-2) as a string);
			
			print("selfRelatedPartyCreditAmountMonData5--------------------------------->"selfRelatedPartyCreditAmountMonData5);
			print("selfRelatedPartyCreditAmountPerMonData5--------------------------------->"selfRelatedPartyCreditAmountPerMonData5);
			print("selfRelatedPartyCreditCountMonData5--------------------------------->"selfRelatedPartyCreditCountMonData5);
			print("selfRelatedPartyCreditCountPerMonData5--------------------------------->"selfRelatedPartyCreditCountPerMonData5);
			print("selfRelatedPartyDebitAmountMonData5--------------------------------->"selfRelatedPartyDebitAmountMonData5);
			print("selfRelatedPartyDebitAmountPerMonData5--------------------------------->"selfRelatedPartyDebitAmountPerMonData5);
			print("selfRelatedPartyDebitCountMonData5--------------------------------->"selfRelatedPartyDebitCountMonData5);
			print("selfRelatedPartyDebitCountPerMonData5--------------------------------->"selfRelatedPartyDebitCountPerMonData5);
			print("highValueXnsCreditAmount5--------------------------------->"highValueXnsCreditAmount);
			print("highValueXnsCreditAmountPer5--------------------------------->"highValueXnsCreditAmountPer);
			print("highValueXnsCreditCount5--------------------------------->"highValueXnsCreditCount);
			print("highValueXnsCreditCountPer5--------------------------------->"highValueXnsCreditCountPer);
			print("highValueXnsDebitAmount5--------------------------------->"highValueXnsDebitAmount);
			print("highValueXnsDebitAmountPer5--------------------------------->"highValueXnsDebitAmountPer);
			print("highValueXnsDebitCount5--------------------------------->"highValueXnsDebitCount);
			print("highValueXnsDebitCountPer5--------------------------------->"highValueXnsDebitCountPer);
			print("nonTradeXnsCreditAmountMonData5--------------------------------->"nonTradeXnsCreditAmountMonData5);
			print("nonTradeXnsCreditAmountPerMonData5--------------------------------->"nonTradeXnsCreditAmountPerMonData5);
			print("nonTradeXnsCreditCountMonData5--------------------------------->"nonTradeXnsCreditCountMonData5);
			print("nonTradeXnsCreditCountPerMonData5--------------------------------->"nonTradeXnsCreditCountPerMonData5);
			print("nonTradeXnsDebitAmountMonData5--------------------------------->"nonTradeXnsDebitAmountMonData5);
			print("nonTradeXnsDebitAmountPerMonData5--------------------------------->"nonTradeXnsDebitAmountPerMonData5);
			print("nonTradeXnsDebitCountMonData5--------------------------------->"nonTradeXnsDebitCountMonData5);
			print("nonTradeXnsDebitCountPerMonData5--------------------------------->"nonTradeXnsDebitCountPerMonData5);
			
			print("circularXnsAmount--------------------------------->"circularXnsAmount);
			print("circularXnsAmountPerMonData5--------------------------------->"circularXnsAmountPerMonData5);
			print("circularXnsCount--------------------------------->"circularXnsCount);
			print("circularXnsCountPerMonData5--------------------------------->"circularXnsCountPerMonData5);  
		}
		else if(i = 5)then{
			j=0;
			monthDataCount is an integer initially 0;
			monthlyDataArrayCount is an integer initially 0;
			
			// ---------------Start MonthlyData6 Variable -----------------
			selfRelatedPartyCreditAmountMonData6 is a real initially 0;
			selfRelatedPartyCreditAmountPerMonData6 is a real initially 0;
			selfRelatedPartyCreditCountMonData6 is a real initially 0;
			selfRelatedPartyCreditCountPerMonData6 is a real initially 0;
			selfRelatedPartyDebitAmountMonData6 is a real initially 0;
			selfRelatedPartyDebitAmountPerMonData6 is a real initially 0;
			selfRelatedPartyDebitCountMonData6 is a real initially 0;
			selfRelatedPartyDebitCountPerMonData6 is a real initially 0;
			
			nonTradeXnsAmountTotalBusinessCreditXnsMonData6 is a real initially 0;
			nonTradeXnsCountNumberOfBusinessCreditXnsMonData6 is a real initially 0;
			nonTradeXnsAmountTotalBusinessDebitXnsMonData6 is a real initially 0;
			nonTradeXnsCountNumberOfBusinessDebitXnsMonData6 is a real initially 0;
			
			nonTradeXnsCreditAmountMonData6 is a real initially 0;
			nonTradeXnsCreditAmountPerMonData6 is a real initially 0;
			nonTradeXnsCreditCountMonData6 is a real initially 0;
			nonTradeXnsCreditCountPerMonData6 is a real initially 0;
			nonTradeXnsDebitAmountMonData6 is a real initially 0;
			nonTradeXnsDebitAmountPerMonData6 is a real initially 0;
			nonTradeXnsDebitCountMonData6 is a real initially 0;
			nonTradeXnsDebitCountPerMonData6 is a real initially 0;

			circularXnsAmountPerMonData6 is a real initially 0;
			circularXnsCountPerMonData6 is a real initially 0;
			 
			// ---------------End MonthlyData6 Variable -------------------
			
			
			
			monthlyDataArrayCount = perfiosData.data.additionalMonthlyDetails.monthlyData6.count - 12;
			
			// --------------------- Start MonthlyData6 Loop ------------------------
			for each MonthlyData in perfiosData.data.additionalMonthlyDetails.monthlyData6 such that(it <> unknown) do {
				
				
				//------------------ latest 12 month ------------------
				if( monthDataCount >= monthlyDataArrayCount) then {
			
					if(it.totalOfSelfAndRelatedPartyCreditTxns is known) then{
						
						// Calculate selfRelatedPartyCreditAmount for individual account
						selfRelatedPartyCreditAmountMonData6 = selfRelatedPartyCreditAmountMonData6 + it.totalOfSelfAndRelatedPartyCreditTxns;
						
						// Calculate selfRelatedPartyCreditAmount  for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyCreditTxns + it.totalOfSelfAndRelatedPartyCreditTxns;
					}
					if(it.numberOfSelfAndRelatedPartyCreditTxns is known) then{
						
						// Calculate selfRelatedPartyCreditCount for individual account
						selfRelatedPartyCreditCountMonData6 = selfRelatedPartyCreditCountMonData6 + it.numberOfSelfAndRelatedPartyCreditTxns;
						
						// Calculate selfRelatedPartyCreditCount for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyCreditTxns + it.numberOfSelfAndRelatedPartyCreditTxns;
					}
					if(it.totalOfSelfAndRelatedPartyDebitTxns is known) then{
						
						// Calculate selfRelatedPartyDebitAmount for individual account
						selfRelatedPartyDebitAmountMonData6 = selfRelatedPartyDebitAmountMonData6 + it.totalOfSelfAndRelatedPartyDebitTxns;
						
						// Calculate selfRelatedPartyDebitAmount for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyDebitTxns + it.totalOfSelfAndRelatedPartyDebitTxns;
					}
					if(it.numberOfSelfAndRelatedPartyDebitTxns is known) then{
						
						// Calculate selfRelatedPartyDebitCount for individual account
						selfRelatedPartyDebitCountMonData6 = selfRelatedPartyDebitCountMonData6 + it.numberOfSelfAndRelatedPartyDebitTxns;
						
						// Calculate selfRelatedPartyDebitCount for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyDebitTxns + it.numberOfSelfAndRelatedPartyDebitTxns;
					}
			
					
					if(it.totalBusinessCreditTxns is known) then{
						
						// Calculate totalBusinessCreditTxns for individual account
						nonTradeXnsAmountTotalBusinessCreditXnsMonData6 = nonTradeXnsAmountTotalBusinessCreditXnsMonData6 + it.totalBusinessCreditTxns;
						
						// Calculate totalBusinessCreditTxns for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessCreditTxns + it.totalBusinessCreditTxns;
					}
					if(it.numberOfBusinessCreditTxns is known) then{
						
						// Calculate numberOfBusinessCreditTxns  for individual account
						nonTradeXnsCountNumberOfBusinessCreditXnsMonData6 = nonTradeXnsCountNumberOfBusinessCreditXnsMonData6 + it.numberOfBusinessCreditTxns;
						
						// Calculate numberOfBusinessCreditTxns  for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns + it.numberOfBusinessCreditTxns;
					}
					if(it.totalBusinessDebitTxns is known) then{
						
						// Calculate totalBusinessDebitTxns for individual account
						nonTradeXnsAmountTotalBusinessDebitXnsMonData6 = nonTradeXnsAmountTotalBusinessDebitXnsMonData6 + it.totalBusinessDebitTxns;
						
						// Calculate totalBusinessDebitTxns for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessDebitTxns + it.totalBusinessDebitTxns;
					}
					if(it.numberOfBusinessDebitTxns is known) then{
						
						// Calculate numberOfBusinessDebitTxns  for individual account
						nonTradeXnsCountNumberOfBusinessDebitXnsMonData6 = nonTradeXnsCountNumberOfBusinessDebitXnsMonData6 + it.numberOfBusinessDebitTxns;
						
						// Calculate numberOfBusinessDebitTxns  for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns + it.numberOfBusinessDebitTxns;
					}
				}
				monthDataCount = monthDataCount + 1;
				j = j + 1;
			}
			// ------------------------- End MonthlyData6 Loop -----------------------
			
			// ---------------- Self & Related Party Transactions Start-------------------
			
			// Calculate selfRelatedPartyCreditAmountPerMonData6
			if(selfRelatedPartyCreditAmountMonData6 is known and totalCreditAmount is known) then{
				selfRelatedPartyCreditAmountPerMonData6 = (selfRelatedPartyCreditAmountMonData6/totalCreditAmount)*100;
			}
			
			// Calculate selfRelatedPartyCreditCountPerMonData6
			if(selfRelatedPartyCreditCountMonData6 is known and totalCreditCount is known) then{
				selfRelatedPartyCreditCountPerMonData6 = (selfRelatedPartyCreditCountMonData6/totalCreditCount)*100;
			}
			
			// Calculate selfRelatedPartyDebitAmountPerMonData6
			if(selfRelatedPartyDebitAmountMonData6 is known and totalDebitAmount is known) then{
				selfRelatedPartyDebitAmountPerMonData6 = (selfRelatedPartyDebitAmountMonData6/totalDebitAmount)*100;
			}
			
			// Calculate selfRelatedPartyDebitCountPerMonData6
			if(selfRelatedPartyDebitCountMonData6 is known and totalDebitCount is known) then{
				selfRelatedPartyDebitCountPerMonData6 = (selfRelatedPartyDebitCountMonData6/totalDebitCount)*100;
			}
			// ---------------- Self & Related Party Transactions End-------------------
			// -------------------- High Value Transactions Start ----------------------
			
			
			
			// -------------------- High Value Transactions End ------------------------
			// -------------------- Non-Trade Transactions start -----------------------
			
			// Calculate nonTradeXnsCreditAmountMonData6
			if(nonTradeXnsAmountTotalBusinessCreditXnsMonData6 is known and totalCreditAmount is known) then{
				nonTradeXnsCreditAmountMonData6 = (nonTradeXnsAmountTotalBusinessCreditXnsMonData6 - totalCreditAmount);
			}
			// Calculate nonTradeXnsCreditAmountPerMonData6
			if(nonTradeXnsCreditAmountMonData6 is known and totalCreditAmount is known) then{
				nonTradeXnsCreditAmountPerMonData6 = (nonTradeXnsCreditAmountMonData6/totalCreditAmount)*100;
			}
			
			// Calculate nonTradeXnsCreditCountMonData6
			if(nonTradeXnsCountNumberOfBusinessCreditXnsMonData6 is known and totalCreditCount is known) then{
				nonTradeXnsCreditCountMonData6 = nonTradeXnsCountNumberOfBusinessCreditXnsMonData6 - totalCreditCount;
			}
			// Calculate nonTradeXnsCreditCountPerMonData6
			if(nonTradeXnsCreditCountMonData6 is known and totalCreditCount is known) then{
				nonTradeXnsCreditCountPerMonData6 = (nonTradeXnsCreditCountMonData6/totalCreditCount)*100;
			}
			
			// Calculate nonTradeXnsDebitAmountMonData6
			if(nonTradeXnsAmountTotalBusinessDebitXnsMonData6 is known and totalDebitAmount is known) then{
				nonTradeXnsDebitAmountMonData6 = nonTradeXnsAmountTotalBusinessDebitXnsMonData6 - totalDebitAmount;
			}
	
			// Calculate nonTradeXnsDebitAmountPerMonData6
			if(nonTradeXnsDebitAmountMonData6 is known and totalDebitAmount is known) then{
				nonTradeXnsDebitAmountPerMonData6 = (nonTradeXnsDebitAmountMonData6/totalDebitAmount)*100;
			}
			
			// Calculate nonTradeXnsDebitCountMonData6
			if(nonTradeXnsCountNumberOfBusinessDebitXnsMonData6 is known and totalDebitCount is known) then{
				nonTradeXnsDebitCountMonData6 = nonTradeXnsCountNumberOfBusinessDebitXnsMonData6 - totalDebitCount;
			}
	
			// Calculate nonTradeXnsDebitCountPerMonData6
			if(nonTradeXnsDebitCountMonData6 is known and totalDebitCount is known) then{
				nonTradeXnsDebitCountPerMonData6 = (nonTradeXnsDebitCountMonData6/totalDebitCount)*100;
			}
		
			// -------------------- Non-Trade Transactions End -------------------------
			
			// ------------------- Circular Transactions Start -------------------------
			
			// Calculate circularXnsAmountPerMonData6
			if(circularXnsAmount is known) then{
				circularXnsAmountPerMonData6 = (circularXnsAmount / (totalCreditAmount + totalDebitAmount))*100;
			}
	
			// Calculate circularXnsCountPerMonData6
			if(circularXnsCount is known) then{
				circularXnsCountPerMonData6 = (circularXnsCount / (totalDebitCount + totalCreditCount))*100;
			}
			
			// ------------------- Circular Transactions End ---------------------------
			
			// ############## Append ###################
			
			fn_AppendCalculatedVariable(message,"selfRelatedPartyCreditAmountMonData6", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyCreditAmountMonData6,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyCreditAmountPerMonData6", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyCreditAmountPerMonData6,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyCreditCountMonData6", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyCreditCountMonData6,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyCreditCountPerMonData6", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyCreditCountPerMonData6,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyDebitAmountMonData6", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyDebitAmountMonData6,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyDebitAmountPerMonData6", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyDebitAmountPerMonData6,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyDebitCountMonData6", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyDebitCountMonData6,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyDebitCountPerMonData6", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyDebitCountPerMonData6,-2) as a string);
	
			fn_AppendCalculatedVariable(message,"highValueXnsCreditAmount", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(highValueXnsCreditAmount,-2) as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsCreditAmountPer", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(highValueXnsCreditAmountPer,-2) as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsCreditCount", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, highValueXnsCreditCount as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsCreditCountPer", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(highValueXnsCreditCountPer,-2) as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsDebitAmount", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(highValueXnsDebitAmount,-2) as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsDebitAmountPer", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(highValueXnsDebitAmountPer,-2) as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsDebitCount", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, highValueXnsDebitCount as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsDebitCountPer", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(highValueXnsDebitCountPer,-2) as a string);
	
			fn_AppendCalculatedVariable(message,"nonTradeXnsCreditAmountMonData6", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsCreditAmountMonData6,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsCreditAmountPerMonData6", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsCreditAmountPerMonData6,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsCreditCountMonData6", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsCreditCountMonData6,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsCreditCountPerMonData6", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsCreditCountPerMonData6,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsDebitAmountMonData6", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsDebitAmountMonData6,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsDebitAmountPerMonData6", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsDebitAmountPerMonData6,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsDebitCountMonData6", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsDebitCountMonData6,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsDebitCountPerMonData6", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsDebitCountPerMonData6,-2) as a string);
	
	
			fn_AppendCalculatedVariable(message,"circularXnsAmount", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(circularXnsAmount,-2) as a string);
			fn_AppendCalculatedVariable(message,"circularXnsAmountPerMonData6", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(circularXnsAmountPerMonData6,-2) as a string);
			fn_AppendCalculatedVariable(message,"circularXnsCount", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(circularXnsCount,-2) as a string);
			fn_AppendCalculatedVariable(message,"circularXnsCountPerMonData6", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(circularXnsCountPerMonData6,-2) as a string);
			
			print("selfRelatedPartyCreditAmountMonData6--------------------------------->"selfRelatedPartyCreditAmountMonData6);
			print("selfRelatedPartyCreditAmountPerMonData6--------------------------------->"selfRelatedPartyCreditAmountPerMonData6);
			print("selfRelatedPartyCreditCountMonData6--------------------------------->"selfRelatedPartyCreditCountMonData6);
			print("selfRelatedPartyCreditCountPerMonData6--------------------------------->"selfRelatedPartyCreditCountPerMonData6);
			print("selfRelatedPartyDebitAmountMonData6--------------------------------->"selfRelatedPartyDebitAmountMonData6);
			print("selfRelatedPartyDebitAmountPerMonData6--------------------------------->"selfRelatedPartyDebitAmountPerMonData6);
			print("selfRelatedPartyDebitCountMonData6--------------------------------->"selfRelatedPartyDebitCountMonData6);
			print("selfRelatedPartyDebitCountPerMonData6--------------------------------->"selfRelatedPartyDebitCountPerMonData6);
			print("highValueXnsCreditAmount6--------------------------------->"highValueXnsCreditAmount);
			print("highValueXnsCreditAmountPer6--------------------------------->"highValueXnsCreditAmountPer);
			print("highValueXnsCreditCount6--------------------------------->"highValueXnsCreditCount);
			print("highValueXnsCreditCountPer6--------------------------------->"highValueXnsCreditCountPer);
			print("highValueXnsDebitAmount6--------------------------------->"highValueXnsDebitAmount);
			print("highValueXnsDebitAmountPer6--------------------------------->"highValueXnsDebitAmountPer);
			print("highValueXnsDebitCount6--------------------------------->"highValueXnsDebitCount);
			print("highValueXnsDebitCountPer6--------------------------------->"highValueXnsDebitCountPer);
			print("nonTradeXnsCreditAmountMonData6--------------------------------->"nonTradeXnsCreditAmountMonData6);
			print("nonTradeXnsCreditAmountPerMonData6--------------------------------->"nonTradeXnsCreditAmountPerMonData6);
			print("nonTradeXnsCreditCountMonData6--------------------------------->"nonTradeXnsCreditCountMonData6);
			print("nonTradeXnsCreditCountPerMonData6--------------------------------->"nonTradeXnsCreditCountPerMonData6);
			print("nonTradeXnsDebitAmountMonData6--------------------------------->"nonTradeXnsDebitAmountMonData6);
			print("nonTradeXnsDebitAmountPerMonData6--------------------------------->"nonTradeXnsDebitAmountPerMonData6);
			print("nonTradeXnsDebitCountMonData6--------------------------------->"nonTradeXnsDebitCountMonData6);
			print("nonTradeXnsDebitCountPerMonData6--------------------------------->"nonTradeXnsDebitCountPerMonData6);
			
			print("circularXnsAmount--------------------------------->"circularXnsAmount);
			print("circularXnsAmountPerMonData6--------------------------------->"circularXnsAmountPerMonData6);
			print("circularXnsCount--------------------------------->"circularXnsCount);
			print("circularXnsCountPerMonData6--------------------------------->"circularXnsCountPerMonData6);
		}
		else if(i = 6)then{
			j=0;
			monthDataCount is an integer initially 0;
			monthlyDataArrayCount is an integer initially 0;
			
			// ---------------Start MonthlyData7 Variable -----------------
			selfRelatedPartyCreditAmountMonData7 is a real initially 0;
			selfRelatedPartyCreditAmountPerMonData7 is a real initially 0;
			selfRelatedPartyCreditCountMonData7 is a real initially 0;
			selfRelatedPartyCreditCountPerMonData7 is a real initially 0;
			selfRelatedPartyDebitAmountMonData7 is a real initially 0;
			selfRelatedPartyDebitAmountPerMonData7 is a real initially 0;
			selfRelatedPartyDebitCountMonData7 is a real initially 0;
			selfRelatedPartyDebitCountPerMonData7 is a real initially 0;
			
			nonTradeXnsAmountTotalBusinessCreditXnsMonData7 is a real initially 0;
			nonTradeXnsCountNumberOfBusinessCreditXnsMonData7 is a real initially 0;
			nonTradeXnsAmountTotalBusinessDebitXnsMonData7 is a real initially 0;
			nonTradeXnsCountNumberOfBusinessDebitXnsMonData7 is a real initially 0;
			
			nonTradeXnsCreditAmountMonData7 is a real initially 0;
			nonTradeXnsCreditAmountPerMonData7 is a real initially 0;
			nonTradeXnsCreditCountMonData7 is a real initially 0;
			nonTradeXnsCreditCountPerMonData7 is a real initially 0;
			nonTradeXnsDebitAmountMonData7 is a real initially 0;
			nonTradeXnsDebitAmountPerMonData7 is a real initially 0;
			nonTradeXnsDebitCountMonData7 is a real initially 0;
			nonTradeXnsDebitCountPerMonData7 is a real initially 0;

			circularXnsAmountPerMonData7 is a real initially 0;
			circularXnsCountPerMonData7 is a real initially 0;
			 
			// ---------------End MonthlyData7 Variable -------------------
			
			
			
			monthlyDataArrayCount = perfiosData.data.additionalMonthlyDetails.monthlyData7.count - 12;
			
			// --------------------- Start MonthlyData7 Loop ------------------------
			for each MonthlyData in perfiosData.data.additionalMonthlyDetails.monthlyData7 such that(it <> unknown) do {
				
				
				//------------------ latest 12 month ------------------
				if( monthDataCount >= monthlyDataArrayCount) then {
			
					if(it.totalOfSelfAndRelatedPartyCreditTxns is known) then{
						
						// Calculate selfRelatedPartyCreditAmount for individual account
						selfRelatedPartyCreditAmountMonData7 = selfRelatedPartyCreditAmountMonData7 + it.totalOfSelfAndRelatedPartyCreditTxns;
						
						// Calculate selfRelatedPartyCreditAmount  for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyCreditTxns + it.totalOfSelfAndRelatedPartyCreditTxns;
					}
					if(it.numberOfSelfAndRelatedPartyCreditTxns is known) then{
						
						// Calculate selfRelatedPartyCreditCount for individual account
						selfRelatedPartyCreditCountMonData7 = selfRelatedPartyCreditCountMonData7 + it.numberOfSelfAndRelatedPartyCreditTxns;
						
						// Calculate selfRelatedPartyCreditCount for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyCreditTxns + it.numberOfSelfAndRelatedPartyCreditTxns;
					}
					if(it.totalOfSelfAndRelatedPartyDebitTxns is known) then{
						
						// Calculate selfRelatedPartyDebitAmount for individual account
						selfRelatedPartyDebitAmountMonData7 = selfRelatedPartyDebitAmountMonData7 + it.totalOfSelfAndRelatedPartyDebitTxns;
						
						// Calculate selfRelatedPartyDebitAmount for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyDebitTxns + it.totalOfSelfAndRelatedPartyDebitTxns;
					}
					if(it.numberOfSelfAndRelatedPartyDebitTxns is known) then{
						
						// Calculate selfRelatedPartyDebitCount for individual account
						selfRelatedPartyDebitCountMonData7 = selfRelatedPartyDebitCountMonData7 + it.numberOfSelfAndRelatedPartyDebitTxns;
						
						// Calculate selfRelatedPartyDebitCount for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyDebitTxns + it.numberOfSelfAndRelatedPartyDebitTxns;
					}
			
					
					if(it.totalBusinessCreditTxns is known) then{
						
						// Calculate totalBusinessCreditTxns for individual account
						nonTradeXnsAmountTotalBusinessCreditXnsMonData7 = nonTradeXnsAmountTotalBusinessCreditXnsMonData7 + it.totalBusinessCreditTxns;
						
						// Calculate totalBusinessCreditTxns for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessCreditTxns + it.totalBusinessCreditTxns;
					}
					if(it.numberOfBusinessCreditTxns is known) then{
						
						// Calculate numberOfBusinessCreditTxns  for individual account
						nonTradeXnsCountNumberOfBusinessCreditXnsMonData7 = nonTradeXnsCountNumberOfBusinessCreditXnsMonData7 + it.numberOfBusinessCreditTxns;
						
						// Calculate numberOfBusinessCreditTxns  for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns + it.numberOfBusinessCreditTxns;
					}
					if(it.totalBusinessDebitTxns is known) then{
						
						// Calculate totalBusinessDebitTxns for individual account
						nonTradeXnsAmountTotalBusinessDebitXnsMonData7 = nonTradeXnsAmountTotalBusinessDebitXnsMonData7 + it.totalBusinessDebitTxns;
						
						// Calculate totalBusinessDebitTxns for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessDebitTxns + it.totalBusinessDebitTxns;
					}
					if(it.numberOfBusinessDebitTxns is known) then{
						
						// Calculate numberOfBusinessDebitTxns  for individual account
						nonTradeXnsCountNumberOfBusinessDebitXnsMonData7 = nonTradeXnsCountNumberOfBusinessDebitXnsMonData7 + it.numberOfBusinessDebitTxns;
						
						// Calculate numberOfBusinessDebitTxns  for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns + it.numberOfBusinessDebitTxns;
					}
				}
				monthDataCount = monthDataCount + 1;
				j = j + 1;
			}
			// ------------------------- End MonthlyData7 Loop -----------------------
			
			// ---------------- Self & Related Party Transactions Start-------------------
			
			// Calculate selfRelatedPartyCreditAmountPerMonData7
			if(selfRelatedPartyCreditAmountMonData7 is known and totalCreditAmount is known) then{
				selfRelatedPartyCreditAmountPerMonData7 = (selfRelatedPartyCreditAmountMonData7/totalCreditAmount)*100;
			}
			
			// Calculate selfRelatedPartyCreditCountPerMonData7
			if(selfRelatedPartyCreditCountMonData7 is known and totalCreditCount is known) then{
				selfRelatedPartyCreditCountPerMonData7 = (selfRelatedPartyCreditCountMonData7/totalCreditCount)*100;
			}
			
			// Calculate selfRelatedPartyDebitAmountPerMonData7
			if(selfRelatedPartyDebitAmountMonData7 is known and totalDebitAmount is known) then{
				selfRelatedPartyDebitAmountPerMonData7 = (selfRelatedPartyDebitAmountMonData7/totalDebitAmount)*100;
			}
			
			// Calculate selfRelatedPartyDebitCountPerMonData7
			if(selfRelatedPartyDebitCountMonData7 is known and totalDebitCount is known) then{
				selfRelatedPartyDebitCountPerMonData7 = (selfRelatedPartyDebitCountMonData7/totalDebitCount)*100;
			}
			// ---------------- Self & Related Party Transactions End-------------------
			
			// -------------------- Non-Trade Transactions start -----------------------
			
			// Calculate nonTradeXnsCreditAmountMonData7
			if(nonTradeXnsAmountTotalBusinessCreditXnsMonData7 is known and totalCreditAmount is known) then{
				nonTradeXnsCreditAmountMonData7 = (nonTradeXnsAmountTotalBusinessCreditXnsMonData7 - totalCreditAmount);
			}
			// Calculate nonTradeXnsCreditAmountPerMonData7
			if(nonTradeXnsCreditAmountMonData7 is known and totalCreditAmount is known) then{
				nonTradeXnsCreditAmountPerMonData7 = (nonTradeXnsCreditAmountMonData7/totalCreditAmount)*100;
			}
			
			// Calculate nonTradeXnsCreditCountMonData7
			if(nonTradeXnsCountNumberOfBusinessCreditXnsMonData7 is known and totalCreditCount is known) then{
				nonTradeXnsCreditCountMonData7 = nonTradeXnsCountNumberOfBusinessCreditXnsMonData7 - totalCreditCount;
			}
			// Calculate nonTradeXnsCreditCountPerMonData7
			if(nonTradeXnsCreditCountMonData7 is known and totalCreditCount is known) then{
				nonTradeXnsCreditCountPerMonData7 = (nonTradeXnsCreditCountMonData7/totalCreditCount)*100;
			}
			
			// Calculate nonTradeXnsDebitAmountMonData7
			if(nonTradeXnsAmountTotalBusinessDebitXnsMonData7 is known and totalDebitAmount is known) then{
				nonTradeXnsDebitAmountMonData7 = nonTradeXnsAmountTotalBusinessDebitXnsMonData7 - totalDebitAmount;
			}
	
			// Calculate nonTradeXnsDebitAmountPerMonData7
			if(nonTradeXnsDebitAmountMonData7 is known and totalDebitAmount is known) then{
				nonTradeXnsDebitAmountPerMonData7 = (nonTradeXnsDebitAmountMonData7/totalDebitAmount)*100;
			}
			
			// Calculate nonTradeXnsDebitCountMonData7
			if(nonTradeXnsCountNumberOfBusinessDebitXnsMonData7 is known and totalDebitCount is known) then{
				nonTradeXnsDebitCountMonData7 = nonTradeXnsCountNumberOfBusinessDebitXnsMonData7 - totalDebitCount;
			}
	
			// Calculate nonTradeXnsDebitCountPerMonData7
			if(nonTradeXnsDebitCountMonData7 is known and totalDebitCount is known) then{
				nonTradeXnsDebitCountPerMonData7 = (nonTradeXnsDebitCountMonData7/totalDebitCount)*100;
			}
		
			// -------------------- Non-Trade Transactions End -------------------------
			
			// ------------------- Circular Transactions Start -------------------------
			
			// Calculate circularXnsAmountPerMonData7
			if(circularXnsAmount is known) then{
				circularXnsAmountPerMonData7 = (circularXnsAmount / (totalCreditAmount + totalDebitAmount))*100;
			}
	
			// Calculate circularXnsCountPerMonData7
			if(circularXnsCount is known) then{
				circularXnsCountPerMonData7 = (circularXnsCount / (totalDebitCount + totalCreditCount))*100;
			}
			
			// ------------------- Circular Transactions End ---------------------------
			
			// ############## Append ###################
			
			fn_AppendCalculatedVariable(message,"selfRelatedPartyCreditAmountMonData7", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyCreditAmountMonData7,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyCreditAmountPerMonData7", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyCreditAmountPerMonData7,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyCreditCountMonData7", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyCreditCountMonData7,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyCreditCountPerMonData7", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyCreditCountPerMonData7,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyDebitAmountMonData7", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyDebitAmountMonData7,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyDebitAmountPerMonData7", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyDebitAmountPerMonData7,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyDebitCountMonData7", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyDebitCountMonData7,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyDebitCountPerMonData7", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyDebitCountPerMonData7,-2) as a string);
	
			fn_AppendCalculatedVariable(message,"highValueXnsCreditAmount", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(highValueXnsCreditAmount,-2) as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsCreditAmountPer", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(highValueXnsCreditAmountPer,-2) as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsCreditCount", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, highValueXnsCreditCount as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsCreditCountPer", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(highValueXnsCreditCountPer,-2) as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsDebitAmount", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(highValueXnsDebitAmount,-2) as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsDebitAmountPer", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(highValueXnsDebitAmountPer,-2) as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsDebitCount", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, highValueXnsDebitCount as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsDebitCountPer", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(highValueXnsDebitCountPer,-2) as a string);
	
			fn_AppendCalculatedVariable(message,"nonTradeXnsCreditAmountMonData7", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsCreditAmountMonData7,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsCreditAmountPerMonData7", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsCreditAmountPerMonData7,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsCreditCountMonData7", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsCreditCountMonData7,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsCreditCountPerMonData7", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsCreditCountPerMonData7,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsDebitAmountMonData7", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsDebitAmountMonData7,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsDebitAmountPerMonData7", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsDebitAmountPerMonData7,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsDebitCountMonData7", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsDebitCountMonData7,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsDebitCountPerMonData7", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsDebitCountPerMonData7,-2) as a string);
	
	
			fn_AppendCalculatedVariable(message,"circularXnsAmount", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(circularXnsAmount,-2) as a string);
			fn_AppendCalculatedVariable(message,"circularXnsAmountPerMonData7", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(circularXnsAmountPerMonData7,-2) as a string);
			fn_AppendCalculatedVariable(message,"circularXnsCount", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(circularXnsCount,-2) as a string);
			fn_AppendCalculatedVariable(message,"circularXnsCountPerMonData7", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(circularXnsCountPerMonData7,-2) as a string);
			
			print("selfRelatedPartyCreditAmountMonData7--------------------------------->"selfRelatedPartyCreditAmountMonData7);
			print("selfRelatedPartyCreditAmountPerMonData7--------------------------------->"selfRelatedPartyCreditAmountPerMonData7);
			print("selfRelatedPartyCreditCountMonData7--------------------------------->"selfRelatedPartyCreditCountMonData7);
			print("selfRelatedPartyCreditCountPerMonData7--------------------------------->"selfRelatedPartyCreditCountPerMonData7);
			print("selfRelatedPartyDebitAmountMonData7--------------------------------->"selfRelatedPartyDebitAmountMonData7);
			print("selfRelatedPartyDebitAmountPerMonData7--------------------------------->"selfRelatedPartyDebitAmountPerMonData7);
			print("selfRelatedPartyDebitCountMonData7--------------------------------->"selfRelatedPartyDebitCountMonData7);
			print("selfRelatedPartyDebitCountPerMonData7--------------------------------->"selfRelatedPartyDebitCountPerMonData7);
			print("highValueXnsCreditAmount7--------------------------------->"highValueXnsCreditAmount);
			print("highValueXnsCreditAmountPer7--------------------------------->"highValueXnsCreditAmountPer);
			print("highValueXnsCreditCount7--------------------------------->"highValueXnsCreditCount);
			print("highValueXnsCreditCountPer7--------------------------------->"highValueXnsCreditCountPer);
			print("highValueXnsDebitAmount7--------------------------------->"highValueXnsDebitAmount);
			print("highValueXnsDebitAmountPer7--------------------------------->"highValueXnsDebitAmountPer);
			print("highValueXnsDebitCount7--------------------------------->"highValueXnsDebitCount);
			print("highValueXnsDebitCountPer7--------------------------------->"highValueXnsDebitCountPer);
			print("nonTradeXnsCreditAmountMonData7--------------------------------->"nonTradeXnsCreditAmountMonData7);
			print("nonTradeXnsCreditAmountPerMonData7--------------------------------->"nonTradeXnsCreditAmountPerMonData7);
			print("nonTradeXnsCreditCountMonData7--------------------------------->"nonTradeXnsCreditCountMonData7);
			print("nonTradeXnsCreditCountPerMonData7--------------------------------->"nonTradeXnsCreditCountPerMonData7);
			print("nonTradeXnsDebitAmountMonData7--------------------------------->"nonTradeXnsDebitAmountMonData7);
			print("nonTradeXnsDebitAmountPerMonData7--------------------------------->"nonTradeXnsDebitAmountPerMonData7);
			print("nonTradeXnsDebitCountMonData7--------------------------------->"nonTradeXnsDebitCountMonData7);
			print("nonTradeXnsDebitCountPerMonData7--------------------------------->"nonTradeXnsDebitCountPerMonData7);
			
			print("circularXnsAmount--------------------------------->"circularXnsAmount);
			print("circularXnsAmountPerMonData7--------------------------------->"circularXnsAmountPerMonData7);
			print("circularXnsCount--------------------------------->"circularXnsCount);
			print("circularXnsCountPerMonData7--------------------------------->"circularXnsCountPerMonData7);
		}
		else if(i = 7)then{
			j=0;
			monthDataCount is an integer initially 0;
			monthlyDataArrayCount is an integer initially 0;
			
			// ---------------Start MonthlyData8 Variable -----------------
			selfRelatedPartyCreditAmountMonData8 is a real initially 0;
			selfRelatedPartyCreditAmountPerMonData8 is a real initially 0;
			selfRelatedPartyCreditCountMonData8 is a real initially 0;
			selfRelatedPartyCreditCountPerMonData8 is a real initially 0;
			selfRelatedPartyDebitAmountMonData8 is a real initially 0;
			selfRelatedPartyDebitAmountPerMonData8 is a real initially 0;
			selfRelatedPartyDebitCountMonData8 is a real initially 0;
			selfRelatedPartyDebitCountPerMonData8 is a real initially 0;
			
			nonTradeXnsAmountTotalBusinessCreditXnsMonData8 is a real initially 0;
			nonTradeXnsCountNumberOfBusinessCreditXnsMonData8 is a real initially 0;
			nonTradeXnsAmountTotalBusinessDebitXnsMonData8 is a real initially 0;
			nonTradeXnsCountNumberOfBusinessDebitXnsMonData8 is a real initially 0;
			
			nonTradeXnsCreditAmountMonData8 is a real initially 0;
			nonTradeXnsCreditAmountPerMonData8 is a real initially 0;
			nonTradeXnsCreditCountMonData8 is a real initially 0;
			nonTradeXnsCreditCountPerMonData8 is a real initially 0;
			nonTradeXnsDebitAmountMonData8 is a real initially 0;
			nonTradeXnsDebitAmountPerMonData8 is a real initially 0;
			nonTradeXnsDebitCountMonData8 is a real initially 0;
			nonTradeXnsDebitCountPerMonData8 is a real initially 0;

			circularXnsAmountPerMonData8 is a real initially 0;
			circularXnsCountPerMonData8 is a real initially 0;
			 
			// ---------------End MonthlyData8 Variable -------------------
			
			
			
			monthlyDataArrayCount = perfiosData.data.additionalMonthlyDetails.monthlyData8.count - 12;
			
			// --------------------- Start MonthlyData8 Loop ------------------------
			for each MonthlyData in perfiosData.data.additionalMonthlyDetails.monthlyData8 such that(it <> unknown) do {
				
				
				//------------------ latest 12 month ------------------
				if( monthDataCount >= monthlyDataArrayCount) then {
			
					if(it.totalOfSelfAndRelatedPartyCreditTxns is known) then{
						
						// Calculate selfRelatedPartyCreditAmount for individual account
						selfRelatedPartyCreditAmountMonData8 = selfRelatedPartyCreditAmountMonData8 + it.totalOfSelfAndRelatedPartyCreditTxns;
						
						// Calculate selfRelatedPartyCreditAmount  for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyCreditTxns + it.totalOfSelfAndRelatedPartyCreditTxns;
					}
					if(it.numberOfSelfAndRelatedPartyCreditTxns is known) then{
						
						// Calculate selfRelatedPartyCreditCount for individual account
						selfRelatedPartyCreditCountMonData8 = selfRelatedPartyCreditCountMonData8 + it.numberOfSelfAndRelatedPartyCreditTxns;
						
						// Calculate selfRelatedPartyCreditCount for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyCreditTxns + it.numberOfSelfAndRelatedPartyCreditTxns;
					}
					if(it.totalOfSelfAndRelatedPartyDebitTxns is known) then{
						
						// Calculate selfRelatedPartyDebitAmount for individual account
						selfRelatedPartyDebitAmountMonData8 = selfRelatedPartyDebitAmountMonData8 + it.totalOfSelfAndRelatedPartyDebitTxns;
						
						// Calculate selfRelatedPartyDebitAmount for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyDebitTxns + it.totalOfSelfAndRelatedPartyDebitTxns;
					}
					if(it.numberOfSelfAndRelatedPartyDebitTxns is known) then{
						
						// Calculate selfRelatedPartyDebitCount for individual account
						selfRelatedPartyDebitCountMonData8 = selfRelatedPartyDebitCountMonData8 + it.numberOfSelfAndRelatedPartyDebitTxns;
						
						// Calculate selfRelatedPartyDebitCount for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyDebitTxns + it.numberOfSelfAndRelatedPartyDebitTxns;
					}
			
					
					if(it.totalBusinessCreditTxns is known) then{
						
						// Calculate totalBusinessCreditTxns for individual account
						nonTradeXnsAmountTotalBusinessCreditXnsMonData8 = nonTradeXnsAmountTotalBusinessCreditXnsMonData8 + it.totalBusinessCreditTxns;
						
						// Calculate totalBusinessCreditTxns for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessCreditTxns + it.totalBusinessCreditTxns;
					}
					if(it.numberOfBusinessCreditTxns is known) then{
						
						// Calculate numberOfBusinessCreditTxns  for individual account
						nonTradeXnsCountNumberOfBusinessCreditXnsMonData8 = nonTradeXnsCountNumberOfBusinessCreditXnsMonData8 + it.numberOfBusinessCreditTxns;
						
						// Calculate numberOfBusinessCreditTxns  for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns + it.numberOfBusinessCreditTxns;
					}
					if(it.totalBusinessDebitTxns is known) then{
						
						// Calculate totalBusinessDebitTxns for individual account
						nonTradeXnsAmountTotalBusinessDebitXnsMonData8 = nonTradeXnsAmountTotalBusinessDebitXnsMonData8 + it.totalBusinessDebitTxns;
						
						// Calculate totalBusinessDebitTxns for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessDebitTxns + it.totalBusinessDebitTxns;
					}
					if(it.numberOfBusinessDebitTxns is known) then{
						
						// Calculate numberOfBusinessDebitTxns  for individual account
						nonTradeXnsCountNumberOfBusinessDebitXnsMonData8 = nonTradeXnsCountNumberOfBusinessDebitXnsMonData8 + it.numberOfBusinessDebitTxns;
						
						// Calculate numberOfBusinessDebitTxns  for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns + it.numberOfBusinessDebitTxns;
					}
				}
				monthDataCount = monthDataCount + 1;
				j = j + 1;
			}
			// ------------------------- End MonthlyData8 Loop -----------------------
			
			// ---------------- Self & Related Party Transactions Start-------------------
			
			// Calculate selfRelatedPartyCreditAmountPerMonData8
			if(selfRelatedPartyCreditAmountMonData8 is known and totalCreditAmount is known) then{
				selfRelatedPartyCreditAmountPerMonData8 = (selfRelatedPartyCreditAmountMonData8/totalCreditAmount)*100;
			}
			
			// Calculate selfRelatedPartyCreditCountPerMonData8
			if(selfRelatedPartyCreditCountMonData8 is known and totalCreditCount is known) then{
				selfRelatedPartyCreditCountPerMonData8 = (selfRelatedPartyCreditCountMonData8/totalCreditCount)*100;
			}
			
			// Calculate selfRelatedPartyDebitAmountPerMonData8
			if(selfRelatedPartyDebitAmountMonData8 is known and totalDebitAmount is known) then{
				selfRelatedPartyDebitAmountPerMonData8 = (selfRelatedPartyDebitAmountMonData8/totalDebitAmount)*100;
			}
			
			// Calculate selfRelatedPartyDebitCountPerMonData8
			if(selfRelatedPartyDebitCountMonData8 is known and totalDebitCount is known) then{
				selfRelatedPartyDebitCountPerMonData8 = (selfRelatedPartyDebitCountMonData8/totalDebitCount)*100;
			}
			// ---------------- Self & Related Party Transactions End-------------------
			
			// -------------------- Non-Trade Transactions start -----------------------
			
			// Calculate nonTradeXnsCreditAmountMonData8
			if(nonTradeXnsAmountTotalBusinessCreditXnsMonData8 is known and totalCreditAmount is known) then{
				nonTradeXnsCreditAmountMonData8 = (nonTradeXnsAmountTotalBusinessCreditXnsMonData8 - totalCreditAmount);
			}
			// Calculate nonTradeXnsCreditAmountPerMonData8
			if(nonTradeXnsCreditAmountMonData8 is known and totalCreditAmount is known) then{
				nonTradeXnsCreditAmountPerMonData8 = (nonTradeXnsCreditAmountMonData8/totalCreditAmount)*100;
			}
			
			// Calculate nonTradeXnsCreditCountMonData8
			if(nonTradeXnsCountNumberOfBusinessCreditXnsMonData8 is known and totalCreditCount is known) then{
				nonTradeXnsCreditCountMonData8 = nonTradeXnsCountNumberOfBusinessCreditXnsMonData8 - totalCreditCount;
			}
			// Calculate nonTradeXnsCreditCountPerMonData8
			if(nonTradeXnsCreditCountMonData8 is known and totalCreditCount is known) then{
				nonTradeXnsCreditCountPerMonData8 = (nonTradeXnsCreditCountMonData8/totalCreditCount)*100;
			}
			
			// Calculate nonTradeXnsDebitAmountMonData8
			if(nonTradeXnsAmountTotalBusinessDebitXnsMonData8 is known and totalDebitAmount is known) then{
				nonTradeXnsDebitAmountMonData8 = nonTradeXnsAmountTotalBusinessDebitXnsMonData8 - totalDebitAmount;
			}
	
			// Calculate nonTradeXnsDebitAmountPerMonData8
			if(nonTradeXnsDebitAmountMonData8 is known and totalDebitAmount is known) then{
				nonTradeXnsDebitAmountPerMonData8 = (nonTradeXnsDebitAmountMonData8/totalDebitAmount)*100;
			}
			
			// Calculate nonTradeXnsDebitCountMonData8
			if(nonTradeXnsCountNumberOfBusinessDebitXnsMonData8 is known and totalDebitCount is known) then{
				nonTradeXnsDebitCountMonData8 = nonTradeXnsCountNumberOfBusinessDebitXnsMonData8 - totalDebitCount;
			}
	
			// Calculate nonTradeXnsDebitCountPerMonData8
			if(nonTradeXnsDebitCountMonData8 is known and totalDebitCount is known) then{
				nonTradeXnsDebitCountPerMonData8 = (nonTradeXnsDebitCountMonData8/totalDebitCount)*100;
			}
		
			// -------------------- Non-Trade Transactions End -------------------------
			
			// ------------------- Circular Transactions Start -------------------------
			
			// Calculate circularXnsAmountPerMonData8
			if(circularXnsAmount is known) then{
				circularXnsAmountPerMonData8 = (circularXnsAmount / (totalCreditAmount + totalDebitAmount))*100;
			}
	
			// Calculate circularXnsCountPerMonData8
			if(circularXnsCount is known) then{
				circularXnsCountPerMonData8 = (circularXnsCount / (totalDebitCount + totalCreditCount))*100;
			}
			
			// ------------------- Circular Transactions End ---------------------------
			
			// ############## Append ###################
			
			fn_AppendCalculatedVariable(message,"selfRelatedPartyCreditAmountMonData8", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyCreditAmountMonData8,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyCreditAmountPerMonData8", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyCreditAmountPerMonData8,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyCreditCountMonData8", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyCreditCountMonData8,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyCreditCountPerMonData8", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyCreditCountPerMonData8,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyDebitAmountMonData8", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyDebitAmountMonData8,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyDebitAmountPerMonData8", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyDebitAmountPerMonData8,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyDebitCountMonData8", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyDebitCountMonData8,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyDebitCountPerMonData8", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyDebitCountPerMonData8,-2) as a string);
	
			fn_AppendCalculatedVariable(message,"highValueXnsCreditAmount", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(highValueXnsCreditAmount,-2) as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsCreditAmountPer", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(highValueXnsCreditAmountPer,-2) as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsCreditCount", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, highValueXnsCreditCount as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsCreditCountPer", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(highValueXnsCreditCountPer,-2) as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsDebitAmount", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(highValueXnsDebitAmount,-2) as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsDebitAmountPer", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(highValueXnsDebitAmountPer,-2) as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsDebitCount", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, highValueXnsDebitCount as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsDebitCountPer", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(highValueXnsDebitCountPer,-2) as a string);
	
			fn_AppendCalculatedVariable(message,"nonTradeXnsCreditAmountMonData8", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsCreditAmountMonData8,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsCreditAmountPerMonData8", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsCreditAmountPerMonData8,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsCreditCountMonData8", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsCreditCountMonData8,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsCreditCountPerMonData8", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsCreditCountPerMonData8,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsDebitAmountMonData8", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsDebitAmountMonData8,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsDebitAmountPerMonData8", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsDebitAmountPerMonData8,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsDebitCountMonData8", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsDebitCountMonData8,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsDebitCountPerMonData8", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsDebitCountPerMonData8,-2) as a string);
	
	
			fn_AppendCalculatedVariable(message,"circularXnsAmount", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(circularXnsAmount,-2) as a string);
			fn_AppendCalculatedVariable(message,"circularXnsAmountPerMonData8", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(circularXnsAmountPerMonData8,-2) as a string);
			fn_AppendCalculatedVariable(message,"circularXnsCount", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(circularXnsCount,-2) as a string);
			fn_AppendCalculatedVariable(message,"circularXnsCountPerMonData8", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(circularXnsCountPerMonData8,-2) as a string);
			
			print("selfRelatedPartyCreditAmountMonData8--------------------------------->"selfRelatedPartyCreditAmountMonData8);
			print("selfRelatedPartyCreditAmountPerMonData8--------------------------------->"selfRelatedPartyCreditAmountPerMonData8);
			print("selfRelatedPartyCreditCountMonData8--------------------------------->"selfRelatedPartyCreditCountMonData8);
			print("selfRelatedPartyCreditCountPerMonData8--------------------------------->"selfRelatedPartyCreditCountPerMonData8);
			print("selfRelatedPartyDebitAmountMonData8--------------------------------->"selfRelatedPartyDebitAmountMonData8);
			print("selfRelatedPartyDebitAmountPerMonData8--------------------------------->"selfRelatedPartyDebitAmountPerMonData8);
			print("selfRelatedPartyDebitCountMonData8--------------------------------->"selfRelatedPartyDebitCountMonData8);
			print("selfRelatedPartyDebitCountPerMonData8--------------------------------->"selfRelatedPartyDebitCountPerMonData8);
			print("highValueXnsCreditAmount8--------------------------------->"highValueXnsCreditAmount);
			print("highValueXnsCreditAmountPer8--------------------------------->"highValueXnsCreditAmountPer);
			print("highValueXnsCreditCount8--------------------------------->"highValueXnsCreditCount);
			print("highValueXnsCreditCountPer8--------------------------------->"highValueXnsCreditCountPer);
			print("highValueXnsDebitAmount8--------------------------------->"highValueXnsDebitAmount);
			print("highValueXnsDebitAmountPer8--------------------------------->"highValueXnsDebitAmountPer);
			print("highValueXnsDebitCount8--------------------------------->"highValueXnsDebitCount);
			print("highValueXnsDebitCountPer8--------------------------------->"highValueXnsDebitCountPer);
			print("nonTradeXnsCreditAmountMonData8--------------------------------->"nonTradeXnsCreditAmountMonData8);
			print("nonTradeXnsCreditAmountPerMonData8--------------------------------->"nonTradeXnsCreditAmountPerMonData8);
			print("nonTradeXnsCreditCountMonData8--------------------------------->"nonTradeXnsCreditCountMonData8);
			print("nonTradeXnsCreditCountPerMonData8--------------------------------->"nonTradeXnsCreditCountPerMonData8);
			print("nonTradeXnsDebitAmountMonData8--------------------------------->"nonTradeXnsDebitAmountMonData8);
			print("nonTradeXnsDebitAmountPerMonData8--------------------------------->"nonTradeXnsDebitAmountPerMonData8);
			print("nonTradeXnsDebitCountMonData8--------------------------------->"nonTradeXnsDebitCountMonData8);
			print("nonTradeXnsDebitCountPerMonData8--------------------------------->"nonTradeXnsDebitCountPerMonData8);
			
			print("circularXnsAmount--------------------------------->"circularXnsAmount);
			print("circularXnsAmountPerMonData8--------------------------------->"circularXnsAmountPerMonData8);
			print("circularXnsCount--------------------------------->"circularXnsCount);
			print("circularXnsCountPerMonData8--------------------------------->"circularXnsCountPerMonData8);
		}
		else if(i = 8)then{
			j=0;
			monthDataCount is an integer initially 0;
			monthlyDataArrayCount is an integer initially 0;
			
			// ---------------Start MonthlyData9 Variable -----------------
			selfRelatedPartyCreditAmountMonData9 is a real initially 0;
			selfRelatedPartyCreditAmountPerMonData9 is a real initially 0;
			selfRelatedPartyCreditCountMonData9 is a real initially 0;
			selfRelatedPartyCreditCountPerMonData9 is a real initially 0;
			selfRelatedPartyDebitAmountMonData9 is a real initially 0;
			selfRelatedPartyDebitAmountPerMonData9 is a real initially 0;
			selfRelatedPartyDebitCountMonData9 is a real initially 0;
			selfRelatedPartyDebitCountPerMonData9 is a real initially 0;
			
			nonTradeXnsAmountTotalBusinessCreditXnsMonData9 is a real initially 0;
			nonTradeXnsCountNumberOfBusinessCreditXnsMonData9 is a real initially 0;
			nonTradeXnsAmountTotalBusinessDebitXnsMonData9 is a real initially 0;
			nonTradeXnsCountNumberOfBusinessDebitXnsMonData9 is a real initially 0;
			
			nonTradeXnsCreditAmountMonData9 is a real initially 0;
			nonTradeXnsCreditAmountPerMonData9 is a real initially 0;
			nonTradeXnsCreditCountMonData9 is a real initially 0;
			nonTradeXnsCreditCountPerMonData9 is a real initially 0;
			nonTradeXnsDebitAmountMonData9 is a real initially 0;
			nonTradeXnsDebitAmountPerMonData9 is a real initially 0;
			nonTradeXnsDebitCountMonData9 is a real initially 0;
			nonTradeXnsDebitCountPerMonData9 is a real initially 0;

			circularXnsAmountPerMonData9 is a real initially 0;
			circularXnsCountPerMonData9 is a real initially 0;
			 
			// ---------------End MonthlyData9 Variable -------------------
			
			
			
			monthlyDataArrayCount = perfiosData.data.additionalMonthlyDetails.monthlyData9.count - 12;
			
			// --------------------- Start MonthlyData9 Loop ------------------------
			for each MonthlyData in perfiosData.data.additionalMonthlyDetails.monthlyData9 such that(it <> unknown) do {
				
				
				//------------------ latest 12 month ------------------
				if( monthDataCount >= monthlyDataArrayCount) then {
			
					if(it.totalOfSelfAndRelatedPartyCreditTxns is known) then{
						
						// Calculate selfRelatedPartyCreditAmount for individual account
						selfRelatedPartyCreditAmountMonData9 = selfRelatedPartyCreditAmountMonData9 + it.totalOfSelfAndRelatedPartyCreditTxns;
						
						// Calculate selfRelatedPartyCreditAmount  for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyCreditTxns + it.totalOfSelfAndRelatedPartyCreditTxns;
					}
					if(it.numberOfSelfAndRelatedPartyCreditTxns is known) then{
						
						// Calculate selfRelatedPartyCreditCount for individual account
						selfRelatedPartyCreditCountMonData9 = selfRelatedPartyCreditCountMonData9 + it.numberOfSelfAndRelatedPartyCreditTxns;
						
						// Calculate selfRelatedPartyCreditCount for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyCreditTxns + it.numberOfSelfAndRelatedPartyCreditTxns;
					}
					if(it.totalOfSelfAndRelatedPartyDebitTxns is known) then{
						
						// Calculate selfRelatedPartyDebitAmount for individual account
						selfRelatedPartyDebitAmountMonData9 = selfRelatedPartyDebitAmountMonData9 + it.totalOfSelfAndRelatedPartyDebitTxns;
						
						// Calculate selfRelatedPartyDebitAmount for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyDebitTxns + it.totalOfSelfAndRelatedPartyDebitTxns;
					}
					if(it.numberOfSelfAndRelatedPartyDebitTxns is known) then{
						
						// Calculate selfRelatedPartyDebitCount for individual account
						selfRelatedPartyDebitCountMonData9 = selfRelatedPartyDebitCountMonData9 + it.numberOfSelfAndRelatedPartyDebitTxns;
						
						// Calculate selfRelatedPartyDebitCount for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyDebitTxns + it.numberOfSelfAndRelatedPartyDebitTxns;
					}
			
					
					if(it.totalBusinessCreditTxns is known) then{
						
						// Calculate totalBusinessCreditTxns for individual account
						nonTradeXnsAmountTotalBusinessCreditXnsMonData9 = nonTradeXnsAmountTotalBusinessCreditXnsMonData9 + it.totalBusinessCreditTxns;
						
						// Calculate totalBusinessCreditTxns for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessCreditTxns + it.totalBusinessCreditTxns;
					}
					if(it.numberOfBusinessCreditTxns is known) then{
						
						// Calculate numberOfBusinessCreditTxns  for individual account
						nonTradeXnsCountNumberOfBusinessCreditXnsMonData9 = nonTradeXnsCountNumberOfBusinessCreditXnsMonData9 + it.numberOfBusinessCreditTxns;
						
						// Calculate numberOfBusinessCreditTxns  for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns + it.numberOfBusinessCreditTxns;
					}
					if(it.totalBusinessDebitTxns is known) then{
						
						// Calculate totalBusinessDebitTxns for individual account
						nonTradeXnsAmountTotalBusinessDebitXnsMonData9 = nonTradeXnsAmountTotalBusinessDebitXnsMonData9 + it.totalBusinessDebitTxns;
						
						// Calculate totalBusinessDebitTxns for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessDebitTxns + it.totalBusinessDebitTxns;
					}
					if(it.numberOfBusinessDebitTxns is known) then{
						
						// Calculate numberOfBusinessDebitTxns  for individual account
						nonTradeXnsCountNumberOfBusinessDebitXnsMonData9 = nonTradeXnsCountNumberOfBusinessDebitXnsMonData9 + it.numberOfBusinessDebitTxns;
						
						// Calculate numberOfBusinessDebitTxns  for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns + it.numberOfBusinessDebitTxns;
					}
				}
				monthDataCount = monthDataCount + 1;
				j = j + 1;
			}
			// ------------------------- End MonthlyData9 Loop -----------------------
			
			// ---------------- Self & Related Party Transactions Start-------------------
			
			// Calculate selfRelatedPartyCreditAmountPerMonData9
			if(selfRelatedPartyCreditAmountMonData9 is known and totalCreditAmount is known) then{
				selfRelatedPartyCreditAmountPerMonData9 = (selfRelatedPartyCreditAmountMonData9/totalCreditAmount)*100;
			}
			
			// Calculate selfRelatedPartyCreditCountPerMonData9
			if(selfRelatedPartyCreditCountMonData9 is known and totalCreditCount is known) then{
				selfRelatedPartyCreditCountPerMonData9 = (selfRelatedPartyCreditCountMonData9/totalCreditCount)*100;
			}
			
			// Calculate selfRelatedPartyDebitAmountPerMonData9
			if(selfRelatedPartyDebitAmountMonData9 is known and totalDebitAmount is known) then{
				selfRelatedPartyDebitAmountPerMonData9 = (selfRelatedPartyDebitAmountMonData9/totalDebitAmount)*100;
			}
			
			// Calculate selfRelatedPartyDebitCountPerMonData9
			if(selfRelatedPartyDebitCountMonData9 is known and totalDebitCount is known) then{
				selfRelatedPartyDebitCountPerMonData9 = (selfRelatedPartyDebitCountMonData9/totalDebitCount)*100;
			}
			// ---------------- Self & Related Party Transactions End-------------------
			
			// -------------------- Non-Trade Transactions start -----------------------
			
			// Calculate nonTradeXnsCreditAmountMonData9
			if(nonTradeXnsAmountTotalBusinessCreditXnsMonData9 is known and totalCreditAmount is known) then{
				nonTradeXnsCreditAmountMonData9 = (nonTradeXnsAmountTotalBusinessCreditXnsMonData9 - totalCreditAmount);
			}
			// Calculate nonTradeXnsCreditAmountPerMonData9
			if(nonTradeXnsCreditAmountMonData9 is known and totalCreditAmount is known) then{
				nonTradeXnsCreditAmountPerMonData9 = (nonTradeXnsCreditAmountMonData9/totalCreditAmount)*100;
			}
			
			// Calculate nonTradeXnsCreditCountMonData9
			if(nonTradeXnsCountNumberOfBusinessCreditXnsMonData9 is known and totalCreditCount is known) then{
				nonTradeXnsCreditCountMonData9 = nonTradeXnsCountNumberOfBusinessCreditXnsMonData9 - totalCreditCount;
			}
			// Calculate nonTradeXnsCreditCountPerMonData9
			if(nonTradeXnsCreditCountMonData9 is known and totalCreditCount is known) then{
				nonTradeXnsCreditCountPerMonData9 = (nonTradeXnsCreditCountMonData9/totalCreditCount)*100;
			}
			
			// Calculate nonTradeXnsDebitAmountMonData9
			if(nonTradeXnsAmountTotalBusinessDebitXnsMonData9 is known and totalDebitAmount is known) then{
				nonTradeXnsDebitAmountMonData9 = nonTradeXnsAmountTotalBusinessDebitXnsMonData9 - totalDebitAmount;
			}
	
			// Calculate nonTradeXnsDebitAmountPerMonData9
			if(nonTradeXnsDebitAmountMonData9 is known and totalDebitAmount is known) then{
				nonTradeXnsDebitAmountPerMonData9 = (nonTradeXnsDebitAmountMonData9/totalDebitAmount)*100;
			}
			
			// Calculate nonTradeXnsDebitCountMonData9
			if(nonTradeXnsCountNumberOfBusinessDebitXnsMonData9 is known and totalDebitCount is known) then{
				nonTradeXnsDebitCountMonData9 = nonTradeXnsCountNumberOfBusinessDebitXnsMonData9 - totalDebitCount;
			}
	
			// Calculate nonTradeXnsDebitCountPerMonData9
			if(nonTradeXnsDebitCountMonData9 is known and totalDebitCount is known) then{
				nonTradeXnsDebitCountPerMonData9 = (nonTradeXnsDebitCountMonData9/totalDebitCount)*100;
			}
		
			// -------------------- Non-Trade Transactions End -------------------------
			
			// ------------------- Circular Transactions Start -------------------------
			
			// Calculate circularXnsAmountPerMonData9
			if(circularXnsAmount is known) then{
				circularXnsAmountPerMonData9 = (circularXnsAmount / (totalCreditAmount + totalDebitAmount))*100;
			}
	
			// Calculate circularXnsCountPerMonData9
			if(circularXnsCount is known) then{
				circularXnsCountPerMonData9 = (circularXnsCount / (totalDebitCount + totalCreditCount))*100;
			}
			
			// ------------------- Circular Transactions End ---------------------------
			
			// ############## Append ###################
			
			fn_AppendCalculatedVariable(message,"selfRelatedPartyCreditAmountMonData9", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyCreditAmountMonData9,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyCreditAmountPerMonData9", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyCreditAmountPerMonData9,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyCreditCountMonData9", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyCreditCountMonData9,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyCreditCountPerMonData9", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyCreditCountPerMonData9,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyDebitAmountMonData9", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyDebitAmountMonData9,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyDebitAmountPerMonData9", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyDebitAmountPerMonData9,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyDebitCountMonData9", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyDebitCountMonData9,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyDebitCountPerMonData9", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyDebitCountPerMonData9,-2) as a string);
	
			fn_AppendCalculatedVariable(message,"highValueXnsCreditAmount", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(highValueXnsCreditAmount,-2) as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsCreditAmountPer", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(highValueXnsCreditAmountPer,-2) as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsCreditCount", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, highValueXnsCreditCount as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsCreditCountPer", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(highValueXnsCreditCountPer,-2) as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsDebitAmount", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(highValueXnsDebitAmount,-2) as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsDebitAmountPer", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(highValueXnsDebitAmountPer,-2) as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsDebitCount", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, highValueXnsDebitCount as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsDebitCountPer", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(highValueXnsDebitCountPer,-2) as a string);
	
			fn_AppendCalculatedVariable(message,"nonTradeXnsCreditAmountMonData9", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsCreditAmountMonData9,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsCreditAmountPerMonData9", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsCreditAmountPerMonData9,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsCreditCountMonData9", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsCreditCountMonData9,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsCreditCountPerMonData9", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsCreditCountPerMonData9,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsDebitAmountMonData9", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsDebitAmountMonData9,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsDebitAmountPerMonData9", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsDebitAmountPerMonData9,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsDebitCountMonData9", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsDebitCountMonData9,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsDebitCountPerMonData9", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsDebitCountPerMonData9,-2) as a string);
	
	
			fn_AppendCalculatedVariable(message,"circularXnsAmount", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(circularXnsAmount,-2) as a string);
			fn_AppendCalculatedVariable(message,"circularXnsAmountPerMonData9", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(circularXnsAmountPerMonData9,-2) as a string);
			fn_AppendCalculatedVariable(message,"circularXnsCount", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(circularXnsCount,-2) as a string);
			fn_AppendCalculatedVariable(message,"circularXnsCountPerMonData9", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(circularXnsCountPerMonData9,-2) as a string);
			
			print("selfRelatedPartyCreditAmountMonData9--------------------------------->"selfRelatedPartyCreditAmountMonData9);
			print("selfRelatedPartyCreditAmountPerMonData9--------------------------------->"selfRelatedPartyCreditAmountPerMonData9);
			print("selfRelatedPartyCreditCountMonData9--------------------------------->"selfRelatedPartyCreditCountMonData9);
			print("selfRelatedPartyCreditCountPerMonData9--------------------------------->"selfRelatedPartyCreditCountPerMonData9);
			print("selfRelatedPartyDebitAmountMonData9--------------------------------->"selfRelatedPartyDebitAmountMonData9);
			print("selfRelatedPartyDebitAmountPerMonData9--------------------------------->"selfRelatedPartyDebitAmountPerMonData9);
			print("selfRelatedPartyDebitCountMonData9--------------------------------->"selfRelatedPartyDebitCountMonData9);
			print("selfRelatedPartyDebitCountPerMonData9--------------------------------->"selfRelatedPartyDebitCountPerMonData9);
			print("highValueXnsCreditAmount9--------------------------------->"highValueXnsCreditAmount);
			print("highValueXnsCreditAmountPer9--------------------------------->"highValueXnsCreditAmountPer);
			print("highValueXnsCreditCount9--------------------------------->"highValueXnsCreditCount);
			print("highValueXnsCreditCountPer9--------------------------------->"highValueXnsCreditCountPer);
			print("highValueXnsDebitAmount9--------------------------------->"highValueXnsDebitAmount);
			print("highValueXnsDebitAmountPer9--------------------------------->"highValueXnsDebitAmountPer);
			print("highValueXnsDebitCount9--------------------------------->"highValueXnsDebitCount);
			print("highValueXnsDebitCountPer9--------------------------------->"highValueXnsDebitCountPer);
			print("nonTradeXnsCreditAmountMonData9--------------------------------->"nonTradeXnsCreditAmountMonData9);
			print("nonTradeXnsCreditAmountPerMonData9--------------------------------->"nonTradeXnsCreditAmountPerMonData9);
			print("nonTradeXnsCreditCountMonData9--------------------------------->"nonTradeXnsCreditCountMonData9);
			print("nonTradeXnsCreditCountPerMonData9--------------------------------->"nonTradeXnsCreditCountPerMonData9);
			print("nonTradeXnsDebitAmountMonData9--------------------------------->"nonTradeXnsDebitAmountMonData9);
			print("nonTradeXnsDebitAmountPerMonData9--------------------------------->"nonTradeXnsDebitAmountPerMonData9);
			print("nonTradeXnsDebitCountMonData9--------------------------------->"nonTradeXnsDebitCountMonData9);
			print("nonTradeXnsDebitCountPerMonData9--------------------------------->"nonTradeXnsDebitCountPerMonData9);
			
			print("circularXnsAmount--------------------------------->"circularXnsAmount);
			print("circularXnsAmountPerMonData9--------------------------------->"circularXnsAmountPerMonData9);
			print("circularXnsCount--------------------------------->"circularXnsCount);
			print("circularXnsCountPerMonData9--------------------------------->"circularXnsCountPerMonData9);
		}
		else if(i = 9)then{
			j=0;
			monthDataCount is an integer initially 0;
			monthlyDataArrayCount is an integer initially 0;
			
			// ---------------Start MonthlyData10 Variable -----------------
			selfRelatedPartyCreditAmountMonData10 is a real initially 0;
			selfRelatedPartyCreditAmountPerMonData10 is a real initially 0;
			selfRelatedPartyCreditCountMonData10 is a real initially 0;
			selfRelatedPartyCreditCountPerMonData10 is a real initially 0;
			selfRelatedPartyDebitAmountMonData10 is a real initially 0;
			selfRelatedPartyDebitAmountPerMonData10 is a real initially 0;
			selfRelatedPartyDebitCountMonData10 is a real initially 0;
			selfRelatedPartyDebitCountPerMonData10 is a real initially 0;
			
			nonTradeXnsAmountTotalBusinessCreditXnsMonData10 is a real initially 0;
			nonTradeXnsCountNumberOfBusinessCreditXnsMonData10 is a real initially 0;
			nonTradeXnsAmountTotalBusinessDebitXnsMonData10 is a real initially 0;
			nonTradeXnsCountNumberOfBusinessDebitXnsMonData10 is a real initially 0;
			
			nonTradeXnsCreditAmountMonData10 is a real initially 0;
			nonTradeXnsCreditAmountPerMonData10 is a real initially 0;
			nonTradeXnsCreditCountMonData10 is a real initially 0;
			nonTradeXnsCreditCountPerMonData10 is a real initially 0;
			nonTradeXnsDebitAmountMonData10 is a real initially 0;
			nonTradeXnsDebitAmountPerMonData10 is a real initially 0;
			nonTradeXnsDebitCountMonData10 is a real initially 0;
			nonTradeXnsDebitCountPerMonData10 is a real initially 0;

			circularXnsAmountPerMonData10 is a real initially 0;
			circularXnsCountPerMonData10 is a real initially 0;
			 
			// ---------------End MonthlyData10 Variable -------------------
			
			
			
			monthlyDataArrayCount = perfiosData.data.additionalMonthlyDetails.monthlyData10.count - 12;
			
			// --------------------- Start MonthlyData10 Loop ------------------------
			for each MonthlyData in perfiosData.data.additionalMonthlyDetails.monthlyData10 such that(it <> unknown) do {
				
				
				//------------------ latest 12 month ------------------
				if( monthDataCount >= monthlyDataArrayCount) then {
			
					if(it.totalOfSelfAndRelatedPartyCreditTxns is known) then{
						
						// Calculate selfRelatedPartyCreditAmount for individual account
						selfRelatedPartyCreditAmountMonData10 = selfRelatedPartyCreditAmountMonData10 + it.totalOfSelfAndRelatedPartyCreditTxns;
						
						// Calculate selfRelatedPartyCreditAmount  for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyCreditTxns + it.totalOfSelfAndRelatedPartyCreditTxns;
					}
					if(it.numberOfSelfAndRelatedPartyCreditTxns is known) then{
						
						// Calculate selfRelatedPartyCreditCount for individual account
						selfRelatedPartyCreditCountMonData10 = selfRelatedPartyCreditCountMonData10 + it.numberOfSelfAndRelatedPartyCreditTxns;
						
						// Calculate selfRelatedPartyCreditCount for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyCreditTxns + it.numberOfSelfAndRelatedPartyCreditTxns;
					}
					if(it.totalOfSelfAndRelatedPartyDebitTxns is known) then{
						
						// Calculate selfRelatedPartyDebitAmount for individual account
						selfRelatedPartyDebitAmountMonData10 = selfRelatedPartyDebitAmountMonData10 + it.totalOfSelfAndRelatedPartyDebitTxns;
						
						// Calculate selfRelatedPartyDebitAmount for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyDebitTxns + it.totalOfSelfAndRelatedPartyDebitTxns;
					}
					if(it.numberOfSelfAndRelatedPartyDebitTxns is known) then{
						
						// Calculate selfRelatedPartyDebitCount for individual account
						selfRelatedPartyDebitCountMonData10 = selfRelatedPartyDebitCountMonData10 + it.numberOfSelfAndRelatedPartyDebitTxns;
						
						// Calculate selfRelatedPartyDebitCount for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyDebitTxns + it.numberOfSelfAndRelatedPartyDebitTxns;
					}
			
					
					if(it.totalBusinessCreditTxns is known) then{
						
						// Calculate totalBusinessCreditTxns for individual account
						nonTradeXnsAmountTotalBusinessCreditXnsMonData10 = nonTradeXnsAmountTotalBusinessCreditXnsMonData10 + it.totalBusinessCreditTxns;
						
						// Calculate totalBusinessCreditTxns for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessCreditTxns + it.totalBusinessCreditTxns;
					}
					if(it.numberOfBusinessCreditTxns is known) then{
						
						// Calculate numberOfBusinessCreditTxns  for individual account
						nonTradeXnsCountNumberOfBusinessCreditXnsMonData10 = nonTradeXnsCountNumberOfBusinessCreditXnsMonData10 + it.numberOfBusinessCreditTxns;
						
						// Calculate numberOfBusinessCreditTxns  for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns + it.numberOfBusinessCreditTxns;
					}
					if(it.totalBusinessDebitTxns is known) then{
						
						// Calculate totalBusinessDebitTxns for individual account
						nonTradeXnsAmountTotalBusinessDebitXnsMonData10 = nonTradeXnsAmountTotalBusinessDebitXnsMonData10 + it.totalBusinessDebitTxns;
						
						// Calculate totalBusinessDebitTxns for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessDebitTxns + it.totalBusinessDebitTxns;
					}
					if(it.numberOfBusinessDebitTxns is known) then{
						
						// Calculate numberOfBusinessDebitTxns  for individual account
						nonTradeXnsCountNumberOfBusinessDebitXnsMonData10 = nonTradeXnsCountNumberOfBusinessDebitXnsMonData10 + it.numberOfBusinessDebitTxns;
						
						// Calculate numberOfBusinessDebitTxns  for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns + it.numberOfBusinessDebitTxns;
					}
				}
				monthDataCount = monthDataCount + 1;
				j = j + 1;
			}
			// ------------------------- End MonthlyData10 Loop -----------------------
			
			// ---------------- Self & Related Party Transactions Start-------------------
			
			// Calculate selfRelatedPartyCreditAmountPerMonData10
			if(selfRelatedPartyCreditAmountMonData10 is known and totalCreditAmount is known) then{
				selfRelatedPartyCreditAmountPerMonData10 = (selfRelatedPartyCreditAmountMonData10/totalCreditAmount)*100;
			}
			
			// Calculate selfRelatedPartyCreditCountPerMonData10
			if(selfRelatedPartyCreditCountMonData10 is known and totalCreditCount is known) then{
				selfRelatedPartyCreditCountPerMonData10 = (selfRelatedPartyCreditCountMonData10/totalCreditCount)*100;
			}
			
			// Calculate selfRelatedPartyDebitAmountPerMonData10
			if(selfRelatedPartyDebitAmountMonData10 is known and totalDebitAmount is known) then{
				selfRelatedPartyDebitAmountPerMonData10 = (selfRelatedPartyDebitAmountMonData10/totalDebitAmount)*100;
			}
			
			// Calculate selfRelatedPartyDebitCountPerMonData10
			if(selfRelatedPartyDebitCountMonData10 is known and totalDebitCount is known) then{
				selfRelatedPartyDebitCountPerMonData10 = (selfRelatedPartyDebitCountMonData10/totalDebitCount)*100;
			}
			// ---------------- Self & Related Party Transactions End-------------------
			
			// -------------------- Non-Trade Transactions start -----------------------
			
			// Calculate nonTradeXnsCreditAmountMonData10
			if(nonTradeXnsAmountTotalBusinessCreditXnsMonData10 is known and totalCreditAmount is known) then{
				nonTradeXnsCreditAmountMonData10 = (nonTradeXnsAmountTotalBusinessCreditXnsMonData10 - totalCreditAmount);
			}
			// Calculate nonTradeXnsCreditAmountPerMonData10
			if(nonTradeXnsCreditAmountMonData10 is known and totalCreditAmount is known) then{
				nonTradeXnsCreditAmountPerMonData10 = (nonTradeXnsCreditAmountMonData10/totalCreditAmount)*100;
			}
			
			// Calculate nonTradeXnsCreditCountMonData10
			if(nonTradeXnsCountNumberOfBusinessCreditXnsMonData10 is known and totalCreditCount is known) then{
				nonTradeXnsCreditCountMonData10 = nonTradeXnsCountNumberOfBusinessCreditXnsMonData10 - totalCreditCount;
			}
			// Calculate nonTradeXnsCreditCountPerMonData10
			if(nonTradeXnsCreditCountMonData10 is known and totalCreditCount is known) then{
				nonTradeXnsCreditCountPerMonData10 = (nonTradeXnsCreditCountMonData10/totalCreditCount)*100;
			}
			
			// Calculate nonTradeXnsDebitAmountMonData10
			if(nonTradeXnsAmountTotalBusinessDebitXnsMonData10 is known and totalDebitAmount is known) then{
				nonTradeXnsDebitAmountMonData10 = nonTradeXnsAmountTotalBusinessDebitXnsMonData10 - totalDebitAmount;
			}
	
			// Calculate nonTradeXnsDebitAmountPerMonData10
			if(nonTradeXnsDebitAmountMonData10 is known and totalDebitAmount is known) then{
				nonTradeXnsDebitAmountPerMonData10 = (nonTradeXnsDebitAmountMonData10/totalDebitAmount)*100;
			}
			
			// Calculate nonTradeXnsDebitCountMonData10
			if(nonTradeXnsCountNumberOfBusinessDebitXnsMonData10 is known and totalDebitCount is known) then{
				nonTradeXnsDebitCountMonData10 = nonTradeXnsCountNumberOfBusinessDebitXnsMonData10 - totalDebitCount;
			}
	
			// Calculate nonTradeXnsDebitCountPerMonData10
			if(nonTradeXnsDebitCountMonData10 is known and totalDebitCount is known) then{
				nonTradeXnsDebitCountPerMonData10 = (nonTradeXnsDebitCountMonData10/totalDebitCount)*100;
			}
		
			// -------------------- Non-Trade Transactions End -------------------------
			
			// ------------------- Circular Transactions Start -------------------------
			
			// Calculate circularXnsAmountPerMonData10
			if(circularXnsAmount is known) then{
				circularXnsAmountPerMonData10 = (circularXnsAmount / (totalCreditAmount + totalDebitAmount))*100;
			}
	
			// Calculate circularXnsCountPerMonData10
			if(circularXnsCount is known) then{
				circularXnsCountPerMonData10 = (circularXnsCount / (totalDebitCount + totalCreditCount))*100;
			}
			
			// ------------------- Circular Transactions End ---------------------------
			
			// ############## Append ###################
			
			fn_AppendCalculatedVariable(message,"selfRelatedPartyCreditAmountMonData10", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyCreditAmountMonData10,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyCreditAmountPerMonData10", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyCreditAmountPerMonData10,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyCreditCountMonData10", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyCreditCountMonData10,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyCreditCountPerMonData10", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyCreditCountPerMonData10,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyDebitAmountMonData10", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyDebitAmountMonData10,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyDebitAmountPerMonData10", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyDebitAmountPerMonData10,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyDebitCountMonData10", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyDebitCountMonData10,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyDebitCountPerMonData10", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyDebitCountPerMonData10,-2) as a string);
	
			fn_AppendCalculatedVariable(message,"highValueXnsCreditAmount", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(highValueXnsCreditAmount,-2) as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsCreditAmountPer", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(highValueXnsCreditAmountPer,-2) as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsCreditCount", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, highValueXnsCreditCount as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsCreditCountPer", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(highValueXnsCreditCountPer,-2) as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsDebitAmount", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(highValueXnsDebitAmount,-2) as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsDebitAmountPer", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(highValueXnsDebitAmountPer,-2) as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsDebitCount", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, highValueXnsDebitCount as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsDebitCountPer", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(highValueXnsDebitCountPer,-2) as a string);
	
			fn_AppendCalculatedVariable(message,"nonTradeXnsCreditAmountMonData10", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsCreditAmountMonData10,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsCreditAmountPerMonData10", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsCreditAmountPerMonData10,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsCreditCountMonData10", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsCreditCountMonData10,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsCreditCountPerMonData10", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsCreditCountPerMonData10,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsDebitAmountMonData10", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsDebitAmountMonData10,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsDebitAmountPerMonData10", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsDebitAmountPerMonData10,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsDebitCountMonData10", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsDebitCountMonData10,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsDebitCountPerMonData10", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsDebitCountPerMonData10,-2) as a string);
	
	
			fn_AppendCalculatedVariable(message,"circularXnsAmount", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(circularXnsAmount,-2) as a string);
			fn_AppendCalculatedVariable(message,"circularXnsAmountPerMonData10", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(circularXnsAmountPerMonData10,-2) as a string);
			fn_AppendCalculatedVariable(message,"circularXnsCount", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(circularXnsCount,-2) as a string);
			fn_AppendCalculatedVariable(message,"circularXnsCountPerMonData10", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(circularXnsCountPerMonData10,-2) as a string);
			
			print("selfRelatedPartyCreditAmountMonData10--------------------------------->"selfRelatedPartyCreditAmountMonData10);
			print("selfRelatedPartyCreditAmountPerMonData10--------------------------------->"selfRelatedPartyCreditAmountPerMonData10);
			print("selfRelatedPartyCreditCountMonData10--------------------------------->"selfRelatedPartyCreditCountMonData10);
			print("selfRelatedPartyCreditCountPerMonData10--------------------------------->"selfRelatedPartyCreditCountPerMonData10);
			print("selfRelatedPartyDebitAmountMonData10--------------------------------->"selfRelatedPartyDebitAmountMonData10);
			print("selfRelatedPartyDebitAmountPerMonData10--------------------------------->"selfRelatedPartyDebitAmountPerMonData10);
			print("selfRelatedPartyDebitCountMonData10--------------------------------->"selfRelatedPartyDebitCountMonData10);
			print("selfRelatedPartyDebitCountPerMonData10--------------------------------->"selfRelatedPartyDebitCountPerMonData10);
			print("highValueXnsCreditAmount10--------------------------------->"highValueXnsCreditAmount);
			print("highValueXnsCreditAmountPer10--------------------------------->"highValueXnsCreditAmountPer);
			print("highValueXnsCreditCount10--------------------------------->"highValueXnsCreditCount);
			print("highValueXnsCreditCountPer10--------------------------------->"highValueXnsCreditCountPer);
			print("highValueXnsDebitAmount10--------------------------------->"highValueXnsDebitAmount);
			print("highValueXnsDebitAmountPer10--------------------------------->"highValueXnsDebitAmountPer);
			print("highValueXnsDebitCount10--------------------------------->"highValueXnsDebitCount);
			print("highValueXnsDebitCountPer10--------------------------------->"highValueXnsDebitCountPer);
			print("nonTradeXnsCreditAmountMonData10--------------------------------->"nonTradeXnsCreditAmountMonData10);
			print("nonTradeXnsCreditAmountPerMonData10--------------------------------->"nonTradeXnsCreditAmountPerMonData10);
			print("nonTradeXnsCreditCountMonData10--------------------------------->"nonTradeXnsCreditCountMonData10);
			print("nonTradeXnsCreditCountPerMonData10--------------------------------->"nonTradeXnsCreditCountPerMonData10);
			print("nonTradeXnsDebitAmountMonData10--------------------------------->"nonTradeXnsDebitAmountMonData10);
			print("nonTradeXnsDebitAmountPerMonData10--------------------------------->"nonTradeXnsDebitAmountPerMonData10);
			print("nonTradeXnsDebitCountMonData10--------------------------------->"nonTradeXnsDebitCountMonData10);
			print("nonTradeXnsDebitCountPerMonData10--------------------------------->"nonTradeXnsDebitCountPerMonData10);
			
			print("circularXnsAmount--------------------------------->"circularXnsAmount);
			print("circularXnsAmountPerMonData10--------------------------------->"circularXnsAmountPerMonData10);
			print("circularXnsCount--------------------------------->"circularXnsCount);
			print("circularXnsCountPerMonData10--------------------------------->"circularXnsCountPerMonData10);
		}
		else if(i = 10)then{
			j=0;
			monthDataCount is an integer initially 0;
			monthlyDataArrayCount is an integer initially 0;
			
			// ---------------Start MonthlyData11 Variable -----------------
			selfRelatedPartyCreditAmountMonData11 is a real initially 0;
			selfRelatedPartyCreditAmountPerMonData11 is a real initially 0;
			selfRelatedPartyCreditCountMonData11 is a real initially 0;
			selfRelatedPartyCreditCountPerMonData11 is a real initially 0;
			selfRelatedPartyDebitAmountMonData11 is a real initially 0;
			selfRelatedPartyDebitAmountPerMonData11 is a real initially 0;
			selfRelatedPartyDebitCountMonData11 is a real initially 0;
			selfRelatedPartyDebitCountPerMonData11 is a real initially 0;
			
			nonTradeXnsAmountTotalBusinessCreditXnsMonData11 is a real initially 0;
			nonTradeXnsCountNumberOfBusinessCreditXnsMonData11 is a real initially 0;
			nonTradeXnsAmountTotalBusinessDebitXnsMonData11 is a real initially 0;
			nonTradeXnsCountNumberOfBusinessDebitXnsMonData11 is a real initially 0;
			
			nonTradeXnsCreditAmountMonData11 is a real initially 0;
			nonTradeXnsCreditAmountPerMonData11 is a real initially 0;
			nonTradeXnsCreditCountMonData11 is a real initially 0;
			nonTradeXnsCreditCountPerMonData11 is a real initially 0;
			nonTradeXnsDebitAmountMonData11 is a real initially 0;
			nonTradeXnsDebitAmountPerMonData11 is a real initially 0;
			nonTradeXnsDebitCountMonData11 is a real initially 0;
			nonTradeXnsDebitCountPerMonData11 is a real initially 0;

			circularXnsAmountPerMonData11 is a real initially 0;
			circularXnsCountPerMonData11 is a real initially 0;
			 
			// ---------------End MonthlyData11 Variable -------------------
			
			
			
			monthlyDataArrayCount = perfiosData.data.additionalMonthlyDetails.monthlyData11.count - 12;
			
			// --------------------- Start MonthlyData11 Loop ------------------------
			for each MonthlyData in perfiosData.data.additionalMonthlyDetails.monthlyData11 such that(it <> unknown) do {
				
				
				//------------------ latest 12 month ------------------
				if( monthDataCount >= monthlyDataArrayCount) then {
			
					if(it.totalOfSelfAndRelatedPartyCreditTxns is known) then{
						
						// Calculate selfRelatedPartyCreditAmount for individual account
						selfRelatedPartyCreditAmountMonData11 = selfRelatedPartyCreditAmountMonData11 + it.totalOfSelfAndRelatedPartyCreditTxns;
						
						// Calculate selfRelatedPartyCreditAmount  for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyCreditTxns + it.totalOfSelfAndRelatedPartyCreditTxns;
					}
					if(it.numberOfSelfAndRelatedPartyCreditTxns is known) then{
						
						// Calculate selfRelatedPartyCreditCount for individual account
						selfRelatedPartyCreditCountMonData11 = selfRelatedPartyCreditCountMonData11 + it.numberOfSelfAndRelatedPartyCreditTxns;
						
						// Calculate selfRelatedPartyCreditCount for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyCreditTxns + it.numberOfSelfAndRelatedPartyCreditTxns;
					}
					if(it.totalOfSelfAndRelatedPartyDebitTxns is known) then{
						
						// Calculate selfRelatedPartyDebitAmount for individual account
						selfRelatedPartyDebitAmountMonData11 = selfRelatedPartyDebitAmountMonData11 + it.totalOfSelfAndRelatedPartyDebitTxns;
						
						// Calculate selfRelatedPartyDebitAmount for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyDebitTxns + it.totalOfSelfAndRelatedPartyDebitTxns;
					}
					if(it.numberOfSelfAndRelatedPartyDebitTxns is known) then{
						
						// Calculate selfRelatedPartyDebitCount for individual account
						selfRelatedPartyDebitCountMonData11 = selfRelatedPartyDebitCountMonData11 + it.numberOfSelfAndRelatedPartyDebitTxns;
						
						// Calculate selfRelatedPartyDebitCount for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyDebitTxns + it.numberOfSelfAndRelatedPartyDebitTxns;
					}
			
					
					if(it.totalBusinessCreditTxns is known) then{
						
						// Calculate totalBusinessCreditTxns for individual account
						nonTradeXnsAmountTotalBusinessCreditXnsMonData11 = nonTradeXnsAmountTotalBusinessCreditXnsMonData11 + it.totalBusinessCreditTxns;
						
						// Calculate totalBusinessCreditTxns for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessCreditTxns + it.totalBusinessCreditTxns;
					}
					if(it.numberOfBusinessCreditTxns is known) then{
						
						// Calculate numberOfBusinessCreditTxns  for individual account
						nonTradeXnsCountNumberOfBusinessCreditXnsMonData11 = nonTradeXnsCountNumberOfBusinessCreditXnsMonData11 + it.numberOfBusinessCreditTxns;
						
						// Calculate numberOfBusinessCreditTxns  for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns + it.numberOfBusinessCreditTxns;
					}
					if(it.totalBusinessDebitTxns is known) then{
						
						// Calculate totalBusinessDebitTxns for individual account
						nonTradeXnsAmountTotalBusinessDebitXnsMonData11 = nonTradeXnsAmountTotalBusinessDebitXnsMonData11 + it.totalBusinessDebitTxns;
						
						// Calculate totalBusinessDebitTxns for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessDebitTxns + it.totalBusinessDebitTxns;
					}
					if(it.numberOfBusinessDebitTxns is known) then{
						
						// Calculate numberOfBusinessDebitTxns  for individual account
						nonTradeXnsCountNumberOfBusinessDebitXnsMonData11 = nonTradeXnsCountNumberOfBusinessDebitXnsMonData11 + it.numberOfBusinessDebitTxns;
						
						// Calculate numberOfBusinessDebitTxns  for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns + it.numberOfBusinessDebitTxns;
					}
				}
				monthDataCount = monthDataCount + 1;
				j = j + 1;
			}
			// ------------------------- End MonthlyData11 Loop -----------------------
			
			// ---------------- Self & Related Party Transactions Start-------------------
			
			// Calculate selfRelatedPartyCreditAmountPerMonData11
			if(selfRelatedPartyCreditAmountMonData11 is known and totalCreditAmount is known) then{
				selfRelatedPartyCreditAmountPerMonData11 = (selfRelatedPartyCreditAmountMonData11/totalCreditAmount)*100;
			}
			
			// Calculate selfRelatedPartyCreditCountPerMonData11
			if(selfRelatedPartyCreditCountMonData11 is known and totalCreditCount is known) then{
				selfRelatedPartyCreditCountPerMonData11 = (selfRelatedPartyCreditCountMonData11/totalCreditCount)*100;
			}
			
			// Calculate selfRelatedPartyDebitAmountPerMonData11
			if(selfRelatedPartyDebitAmountMonData11 is known and totalDebitAmount is known) then{
				selfRelatedPartyDebitAmountPerMonData11 = (selfRelatedPartyDebitAmountMonData11/totalDebitAmount)*100;
			}
			
			// Calculate selfRelatedPartyDebitCountPerMonData11
			if(selfRelatedPartyDebitCountMonData11 is known and totalDebitCount is known) then{
				selfRelatedPartyDebitCountPerMonData11 = (selfRelatedPartyDebitCountMonData11/totalDebitCount)*100;
			}
			// ---------------- Self & Related Party Transactions End-------------------
			
			// -------------------- Non-Trade Transactions start -----------------------
			
			// Calculate nonTradeXnsCreditAmountMonData11
			if(nonTradeXnsAmountTotalBusinessCreditXnsMonData11 is known and totalCreditAmount is known) then{
				nonTradeXnsCreditAmountMonData11 = (nonTradeXnsAmountTotalBusinessCreditXnsMonData11 - totalCreditAmount);
			}
			// Calculate nonTradeXnsCreditAmountPerMonData11
			if(nonTradeXnsCreditAmountMonData11 is known and totalCreditAmount is known) then{
				nonTradeXnsCreditAmountPerMonData11 = (nonTradeXnsCreditAmountMonData11/totalCreditAmount)*100;
			}
			
			// Calculate nonTradeXnsCreditCountMonData11
			if(nonTradeXnsCountNumberOfBusinessCreditXnsMonData11 is known and totalCreditCount is known) then{
				nonTradeXnsCreditCountMonData11 = nonTradeXnsCountNumberOfBusinessCreditXnsMonData11 - totalCreditCount;
			}
			// Calculate nonTradeXnsCreditCountPerMonData11
			if(nonTradeXnsCreditCountMonData11 is known and totalCreditCount is known) then{
				nonTradeXnsCreditCountPerMonData11 = (nonTradeXnsCreditCountMonData11/totalCreditCount)*100;
			}
			
			// Calculate nonTradeXnsDebitAmountMonData11
			if(nonTradeXnsAmountTotalBusinessDebitXnsMonData11 is known and totalDebitAmount is known) then{
				nonTradeXnsDebitAmountMonData11 = nonTradeXnsAmountTotalBusinessDebitXnsMonData11 - totalDebitAmount;
			}
	
			// Calculate nonTradeXnsDebitAmountPerMonData11
			if(nonTradeXnsDebitAmountMonData11 is known and totalDebitAmount is known) then{
				nonTradeXnsDebitAmountPerMonData11 = (nonTradeXnsDebitAmountMonData11/totalDebitAmount)*100;
			}
			
			// Calculate nonTradeXnsDebitCountMonData11
			if(nonTradeXnsCountNumberOfBusinessDebitXnsMonData11 is known and totalDebitCount is known) then{
				nonTradeXnsDebitCountMonData11 = nonTradeXnsCountNumberOfBusinessDebitXnsMonData11 - totalDebitCount;
			}
	
			// Calculate nonTradeXnsDebitCountPerMonData11
			if(nonTradeXnsDebitCountMonData11 is known and totalDebitCount is known) then{
				nonTradeXnsDebitCountPerMonData11 = (nonTradeXnsDebitCountMonData11/totalDebitCount)*100;
			}
		
			// -------------------- Non-Trade Transactions End -------------------------
			
			// ------------------- Circular Transactions Start -------------------------
			
			// Calculate circularXnsAmountPerMonData11
			if(circularXnsAmount is known) then{
				circularXnsAmountPerMonData11 = (circularXnsAmount / (totalCreditAmount + totalDebitAmount))*100;
			}
	
			// Calculate circularXnsCountPerMonData11
			if(circularXnsCount is known) then{
				circularXnsCountPerMonData11 = (circularXnsCount / (totalDebitCount + totalCreditCount))*100;
			}
			
			// ------------------- Circular Transactions End ---------------------------
			
			// ############## Append ###################
			
			fn_AppendCalculatedVariable(message,"selfRelatedPartyCreditAmountMonData11", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyCreditAmountMonData11,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyCreditAmountPerMonData11", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyCreditAmountPerMonData11,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyCreditCountMonData11", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyCreditCountMonData11,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyCreditCountPerMonData11", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyCreditCountPerMonData11,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyDebitAmountMonData11", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyDebitAmountMonData11,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyDebitAmountPerMonData11", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyDebitAmountPerMonData11,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyDebitCountMonData11", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyDebitCountMonData11,-2) as a string);
			fn_AppendCalculatedVariable(message,"selfRelatedPartyDebitCountPerMonData11", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyDebitCountPerMonData11,-2) as a string);
	
			fn_AppendCalculatedVariable(message,"highValueXnsCreditAmount", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(highValueXnsCreditAmount,-2) as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsCreditAmountPer", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(highValueXnsCreditAmountPer,-2) as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsCreditCount", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, highValueXnsCreditCount as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsCreditCountPer", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(highValueXnsCreditCountPer,-2) as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsDebitAmount", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(highValueXnsDebitAmount,-2) as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsDebitAmountPer", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(highValueXnsDebitAmountPer,-2) as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsDebitCount", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, highValueXnsDebitCount as a string);
			fn_AppendCalculatedVariable(message,"highValueXnsDebitCountPer", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(highValueXnsDebitCountPer,-2) as a string);
	
			fn_AppendCalculatedVariable(message,"nonTradeXnsCreditAmountMonData11", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsCreditAmountMonData11,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsCreditAmountPerMonData11", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsCreditAmountPerMonData11,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsCreditCountMonData11", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsCreditCountMonData11,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsCreditCountPerMonData11", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsCreditCountPerMonData11,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsDebitAmountMonData11", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsDebitAmountMonData11,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsDebitAmountPerMonData11", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsDebitAmountPerMonData11,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsDebitCountMonData11", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsDebitCountMonData11,-2) as a string);
			fn_AppendCalculatedVariable(message,"nonTradeXnsDebitCountPerMonData11", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsDebitCountPerMonData11,-2) as a string);
	
	
			fn_AppendCalculatedVariable(message,"circularXnsAmount", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(circularXnsAmount,-2) as a string);
			fn_AppendCalculatedVariable(message,"circularXnsAmountPerMonData11", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(circularXnsAmountPerMonData11,-2) as a string);
			fn_AppendCalculatedVariable(message,"circularXnsCount", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(circularXnsCount,-2) as a string);
			fn_AppendCalculatedVariable(message,"circularXnsCountPerMonData11", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(circularXnsCountPerMonData11,-2) as a string);
			
			print("selfRelatedPartyCreditAmountMonData11--------------------------------->"selfRelatedPartyCreditAmountMonData11);
			print("selfRelatedPartyCreditAmountPerMonData11--------------------------------->"selfRelatedPartyCreditAmountPerMonData11);
			print("selfRelatedPartyCreditCountMonData11--------------------------------->"selfRelatedPartyCreditCountMonData11);
			print("selfRelatedPartyCreditCountPerMonData11--------------------------------->"selfRelatedPartyCreditCountPerMonData11);
			print("selfRelatedPartyDebitAmountMonData11--------------------------------->"selfRelatedPartyDebitAmountMonData11);
			print("selfRelatedPartyDebitAmountPerMonData11--------------------------------->"selfRelatedPartyDebitAmountPerMonData11);
			print("selfRelatedPartyDebitCountMonData11--------------------------------->"selfRelatedPartyDebitCountMonData11);
			print("selfRelatedPartyDebitCountPerMonData11--------------------------------->"selfRelatedPartyDebitCountPerMonData11);
			print("highValueXnsCreditAmount11--------------------------------->"highValueXnsCreditAmount);
			print("highValueXnsCreditAmountPer11--------------------------------->"highValueXnsCreditAmountPer);
			print("highValueXnsCreditCount11--------------------------------->"highValueXnsCreditCount);
			print("highValueXnsCreditCountPer11--------------------------------->"highValueXnsCreditCountPer);
			print("highValueXnsDebitAmount11--------------------------------->"highValueXnsDebitAmount);
			print("highValueXnsDebitAmountPer11--------------------------------->"highValueXnsDebitAmountPer);
			print("highValueXnsDebitCount11--------------------------------->"highValueXnsDebitCount);
			print("highValueXnsDebitCountPer11--------------------------------->"highValueXnsDebitCountPer);
			print("nonTradeXnsCreditAmountMonData11--------------------------------->"nonTradeXnsCreditAmountMonData11);
			print("nonTradeXnsCreditAmountPerMonData11--------------------------------->"nonTradeXnsCreditAmountPerMonData11);
			print("nonTradeXnsCreditCountMonData11--------------------------------->"nonTradeXnsCreditCountMonData11);
			print("nonTradeXnsCreditCountPerMonData11--------------------------------->"nonTradeXnsCreditCountPerMonData11);
			print("nonTradeXnsDebitAmountMonData11--------------------------------->"nonTradeXnsDebitAmountMonData11);
			print("nonTradeXnsDebitAmountPerMonData11--------------------------------->"nonTradeXnsDebitAmountPerMonData11);
			print("nonTradeXnsDebitCountMonData11--------------------------------->"nonTradeXnsDebitCountMonData11);
			print("nonTradeXnsDebitCountPerMonData11--------------------------------->"nonTradeXnsDebitCountPerMonData11);
			
			print("circularXnsAmount--------------------------------->"circularXnsAmount);
			print("circularXnsAmountPerMonData11--------------------------------->"circularXnsAmountPerMonData11);
			print("circularXnsCount--------------------------------->"circularXnsCount);
			print("circularXnsCountPerMonData11--------------------------------->"circularXnsCountPerMonData11);
		}	
		
		i=i+1;
	}
	// ----------------------- Account Analysis Loop End ---------------------------
}
	
	if(i <> 0)then{
	
	for each BlazeMonthlyDetail in blazeAccountAnalysis.blazeMonthlyDetailArray such that(it <> unknown and it is not null)
	do{
		
		ablazeMonthlyDetailArr is some BlazeMonthlyDetail initially it as a BlazeMonthlyDetail;
		if(ablazeMonthlyDetailArr.totalCredit is known)then{
			finalCreditAmount = finalCreditAmount + ablazeMonthlyDetailArr.totalCredit;
		}
		if(ablazeMonthlyDetailArr.credits is known)then{
			finalCreditCount = finalCreditCount + ablazeMonthlyDetailArr.credits;
		}
		if(ablazeMonthlyDetailArr.totalDebit is known)then{
			finalDebitAmount = finalDebitAmount + ablazeMonthlyDetailArr.totalDebit;
		}
		if(ablazeMonthlyDetailArr.debits is known)then{
			finalDebitCount = finalDebitCount + ablazeMonthlyDetailArr.debits;
		}
		if(ablazeMonthlyDetailArr.totalSamePartyAmountCreditDebit is known)then{
			finalCircularXnsAmount = finalCircularXnsAmount + ablazeMonthlyDetailArr.totalSamePartyAmountCreditDebit;
		}
		if(ablazeMonthlyDetailArr.samePartyAmountCreditDebits is known)then{
			finalCircularXnsCount = finalCircularXnsCount + ablazeMonthlyDetailArr.samePartyAmountCreditDebits;
		}
	} 
	
	for each BlazeMonthlyData in blazeAccountAnalysis.blazeMonthlyDataArray such that(it <> unknown)
	do {
		
		aMonthlyData is some BlazeMonthlyData initially it as a BlazeMonthlyData;
		
		// ------------------------------------ Self & Related Party Transactions ----------------------------
		if(aMonthlyData.totalOfSelfAndRelatedPartyCreditTxns is known)then{
			selfRelatedPartyCreditAmountFinal = selfRelatedPartyCreditAmountFinal + aMonthlyData.totalOfSelfAndRelatedPartyCreditTxns;
		}
		if(aMonthlyData.numberOfSelfAndRelatedPartyCreditTxns is known)then{
			selfRelatedPartyCreditCountFinal = selfRelatedPartyCreditCountFinal + aMonthlyData.numberOfSelfAndRelatedPartyCreditTxns;
		}
		if(aMonthlyData.totalOfSelfAndRelatedPartyDebitTxns is known)then{
			selfRelatedPartyDebitAmountFinal = selfRelatedPartyDebitAmountFinal + aMonthlyData.totalOfSelfAndRelatedPartyDebitTxns;
		}
		if(aMonthlyData.numberOfSelfAndRelatedPartyDebitTxns is known)then{
			selfRelatedPartyDebitCountFinal = selfRelatedPartyDebitCountFinal + aMonthlyData.numberOfSelfAndRelatedPartyDebitTxns;
		}
		// ---------------------------------- Non-Trade Transactions--------------------------------------
		if(aMonthlyData.totalBusinessCreditTxns is known)then{
			nonTradeXnsAmountTotalBusinessCreditXnsFinal = nonTradeXnsAmountTotalBusinessCreditXnsFinal + aMonthlyData.totalBusinessCreditTxns;
		}
		if(aMonthlyData.numberOfBusinessCreditTxns is known)then{
			nonTradeXnsCountNumberOfBusinessCreditXnsFinal = nonTradeXnsCountNumberOfBusinessCreditXnsFinal + aMonthlyData.numberOfBusinessCreditTxns;
		}
		if(aMonthlyData.totalBusinessDebitTxns is known)then{
			nonTradeXnsAmountTotalBusinessDebitXnsFinal = nonTradeXnsAmountTotalBusinessDebitXnsFinal + aMonthlyData.totalBusinessDebitTxns;
		}
		if(aMonthlyData.numberOfBusinessDebitTxns is known)then{
			nonTradeXnsCountNumberOfBusinessDebitXnsFinal = nonTradeXnsCountNumberOfBusinessDebitXnsFinal + aMonthlyData.numberOfBusinessDebitTxns;
		}
		
	}
	
	
	// Calculate selfRelatedPartyCreditAmountPerFinal
	if(selfRelatedPartyCreditAmountFinal is known and finalCreditAmount is known) then{
		selfRelatedPartyCreditAmountPerFinal = (selfRelatedPartyCreditAmountFinal/finalCreditAmount)*100;
	}
	
	// Calculate selfRelatedPartyCreditCountPerFinal
	if(selfRelatedPartyCreditCountFinal is known and finalCreditCount is known) then{
		selfRelatedPartyCreditCountPerFinal = (selfRelatedPartyCreditCountFinal/finalCreditCount)*100;
	}
	
	// Calculate selfRelatedPartyDebitAmountPerFinal
	if(selfRelatedPartyDebitAmountFinal is known and finalDebitAmount is known) then{
		selfRelatedPartyDebitAmountPerFinal = (selfRelatedPartyDebitAmountFinal/finalDebitAmount)*100;
	}
	
	// Calculate selfRelatedPartyDebitCountPerFinal
	if(selfRelatedPartyDebitCountFinal is known and finalDebitCount is known) then{
		selfRelatedPartyDebitCountPerFinal = (selfRelatedPartyDebitCountFinal/finalDebitCount)*100;
	}
	
	// Calculate highValueXnsCreditAmountPerFinal
	if(highValueXnsCreditAmountFinal is known and finalCreditAmount is known) then{
		highValueXnsCreditAmountPerFinal = (highValueXnsCreditAmountFinal/finalCreditAmount)*100;
	}
	
	// Calculate highValueXnsCreditCountPerFinal
	if(highValueXnsCreditCountFinal is known and finalCreditCount is known) then{
		highValueXnsCreditCountPerFinal = (highValueXnsCreditCountFinal/finalCreditCount)*100;
	}
	
	// Calculate highValueXnsDebitAmountPerFinal
	if(highValueXnsDebitAmountFinal is known and finalDebitAmount is known) then{
		highValueXnsDebitAmountPerFinal = (highValueXnsDebitAmountFinal/finalDebitAmount)*100;
	}
	
	// Calculate highValueXnsDebitCountPer
	if(highValueXnsDebitCountFinal is known and finalDebitCount is known) then{
		highValueXnsDebitCountPerFinal = (highValueXnsDebitCountFinal/finalDebitCount)*100;
	}
	
	
	// Calculate nonTradeXnsCreditAmountFinal
	if(nonTradeXnsAmountTotalBusinessCreditXnsFinal is known and finalCreditAmount is known) then{
		nonTradeXnsCreditAmountFinal = nonTradeXnsAmountTotalBusinessCreditXnsFinal - finalCreditAmount;
	}

	// Calculate nonTradeXnsCreditAmountPerFinal
	if(nonTradeXnsCreditAmountFinal is known and finalCreditAmount is known) then{
		nonTradeXnsCreditAmountPerFinal = (nonTradeXnsCreditAmountFinal/finalCreditAmount)*100;
	}
	
	// Calculate nonTradeXnsCreditCountFinal
	if(nonTradeXnsCountNumberOfBusinessCreditXnsFinal is known and finalCreditCount is known) then{
		nonTradeXnsCreditCountFinal = nonTradeXnsCountNumberOfBusinessCreditXnsFinal - finalCreditCount;
	}
	
	// Calculate nonTradeXnsCreditCountPerFinal
	if(nonTradeXnsCreditCountFinal is known and finalCreditCount is known) then{
		nonTradeXnsCreditCountPerFinal = (nonTradeXnsCreditCountFinal/finalCreditCount)*100;
	}
	
	// Calculate nonTradeXnsDebitAmountFinal
	if(nonTradeXnsAmountTotalBusinessDebitXnsFinal is known and finalDebitAmount is known) then{
		nonTradeXnsDebitAmountFinal = nonTradeXnsAmountTotalBusinessDebitXnsFinal - finalDebitAmount;
	}
	
	// Calculate nonTradeXnsDebitAmountPerFinal
	if(nonTradeXnsDebitAmountFinal is known and finalDebitAmount is known) then{
		nonTradeXnsDebitAmountPerFinal = (nonTradeXnsDebitAmountFinal/finalDebitAmount)*100;
	}
	
	// Calculate nonTradeXnsDebitCountFinal
	if(nonTradeXnsCountNumberOfBusinessDebitXnsFinal is known and finalDebitCount is known) then{
		nonTradeXnsDebitCountFinal = (nonTradeXnsCountNumberOfBusinessDebitXnsFinal - finalDebitCount);
	}
	
	// Calculate nonTradeXnsDebitCountPerFinal
	if(nonTradeXnsDebitCountFinal is known and finalDebitCount is known) then{
		nonTradeXnsDebitCountPerFinal = (nonTradeXnsDebitCountFinal/finalDebitCount)*100;
	}
	
	// Calculate finalCircularXnsAmountPer
	if(finalCircularXnsAmount is known) then{
		finalCircularXnsAmountPer = (finalCircularXnsAmount / (finalCreditAmount + finalDebitAmount))*100;
	}
	
	// Calculate finalCircularXnsCountPer
	if(finalCircularXnsCount is known) then{
		finalCircularXnsCountPer = (finalCircularXnsCount / (finalDebitCount + finalCreditCount))*100;
	}
	
	fn_AppendCalculatedVariable(message,"selfRelatedPartyCreditAmountFinal", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(selfRelatedPartyCreditAmountFinal,-2) as a string);
	fn_AppendCalculatedVariable(message,"selfRelatedPartyCreditAmountPerFinal", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(selfRelatedPartyCreditAmountPerFinal,-2) as a string);
	fn_AppendCalculatedVariable(message,"selfRelatedPartyCreditCountFinal", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(selfRelatedPartyCreditCountFinal,-2) as a string);
	fn_AppendCalculatedVariable(message,"selfRelatedPartyCreditCountPerFinal", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(selfRelatedPartyCreditCountPerFinal,-2) as a string);
	fn_AppendCalculatedVariable(message,"selfRelatedPartyDebitAmountFinal", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(selfRelatedPartyDebitAmountFinal,-2) as a string);
	fn_AppendCalculatedVariable(message,"selfRelatedPartyDebitAmountPerFinal", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(selfRelatedPartyDebitAmountPerFinal,-2) as a string);
	fn_AppendCalculatedVariable(message,"selfRelatedPartyDebitCountFinal", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(selfRelatedPartyDebitCountFinal,-2) as a string);
	fn_AppendCalculatedVariable(message,"selfRelatedPartyDebitCountPerFinal", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(selfRelatedPartyDebitCountPerFinal,-2) as a string);
	
	fn_AppendCalculatedVariable(message,"highValueXnsCreditAmountFinal", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(highValueXnsCreditAmountFinal,-2) as a string);
	fn_AppendCalculatedVariable(message,"highValueXnsCreditAmountPerFinal", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(highValueXnsCreditAmountPerFinal,-2) as a string);
	fn_AppendCalculatedVariable(message,"highValueXnsCreditCountFinal", "real", productCode, applicantId, applicantType, "TransactionAnalytics",highValueXnsCreditCountFinal as a string);
	fn_AppendCalculatedVariable(message,"highValueXnsCreditCountPerFinal", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(highValueXnsCreditCountPerFinal,-2) as a string);
	fn_AppendCalculatedVariable(message,"highValueXnsDebitAmountFinal", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(highValueXnsDebitAmountFinal,-2) as a string);
	fn_AppendCalculatedVariable(message,"highValueXnsDebitAmountPerFinal", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(highValueXnsDebitAmountPerFinal,-2) as a string);
	fn_AppendCalculatedVariable(message,"highValueXnsDebitCountFinal", "real", productCode, applicantId, applicantType, "TransactionAnalytics", highValueXnsDebitCountFinal as a string);
	fn_AppendCalculatedVariable(message,"highValueXnsDebitCountPerFinal", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(highValueXnsDebitCountPerFinal,-2) as a string);
	
	fn_AppendCalculatedVariable(message,"nonTradeXnsCreditAmountFinal", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(nonTradeXnsCreditAmountFinal,-2) as a string);
	fn_AppendCalculatedVariable(message,"nonTradeXnsCreditAmountPerFinal", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(nonTradeXnsCreditAmountPerFinal,-2) as a string);
	fn_AppendCalculatedVariable(message,"nonTradeXnsCreditCountFinal", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(nonTradeXnsCreditCountFinal,-2) as a string);
	fn_AppendCalculatedVariable(message,"nonTradeXnsCreditCountPerFinal", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(nonTradeXnsCreditCountPerFinal,-2) as a string);
	fn_AppendCalculatedVariable(message,"nonTradeXnsDebitAmountFinal", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(nonTradeXnsDebitAmountFinal,-2) as a string);
	fn_AppendCalculatedVariable(message,"nonTradeXnsDebitAmountPerFinal", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(nonTradeXnsDebitAmountPerFinal,-2) as a string);
	fn_AppendCalculatedVariable(message,"nonTradeXnsDebitCountFinal", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(nonTradeXnsDebitCountFinal,-2) as a string);
	fn_AppendCalculatedVariable(message,"nonTradeXnsDebitCountPerFinal", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(nonTradeXnsDebitCountPerFinal,-2) as a string);
	
	fn_AppendCalculatedVariable(message,"finalCircularXnsAmount", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(finalCircularXnsAmount,-2) as a string);
	fn_AppendCalculatedVariable(message,"finalCircularXnsAmountPer", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(finalCircularXnsAmountPer,-2) as a string);
	fn_AppendCalculatedVariable(message,"finalCircularXnsCount", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(finalCircularXnsCount,-2) as a string);
	fn_AppendCalculatedVariable(message,"finalCircularXnsCountPer", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(finalCircularXnsCountPer,-2) as a string);
	
  print("selfRelatedPartyCreditAmountFinal--------------------------------->"selfRelatedPartyCreditAmountFinal);
  print("selfRelatedPartyCreditAmountPerFinal--------------------------------->"selfRelatedPartyCreditAmountPerFinal);
  print("selfRelatedPartyCreditCountFinal--------------------------------->"selfRelatedPartyCreditCountFinal);
  print("selfRelatedPartyCreditCountPerFinal--------------------------------->"selfRelatedPartyCreditCountPerFinal);
  print("selfRelatedPartyDebitAmountFinal--------------------------------->"selfRelatedPartyDebitAmountFinal);
  print("selfRelatedPartyDebitAmountPerFinal--------------------------------->"selfRelatedPartyDebitAmountPerFinal);
  print("selfRelatedPartyDebitCountFinal--------------------------------->"selfRelatedPartyDebitCountFinal);
  print("selfRelatedPartyDebitCountPerFinal--------------------------------->"selfRelatedPartyDebitCountPerFinal);
  
  print("nonTradeXnsCreditAmountFinal--------------------------------->"nonTradeXnsCreditAmountFinal);
  print("nonTradeXnsCreditAmountPerFinal--------------------------------->"nonTradeXnsCreditAmountPerFinal);
  print("nonTradeXnsCreditCountFinal--------------------------------->"nonTradeXnsCreditCountFinal);
  print("nonTradeXnsCreditCountPerFinal--------------------------------->"nonTradeXnsCreditCountPerFinal);
  print("nonTradeXnsDebitAmountFinal--------------------------------->"nonTradeXnsDebitAmountFinal);
  print("nonTradeXnsDebitAmountPerFinal--------------------------------->"nonTradeXnsDebitAmountPerFinal);
  print("nonTradeXnsDebitCountFinal--------------------------------->"nonTradeXnsDebitCountFinal);
  print("nonTradeXnsDebitCountPerFinal--------------------------------->"nonTradeXnsDebitCountPerFinal);
  
  print("finalCircularXnsAmount--------------------------------->"finalCircularXnsAmount);
  print("finalCircularXnsAmountPer--------------------------------->"finalCircularXnsAmountPer);
  print("finalCircularXnsCount--------------------------------->"finalCircularXnsCount);
  print("finalCircularXnsCountPer--------------------------------->"finalCircularXnsCountPer);
  
	}
	
}catch an Exception with{
	aBlazeApplication.fn_Perfios_TransactionAnalytics = true;  
	print("\n***Exception :: \n>>@@@<<\n" evaluationException().toString()"\n>>@@@<<\n");  
}

print("++++> Exiting function :: fn_Perfios_TransactionAnalytics");
print("");
]]></value>
 </instance>
 <instance ref='CommentsVH'>
  <value></value>
 </instance>
 <instance ref='FunctionParametersVH'>
  <instance-list ref='ParametersVH'>
   <item template='DRNZKQyw5rcjBd4Yxo6FN649lWN.template1' id='6M7Vqz'>
    <instance ref='ParameterNameVH'>
     <value>message</value>
    </instance>
    <instance ref='ParameterTypeVH'>
     <value>Message</value>
    </instance>
   </item>
   <item template='DRNZKQyw5rcjBd4Yxo6FN649lWN.template1' id='IDpuLd'>
    <instance ref='ParameterNameVH'>
     <value>perfiosData</value>
    </instance>
    <instance ref='ParameterTypeVH'>
     <value>PerfiosData</value>
    </instance>
   </item>
   <item template='DRNZKQyw5rcjBd4Yxo6FN649lWN.template1' id='Kbwshk'>
    <instance ref='ParameterNameVH'>
     <value>aBlazeApplicant</value>
    </instance>
    <instance ref='ParameterTypeVH'>
     <value>BlazeApplicant</value>
    </instance>
   </item>
  </instance-list>
 </instance>
</instantiation>