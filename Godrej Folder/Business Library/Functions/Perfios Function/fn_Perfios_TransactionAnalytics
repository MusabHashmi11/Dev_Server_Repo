<?xml version='1.0' encoding='UTF-8'?>
<instantiation xmlns='http://www.blazesoft.com/instantiation' template='Q8jH6kHdOYIZ1uG0WKXqvvejqv0' name='fn_Perfios_TransactionAnalytics'>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='1VBfZr8g32Q2FnSWcWO9txQWwEE' name='Instance' id='Instance'>
 </instantiation>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='18uqQPJXnTmKrAiLEOVcQMUAFmD' name='Entry' id='Entry'>
  <instance ref='Source Reference'>
   <instance ref='value'>
    <instance ref='locationVH'>
     <value></value>
    </instance>
    <instance ref='repositoryNameVH'>
     <value></value>
    </instance>
    <instance ref='versionVH'>
     <value></value>
    </instance>
    <instance ref='filterVH'>
     <value></value>
    </instance>
    <instance ref='releaseDateVH'>
     <value></value>
    </instance>
    <instance ref='repositoryAccessVH'>
     <value></value>
    </instance>
   </instance>
  </instance>
  <instance ref='Predictive Model Type'>
   <instance ref='value'>
    <value>NotApplicable</value>
   </instance>
  </instance>
 </instantiation>
 <instance ref='__ENTITY_PROPERTIES__VH__'>
  <instance ref='Test Role'>
   <instance ref='value'>
    <value>None</value>
   </instance>
  </instance>
  <instance ref='Test Case'>
   <instance ref='value'>
    <value></value>
   </instance>
  </instance>
 </instance>
 <instance ref='InstanceName'>
  <value></value>
 </instance>
 <instance ref='UniqueInstanceNameVH'>
  <value>fn_Perfios_TransactionAnalytics1</value>
 </instance>
 <instance ref='FunctionNameVH'>
  <value>fn_Perfios_TransactionAnalytics</value>
 </instance>
 <instance ref='FunctionReturnType'>
  <value>void</value>
 </instance>
 <instance ref='FunctionBodyVH'>
  <value><![CDATA[print("");
print("++++> Entering function :: fn_Perfios_TransactionAnalytics");
aBlazeApplication is some BlazeApplication initially BTCommonVar.termInput.blazeApplication as a BlazeApplication;

try{
productCode is a string initially "";
productCode = message.invocation.decisionService;
applicantId is a string;
applicantType is a string;
//aBlazeApplicant is some BlazeApplicant initially a BlazeApplicant;
applicantId = aBlazeApplicant.customerCif as a string;
applicantType = aBlazeApplicant.applicantType;

 // Self & Related Party Transactions    
 selfRelatedPartyCreditAmountFinal is a real initially 0;
 selfRelatedPartyCreditAmountPerFinal is a real initially 0;
 selfRelatedPartyCreditCountFinal is an real initially 0;
 selfRelatedPartyCreditCountPerFinal is a real initially 0;
 
 selfRelatedPartyDebitAmountFinal is a real initially 0;
 selfRelatedPartyDebitAmountPerFinal is a real initially 0;
 selfRelatedPartyDebitCountFinal is a real initially 0;
 selfRelatedPartyDebitCountPerFinal is a real initially 0;

// Value Transactions
 highValueXnsCreditAmountFinal is a real initially 0;
 highValueXnsCreditAmountPerFinal is a real initially 0;
 highValueXnsCreditCountFinal is an integer initially 0;
 highValueXnsCreditCountPerFinal is a real initially 0;

 highValueXnsDebitAmountFinal is a real initially 0;
 highValueXnsDebitAmountPerFinal is a real initially 0;
 highValueXnsDebitCountFinal is an integer initially 0;
 highValueXnsDebitCountPerFinal is a real initially 0;
 
// Non-Trade Transactions for Credit
 nonTradeXnsAmountTotalBusinessCreditXnsFinal is a real initially 0;
 nonTradeXnsCreditAmountFinal is a real initially 0;
 nonTradeXnsCreditAmountPerFinal is a real initially 0;
 nonTradeXnsCountNumberOfBusinessCreditXnsFinal is a real initially 0;
 nonTradeXnsCreditCountFinal is a real initially 0;
 nonTradeXnsCreditCountPerFinal is a real initially 0;

// Non-Trade Transactions for Debit
 nonTradeXnsAmountTotalBusinessDebitXnsFinal is a real initially 0;
 nonTradeXnsDebitAmountFinal is a real initially 0;
 nonTradeXnsDebitAmountPerFinal is a real initially 0;
 nonTradeXnsCountNumberOfBusinessDebitXnsFinal is a real initially 0;
 nonTradeXnsDebitCountFinal is a real initially 0;
 nonTradeXnsDebitCountPerFinal is a real initially 0;

finalCreditAmount is a real initially 0;
finalCreditCount is a real initially 0;
finalDebitAmount is a real initially 0;
finalDebitCount is a real initially 0;
finalCircularXnsAmount is a real initially 0;
finalCircularXnsCount is a real initially 0;
finalCircularXnsAmountPer is a real initially 0;
finalCircularXnsCountPer is a real initially 0;
 
// Create Object of BlazeAccountAnalysis for Combined Calculations
blazeAccountAnalysis is some BlazeAccountAnalysis initially a BlazeAccountAnalysis;
blazeAccountAnalysis.blazeMonthlyDetailArray = an array of BlazeMonthlyDetail;
blazeAccountAnalysis.blazeMonthlyDataArray = an array of BlazeMonthlyData;

accAnalysisArrCount is an integer initially 0;

if(perfiosData.data.accountAnalysis is known and perfiosData.data.accountAnalysis is not null)then{
	accAnalysisArrCount = perfiosData.data.accountAnalysis.count;
}

if(perfiosData.data.accountAnalysis is known and perfiosData.data.additionalMonthlyDetails is known) then{
	i is an integer initially 0;
	// ----------------------- Account Analysis Loop Start ------------------------  
	print("----------------------- Account Analysis Loop Start ------------------------");
	while(i < accAnalysisArrCount) do {
		monthlyDetalisCount is an integer initially 0;
		monthlyDetailsArrayCount is an integer initially 0;
		
		totalCreditAmount is a real initially 0;
		totalCreditCount is a real initially 0;
		totalDebitAmount is a real initially 0;
		totalDebitCount is a real initially 0;
		circularXnsAmount is a real initially 0;
		circularXnsCount is a real initially 0;
		
		highValueXnsCreditAmount is a real initially 0;
		highValueXnsCreditAmountPer is a real initially 0;
		highValueXnsCreditCount is an integer initially 0;
		highValueXnsCreditCountPer is a real initially 0;

		highValueXnsDebitAmount is a real initially 0;
		highValueXnsDebitAmountPer is a real initially 0;
		highValueXnsDebitCount is an integer initially 0;
		highValueXnsDebitCountPer is a real initially 0;
		
		if(perfiosData.data.accountAnalysis[i].monthlyDetails is known) then{
			monthlyDetailsArrayCount = perfiosData.data.accountAnalysis[i].monthlyDetails.count - 12;
		}
		
		j is an integer initially 0;
		for each MonthlyDetail in perfiosData.data.accountAnalysis[i].monthlyDetails such that(it <> unknown) do {
			aMonthlyDetails is some MonthlyDetail initially it as a MonthlyDetail;
		
			// ------------- Latest 12 Months Data -------------
			if(monthlyDetalisCount >= monthlyDetailsArrayCount) then{
				if(aMonthlyDetails.totalCredit is known) then{
					totalCreditAmount = totalCreditAmount + aMonthlyDetails.totalCredit;
				}
				if(aMonthlyDetails.credits is known) then{
					totalCreditCount = totalCreditCount + aMonthlyDetails.credits;
				}
				if(aMonthlyDetails.totalDebit is known) then{
					totalDebitAmount = totalDebitAmount + aMonthlyDetails.totalDebit;
				}
				if(aMonthlyDetails.debits is known) then{
					totalDebitCount = totalDebitCount + aMonthlyDetails.debits;
				}
				// Calculate circularXnsAmount
				if(aMonthlyDetails.totalSamePartyAmountCreditDebit is known) then{
					circularXnsAmount = circularXnsAmount + aMonthlyDetails.totalSamePartyAmountCreditDebit;
				}
				// Calculate circularXnsCount
				if(aMonthlyDetails.samePartyAmountCreditDebits is known) then{
					circularXnsCount = circularXnsCount + aMonthlyDetails.samePartyAmountCreditDebits;
				}
				
				if(i=0) then{
					aBlazeMonthlyDetail is some BlazeMonthlyDetail initially a BlazeMonthlyDetail;
					aBlazeMonthlyDetail.monthName = aMonthlyDetails.monthName;
					aBlazeMonthlyDetail.totalCredit = 0;
					aBlazeMonthlyDetail.credits  = 0;
					aBlazeMonthlyDetail.totalDebit = 0;
					aBlazeMonthlyDetail.debits = 0;
					aBlazeMonthlyDetail.totalSamePartyAmountCreditDebit = 0;
					aBlazeMonthlyDetail.samePartyAmountCreditDebits = 0;
					
					if(aMonthlyDetails.totalCredit is known)then{
						aBlazeMonthlyDetail.totalCredit = aMonthlyDetails.totalCredit;
					}
					if(aMonthlyDetails.credits is known)then{
						aBlazeMonthlyDetail.credits = aMonthlyDetails.credits;
					}
					if(aMonthlyDetails.totalDebit is known)then{
						aBlazeMonthlyDetail.totalDebit = aMonthlyDetails.totalDebit;
					}
					if(aMonthlyDetails.debits is known)then{
						aBlazeMonthlyDetail.debits = aMonthlyDetails.debits;
					}
					if(aMonthlyDetails.totalSamePartyAmountCreditDebit is known)then{
						aBlazeMonthlyDetail.totalSamePartyAmountCreditDebit = aMonthlyDetails.totalSamePartyAmountCreditDebit;
					}
					if(aMonthlyDetails.samePartyAmountCreditDebits is known)then{
						aBlazeMonthlyDetail.samePartyAmountCreditDebits = aMonthlyDetails.samePartyAmountCreditDebits;
					}
					blazeAccountAnalysis.blazeMonthlyDetailArray.append(aBlazeMonthlyDetail);
				}
				else{
					if(aMonthlyDetails.totalCredit is known)then{
						blazeAccountAnalysis.blazeMonthlyDetailArray[j].totalCredit = blazeAccountAnalysis.blazeMonthlyDetailArray[j].totalCredit + aMonthlyDetails.totalCredit;
					}
					if(aMonthlyDetails.credits is known)then{
						blazeAccountAnalysis.blazeMonthlyDetailArray[j].credits = blazeAccountAnalysis.blazeMonthlyDetailArray[j].credits + aMonthlyDetails.credits;
					}
					if(aMonthlyDetails.totalDebit is known)then{
						blazeAccountAnalysis.blazeMonthlyDetailArray[j].totalDebit = blazeAccountAnalysis.blazeMonthlyDetailArray[j].totalDebit + aMonthlyDetails.totalDebit;
					}
					if(aMonthlyDetails.debits is known)then{
						blazeAccountAnalysis.blazeMonthlyDetailArray[j].debits = blazeAccountAnalysis.blazeMonthlyDetailArray[j].debits + aMonthlyDetails.debits;
					}
					if(aMonthlyDetails.totalSamePartyAmountCreditDebit is known)then{
						blazeAccountAnalysis.blazeMonthlyDetailArray[j].totalSamePartyAmountCreditDebit = blazeAccountAnalysis.blazeMonthlyDetailArray[j].totalSamePartyAmountCreditDebit + aMonthlyDetails.totalSamePartyAmountCreditDebit;
					}
					if(aMonthlyDetails.samePartyAmountCreditDebits is known)then{
						blazeAccountAnalysis.blazeMonthlyDetailArray[j].samePartyAmountCreditDebits = blazeAccountAnalysis.blazeMonthlyDetailArray[j].samePartyAmountCreditDebits + aMonthlyDetails.samePartyAmountCreditDebits;
					}
				}
			}
			monthlyDetalisCount = monthlyDetalisCount + 1;
			j = j +1;
		}
		
		// Entering CombinedHighValueCreditXn Loop
		for each CombinedHighValueCreditXn in perfiosData.data.combinedHighValueCreditXns such that(it <> unknown) do {
			print("*********Entering CombinedHighValueCreditXn Loop**********");
			combinedHighValueCreditX is some CombinedHighValueCreditXn initially it as a CombinedHighValueCreditXn;
				// Calculate highValueXnsCreditAmount
				if((combinedHighValueCreditX.amount is known and combinedHighValueCreditX.accNo is known) and perfiosData.data.accountAnalysis[i].accountNo is known) then{
					if(combinedHighValueCreditX.accNo = perfiosData.data.accountAnalysis[i].accountNo)then{
						highValueXnsCreditAmount = highValueXnsCreditAmount + combinedHighValueCreditX.amount;
						// Calculate highValueXnsCreditCount
						highValueXnsCreditCount = highValueXnsCreditCount + 1;
					}
				}
			// Exiting CombinedHighValueCreditXn Loop
		}
		
		// Calculate highValueXnsCreditAmountPer
		if(highValueXnsCreditAmount is known and totalCreditAmount is known and totalCreditAmount>0) then{
			highValueXnsCreditAmountPer = (highValueXnsCreditAmount/totalCreditAmount)*100;
		}
		// Calculate applicant.highValueXnsCreditCountPer
		if(highValueXnsCreditCount is known and totalCreditCount is known and totalCreditCount>0) then{
			highValueXnsCreditCountPer = (highValueXnsCreditCount/totalCreditCount)*100;
		}
		
		// Calculate highValueXnsCreditAmountFinal
		highValueXnsCreditAmountFinal = highValueXnsCreditAmountFinal + highValueXnsCreditAmount;
		// Calculate highValueXnsCreditCountFinal
		highValueXnsCreditCountFinal = highValueXnsCreditCountFinal + highValueXnsCreditCount;
	
		// Entering CombinedHighValueDebitXns Loop
		for each CombinedHighValueDebitXns in perfiosData.data.combinedHighValueDebitXns such that(it <> unknown) do {
			print("*********Entering CombinedHighValueDebitXns Loop*********");
			combinedHighValueDebitX is some CombinedHighValueDebitXns initially it as a CombinedHighValueDebitXns;
		
			// Calculate highValueXnsDebitAmount
			if((combinedHighValueDebitX.amount is known and combinedHighValueDebitX.accNo is known) and perfiosData.data.accountAnalysis[i].accountNo is known) then{
				if(combinedHighValueDebitX.accNo = perfiosData.data.accountAnalysis[i].accountNo)then{
					highValueXnsDebitAmount = highValueXnsDebitAmount + combinedHighValueDebitX.amount;
					// Calculate highValueXnsDebitCount
					highValueXnsDebitCount = highValueXnsDebitCount + 1;
				}
			}
			// Exiting CombinedHighValueDebitXns Loop
		}
		
		// Calculate highValueXnsDebitAmountPer
		if(highValueXnsDebitAmount is known and totalDebitAmount is known and totalDebitAmount>0) then{
			highValueXnsDebitAmountPer = (highValueXnsDebitAmount/totalDebitAmount)*100;
		}
		// Calculate highValueXnsDebitCountPer
		if(highValueXnsDebitCount is known and totalDebitCount is known and totalDebitCount>0) then{
			highValueXnsDebitCountPer = (highValueXnsDebitCount/totalDebitCount)*100;
		}
		
		// Calculate highValueXnsDebitAmountFinal
		highValueXnsDebitAmountFinal = highValueXnsDebitAmountFinal + highValueXnsDebitAmount;
		// Calculate highValueXnsDebitCountFinal
		highValueXnsDebitCountFinal = highValueXnsDebitCountFinal + highValueXnsDebitCount;
		
		j=0;	
		monthDataCount is an integer initially 0;
		monthlyDataArrayCount is an integer initially 0;
			
		// ---------------Start MonthlyData Variable -----------------
		selfRelatedPartyCreditAmountMonData is a real initially 0;
		selfRelatedPartyCreditAmountPerMonData is a real initially 0;
		selfRelatedPartyCreditCountMonData is a real initially 0;
		selfRelatedPartyCreditCountPerMonData is a real initially 0;
		selfRelatedPartyDebitAmountMonData is a real initially 0;
		selfRelatedPartyDebitAmountPerMonData is a real initially 0;
		selfRelatedPartyDebitCountMonData is a real initially 0;
		selfRelatedPartyDebitCountPerMonData is a real initially 0;
			
		nonTradeXnsAmountTotalBusinessCreditXnsMonData is a real initially 0;
		nonTradeXnsCountNumberOfBusinessCreditXnsMonData is a real initially 0;
		nonTradeXnsAmountTotalBusinessDebitXnsMonData is a real initially 0;
		nonTradeXnsCountNumberOfBusinessDebitXnsMonData is a real initially 0;
			
		nonTradeXnsCreditAmountMonData is a real initially 0;
		nonTradeXnsCreditAmountPerMonData is a real initially 0;
		nonTradeXnsCreditCountMonData is a real initially 0;
		nonTradeXnsCreditCountPerMonData is a real initially 0;
		nonTradeXnsDebitAmountMonData is a real initially 0;
		nonTradeXnsDebitAmountPerMonData is a real initially 0;
		nonTradeXnsDebitCountMonData is a real initially 0;
		nonTradeXnsDebitCountPerMonData is a real initially 0;

		circularXnsAmountPerMonData is a real initially 0;
		circularXnsCountPerMonData is a real initially 0;
		// ---------------End MonthlyData Variable -------------------
			
		if(i = 0 and perfiosData.data.additionalMonthlyDetails is known and perfiosData.data.additionalMonthlyDetails.monthlyData1 is known)then{
			monthlyDataArrayCount = perfiosData.data.additionalMonthlyDetails.monthlyData1.count - 12;
			
			// --------------------- Start MonthlyData1 Loop ------------------------
			for each MonthlyData in perfiosData.data.additionalMonthlyDetails.monthlyData1 such that(it <> unknown) do {
				aBlazeMonthlyData is some BlazeMonthlyData initially a BlazeMonthlyData;
				
				// Calculation for Combined variables
				aBlazeMonthlyData.totalOfSelfAndRelatedPartyCreditTxns = 0;
				aBlazeMonthlyData.numberOfSelfAndRelatedPartyCreditTxns = 0;
				aBlazeMonthlyData.totalOfSelfAndRelatedPartyDebitTxns = 0;
				aBlazeMonthlyData.numberOfSelfAndRelatedPartyDebitTxns = 0;
				aBlazeMonthlyData.totalBusinessCreditTxns = 0;
				aBlazeMonthlyData.numberOfBusinessCreditTxns = 0;
				aBlazeMonthlyData.totalBusinessDebitTxns = 0;
				aBlazeMonthlyData.numberOfBusinessDebitTxns = 0;
				
				//------------------ latest 12 month ------------------
				if( monthDataCount >= monthlyDataArrayCount) then {
					if(it.totalOfSelfAndRelatedPartyCreditTxns is known) then{
						// Calculate selfRelatedPartyCreditAmount for individual account
						selfRelatedPartyCreditAmountMonData = selfRelatedPartyCreditAmountMonData + it.totalOfSelfAndRelatedPartyCreditTxns;
						// Calculate selfRelatedPartyCreditAmount  for final account
						aBlazeMonthlyData.totalOfSelfAndRelatedPartyCreditTxns = it.totalOfSelfAndRelatedPartyCreditTxns;
					}
					if(it.numberOfSelfAndRelatedPartyCreditTxns is known) then{
						// Calculate selfRelatedPartyCreditCount for individual account
						selfRelatedPartyCreditCountMonData = selfRelatedPartyCreditCountMonData + it.numberOfSelfAndRelatedPartyCreditTxns;
						// Calculate selfRelatedPartyCreditCount for final account
						aBlazeMonthlyData.numberOfSelfAndRelatedPartyCreditTxns = it.numberOfSelfAndRelatedPartyCreditTxns;
					}
					if(it.totalOfSelfAndRelatedPartyDebitTxns is known) then{
						// Calculate selfRelatedPartyDebitAmount for individual account
						selfRelatedPartyDebitAmountMonData = selfRelatedPartyDebitAmountMonData + it.totalOfSelfAndRelatedPartyDebitTxns;
						// Calculate selfRelatedPartyDebitAmount for final account
						aBlazeMonthlyData.totalOfSelfAndRelatedPartyDebitTxns = it.totalOfSelfAndRelatedPartyDebitTxns;
					}
					if(it.numberOfSelfAndRelatedPartyDebitTxns is known) then{
						// Calculate selfRelatedPartyDebitCount for individual account
						selfRelatedPartyDebitCountMonData = selfRelatedPartyDebitCountMonData + it.numberOfSelfAndRelatedPartyDebitTxns;
						// Calculate selfRelatedPartyDebitCount for final account
						aBlazeMonthlyData.numberOfSelfAndRelatedPartyDebitTxns = it.numberOfSelfAndRelatedPartyDebitTxns;
					}
					if(it.totalBusinessCreditTxns is known) then{
						// Calculate totalBusinessCreditTxns for individual account
						nonTradeXnsAmountTotalBusinessCreditXnsMonData = nonTradeXnsAmountTotalBusinessCreditXnsMonData + it.totalBusinessCreditTxns;
						// Calculate totalBusinessCreditTxns for final account
						aBlazeMonthlyData.totalBusinessCreditTxns = it.totalBusinessCreditTxns;
					}
					if(it.numberOfBusinessCreditTxns is known) then{
						// Calculate numberOfBusinessCreditTxns  for individual account
						nonTradeXnsCountNumberOfBusinessCreditXnsMonData = nonTradeXnsCountNumberOfBusinessCreditXnsMonData + it.numberOfBusinessCreditTxns;
						// Calculate numberOfBusinessCreditTxns  for final account
						aBlazeMonthlyData.numberOfBusinessCreditTxns = it.numberOfBusinessCreditTxns;
					}
					if(it.totalBusinessDebitTxns is known) then{
						// Calculate totalBusinessDebitTxns for individual account
						nonTradeXnsAmountTotalBusinessDebitXnsMonData = nonTradeXnsAmountTotalBusinessDebitXnsMonData + it.totalBusinessDebitTxns;
						// Calculate totalBusinessDebitTxns for final account
						aBlazeMonthlyData.totalBusinessDebitTxns = it.totalBusinessDebitTxns;
					}
					if(it.numberOfBusinessDebitTxns is known) then{
						// Calculate numberOfBusinessDebitTxns  for individual account
						nonTradeXnsCountNumberOfBusinessDebitXnsMonData = nonTradeXnsCountNumberOfBusinessDebitXnsMonData + it.numberOfBusinessDebitTxns;
						// Calculate numberOfBusinessDebitTxns  for final account
						aBlazeMonthlyData.numberOfBusinessDebitTxns = it.numberOfBusinessDebitTxns;
					}
				}
				blazeAccountAnalysis.blazeMonthlyDataArray.append(aBlazeMonthlyData);
				monthDataCount = monthDataCount + 1;
				j = j + 1;
			}
			// ------------------------- End MonthlyData1 Loop -----------------------
		}
		
		else if(i = 1 and perfiosData.data.additionalMonthlyDetails is known and perfiosData.data.additionalMonthlyDetails.monthlyData2 is known)then{
			monthlyDataArrayCount = perfiosData.data.additionalMonthlyDetails.monthlyData2.count - 12;
			
			// --------------------- Start MonthlyData2 Loop ------------------------
			for each MonthlyData in perfiosData.data.additionalMonthlyDetails.monthlyData2 such that(it <> unknown) do {
				//------------------ latest 12 month ------------------
				if( monthDataCount >= monthlyDataArrayCount) then {
					if(it.totalOfSelfAndRelatedPartyCreditTxns is known) then{
						// Calculate selfRelatedPartyCreditAmount for individual account
						selfRelatedPartyCreditAmountMonData = selfRelatedPartyCreditAmountMonData + it.totalOfSelfAndRelatedPartyCreditTxns;
						// Calculate selfRelatedPartyCreditAmount  for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyCreditTxns + it.totalOfSelfAndRelatedPartyCreditTxns;
					}
					if(it.numberOfSelfAndRelatedPartyCreditTxns is known) then{
						// Calculate selfRelatedPartyCreditCount for individual account
						selfRelatedPartyCreditCountMonData = selfRelatedPartyCreditCountMonData + it.numberOfSelfAndRelatedPartyCreditTxns;
						// Calculate selfRelatedPartyCreditCount for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyCreditTxns + it.numberOfSelfAndRelatedPartyCreditTxns;
					}
					if(it.totalOfSelfAndRelatedPartyDebitTxns is known) then{
						// Calculate selfRelatedPartyDebitAmount for individual account
						selfRelatedPartyDebitAmountMonData = selfRelatedPartyDebitAmountMonData + it.totalOfSelfAndRelatedPartyDebitTxns;
						// Calculate selfRelatedPartyDebitAmount for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyDebitTxns + it.totalOfSelfAndRelatedPartyDebitTxns;
					}
					if(it.numberOfSelfAndRelatedPartyDebitTxns is known) then{
						// Calculate selfRelatedPartyDebitCount for individual account
						selfRelatedPartyDebitCountMonData = selfRelatedPartyDebitCountMonData + it.numberOfSelfAndRelatedPartyDebitTxns;
						// Calculate selfRelatedPartyDebitCount for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyDebitTxns + it.numberOfSelfAndRelatedPartyDebitTxns;
					}
					if(it.totalBusinessCreditTxns is known) then{
						// Calculate totalBusinessCreditTxns for individual account
						nonTradeXnsAmountTotalBusinessCreditXnsMonData = nonTradeXnsAmountTotalBusinessCreditXnsMonData + it.totalBusinessCreditTxns;
						// Calculate totalBusinessCreditTxns for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessCreditTxns + it.totalBusinessCreditTxns;
					}
					if(it.numberOfBusinessCreditTxns is known) then{
						// Calculate numberOfBusinessCreditTxns  for individual account
						nonTradeXnsCountNumberOfBusinessCreditXnsMonData = nonTradeXnsCountNumberOfBusinessCreditXnsMonData + it.numberOfBusinessCreditTxns;
						// Calculate numberOfBusinessCreditTxns  for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns + it.numberOfBusinessCreditTxns;
					}
					if(it.totalBusinessDebitTxns is known) then{
						// Calculate totalBusinessDebitTxns for individual account
						nonTradeXnsAmountTotalBusinessDebitXnsMonData = nonTradeXnsAmountTotalBusinessDebitXnsMonData + it.totalBusinessDebitTxns;
						// Calculate totalBusinessDebitTxns for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessDebitTxns + it.totalBusinessDebitTxns;
					}
					if(it.numberOfBusinessDebitTxns is known) then{
						// Calculate numberOfBusinessDebitTxns  for individual account
						nonTradeXnsCountNumberOfBusinessDebitXnsMonData = nonTradeXnsCountNumberOfBusinessDebitXnsMonData + it.numberOfBusinessDebitTxns;
						// Calculate numberOfBusinessDebitTxns  for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns + it.numberOfBusinessDebitTxns;
					}
				}
				monthDataCount = monthDataCount + 1;
				j = j + 1;
			}
			// ------------------------- End MonthlyData1 Loop -----------------------
			}
		
		else if(i = 2 and perfiosData.data.additionalMonthlyDetails is known and perfiosData.data.additionalMonthlyDetails.monthlyData3 is known)then{
			monthlyDataArrayCount = perfiosData.data.additionalMonthlyDetails.monthlyData3.count - 12;
			
			// --------------------- Start MonthlyData3 Loop ------------------------
			for each MonthlyData in perfiosData.data.additionalMonthlyDetails.monthlyData3 such that(it <> unknown) do {
				//------------------ latest 12 month ------------------
				if( monthDataCount >= monthlyDataArrayCount) then {
					if(it.totalOfSelfAndRelatedPartyCreditTxns is known) then{
						// Calculate selfRelatedPartyCreditAmount for individual account
						selfRelatedPartyCreditAmountMonData = selfRelatedPartyCreditAmountMonData + it.totalOfSelfAndRelatedPartyCreditTxns;
						// Calculate selfRelatedPartyCreditAmount  for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyCreditTxns + it.totalOfSelfAndRelatedPartyCreditTxns;
					}
					if(it.numberOfSelfAndRelatedPartyCreditTxns is known) then{
						// Calculate selfRelatedPartyCreditCount for individual account
						selfRelatedPartyCreditCountMonData = selfRelatedPartyCreditCountMonData + it.numberOfSelfAndRelatedPartyCreditTxns;
						// Calculate selfRelatedPartyCreditCount for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyCreditTxns + it.numberOfSelfAndRelatedPartyCreditTxns;
					}
					if(it.totalOfSelfAndRelatedPartyDebitTxns is known) then{
						// Calculate selfRelatedPartyDebitAmount for individual account
						selfRelatedPartyDebitAmountMonData = selfRelatedPartyDebitAmountMonData + it.totalOfSelfAndRelatedPartyDebitTxns;
						// Calculate selfRelatedPartyDebitAmount for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyDebitTxns + it.totalOfSelfAndRelatedPartyDebitTxns;
					}
					if(it.numberOfSelfAndRelatedPartyDebitTxns is known) then{
						// Calculate selfRelatedPartyDebitCount for individual account
						selfRelatedPartyDebitCountMonData = selfRelatedPartyDebitCountMonData + it.numberOfSelfAndRelatedPartyDebitTxns;
						// Calculate selfRelatedPartyDebitCount for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyDebitTxns + it.numberOfSelfAndRelatedPartyDebitTxns;
					}
					if(it.totalBusinessCreditTxns is known) then{
						// Calculate totalBusinessCreditTxns for individual account
						nonTradeXnsAmountTotalBusinessCreditXnsMonData = nonTradeXnsAmountTotalBusinessCreditXnsMonData + it.totalBusinessCreditTxns;
						// Calculate totalBusinessCreditTxns for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessCreditTxns + it.totalBusinessCreditTxns;
					}
					if(it.numberOfBusinessCreditTxns is known) then{
						// Calculate numberOfBusinessCreditTxns  for individual account
						nonTradeXnsCountNumberOfBusinessCreditXnsMonData = nonTradeXnsCountNumberOfBusinessCreditXnsMonData + it.numberOfBusinessCreditTxns;
						// Calculate numberOfBusinessCreditTxns  for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns + it.numberOfBusinessCreditTxns;
					}
					if(it.totalBusinessDebitTxns is known) then{
						// Calculate totalBusinessDebitTxns for individual account
						nonTradeXnsAmountTotalBusinessDebitXnsMonData = nonTradeXnsAmountTotalBusinessDebitXnsMonData + it.totalBusinessDebitTxns;
						// Calculate totalBusinessDebitTxns for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessDebitTxns + it.totalBusinessDebitTxns;
					}
					if(it.numberOfBusinessDebitTxns is known) then{
						// Calculate numberOfBusinessDebitTxns  for individual account
						nonTradeXnsCountNumberOfBusinessDebitXnsMonData = nonTradeXnsCountNumberOfBusinessDebitXnsMonData + it.numberOfBusinessDebitTxns;
						// Calculate numberOfBusinessDebitTxns  for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns + it.numberOfBusinessDebitTxns;
					}
				}
				monthDataCount = monthDataCount + 1;
				j = j + 1;
			}
			// ------------------------- End MonthlyData1 Loop -----------------------
		}
		
		else if(i = 3 and perfiosData.data.additionalMonthlyDetails is known and perfiosData.data.additionalMonthlyDetails.monthlyData4 is known)then{
			monthlyDataArrayCount = perfiosData.data.additionalMonthlyDetails.monthlyData4.count - 12;
			
			// --------------------- Start MonthlyData4 Loop ------------------------
			for each MonthlyData in perfiosData.data.additionalMonthlyDetails.monthlyData4 such that(it <> unknown) do {
				//------------------ latest 12 month ------------------
				if( monthDataCount >= monthlyDataArrayCount) then {
			        if(it.totalOfSelfAndRelatedPartyCreditTxns is known) then{
						// Calculate selfRelatedPartyCreditAmount for individual account
						selfRelatedPartyCreditAmountMonData = selfRelatedPartyCreditAmountMonData + it.totalOfSelfAndRelatedPartyCreditTxns;
						// Calculate selfRelatedPartyCreditAmount  for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyCreditTxns + it.totalOfSelfAndRelatedPartyCreditTxns;
					}
					if(it.numberOfSelfAndRelatedPartyCreditTxns is known) then{
						// Calculate selfRelatedPartyCreditCount for individual account
						selfRelatedPartyCreditCountMonData = selfRelatedPartyCreditCountMonData + it.numberOfSelfAndRelatedPartyCreditTxns;
						// Calculate selfRelatedPartyCreditCount for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyCreditTxns + it.numberOfSelfAndRelatedPartyCreditTxns;
					}
					if(it.totalOfSelfAndRelatedPartyDebitTxns is known) then{
						// Calculate selfRelatedPartyDebitAmount for individual account
						selfRelatedPartyDebitAmountMonData = selfRelatedPartyDebitAmountMonData + it.totalOfSelfAndRelatedPartyDebitTxns;
						// Calculate selfRelatedPartyDebitAmount for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyDebitTxns + it.totalOfSelfAndRelatedPartyDebitTxns;
					}
					if(it.numberOfSelfAndRelatedPartyDebitTxns is known) then{
						// Calculate selfRelatedPartyDebitCount for individual account
						selfRelatedPartyDebitCountMonData = selfRelatedPartyDebitCountMonData + it.numberOfSelfAndRelatedPartyDebitTxns;
						// Calculate selfRelatedPartyDebitCount for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyDebitTxns + it.numberOfSelfAndRelatedPartyDebitTxns;
					}
					if(it.totalBusinessCreditTxns is known) then{
						// Calculate totalBusinessCreditTxns for individual account
						nonTradeXnsAmountTotalBusinessCreditXnsMonData = nonTradeXnsAmountTotalBusinessCreditXnsMonData + it.totalBusinessCreditTxns;
						// Calculate totalBusinessCreditTxns for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessCreditTxns + it.totalBusinessCreditTxns;
					}
					if(it.numberOfBusinessCreditTxns is known) then{
						// Calculate numberOfBusinessCreditTxns  for individual account
						nonTradeXnsCountNumberOfBusinessCreditXnsMonData = nonTradeXnsCountNumberOfBusinessCreditXnsMonData + it.numberOfBusinessCreditTxns;
						// Calculate numberOfBusinessCreditTxns  for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns + it.numberOfBusinessCreditTxns;
					}
					if(it.totalBusinessDebitTxns is known) then{
						// Calculate totalBusinessDebitTxns for individual account
						nonTradeXnsAmountTotalBusinessDebitXnsMonData = nonTradeXnsAmountTotalBusinessDebitXnsMonData + it.totalBusinessDebitTxns;
						// Calculate totalBusinessDebitTxns for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessDebitTxns + it.totalBusinessDebitTxns;
					}
					if(it.numberOfBusinessDebitTxns is known) then{
						// Calculate numberOfBusinessDebitTxns  for individual account
						nonTradeXnsCountNumberOfBusinessDebitXnsMonData = nonTradeXnsCountNumberOfBusinessDebitXnsMonData + it.numberOfBusinessDebitTxns;
						// Calculate numberOfBusinessDebitTxns  for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns + it.numberOfBusinessDebitTxns;
					}
				}
				monthDataCount = monthDataCount + 1;
				j = j + 1;
			}
			// ------------------------- End MonthlyData4 Loop -----------------------
		}
		
		else if(i = 4 and perfiosData.data.additionalMonthlyDetails is known and perfiosData.data.additionalMonthlyDetails.monthlyData5 is known)then{
			monthlyDataArrayCount = perfiosData.data.additionalMonthlyDetails.monthlyData5.count - 12;
			
			// --------------------- Start MonthlyData5 Loop ------------------------
			for each MonthlyData in perfiosData.data.additionalMonthlyDetails.monthlyData5 such that(it <> unknown) do {
				//------------------ latest 12 month ------------------
				if( monthDataCount >= monthlyDataArrayCount) then {
			        if(it.totalOfSelfAndRelatedPartyCreditTxns is known) then{
						// Calculate selfRelatedPartyCreditAmount for individual account
						selfRelatedPartyCreditAmountMonData = selfRelatedPartyCreditAmountMonData + it.totalOfSelfAndRelatedPartyCreditTxns;
						// Calculate selfRelatedPartyCreditAmount  for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyCreditTxns + it.totalOfSelfAndRelatedPartyCreditTxns;
					}
					if(it.numberOfSelfAndRelatedPartyCreditTxns is known) then{
						// Calculate selfRelatedPartyCreditCount for individual account
						selfRelatedPartyCreditCountMonData = selfRelatedPartyCreditCountMonData + it.numberOfSelfAndRelatedPartyCreditTxns;
						// Calculate selfRelatedPartyCreditCount for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyCreditTxns + it.numberOfSelfAndRelatedPartyCreditTxns;
					}
					if(it.totalOfSelfAndRelatedPartyDebitTxns is known) then{
						// Calculate selfRelatedPartyDebitAmount for individual account
						selfRelatedPartyDebitAmountMonData = selfRelatedPartyDebitAmountMonData + it.totalOfSelfAndRelatedPartyDebitTxns;
						// Calculate selfRelatedPartyDebitAmount for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyDebitTxns + it.totalOfSelfAndRelatedPartyDebitTxns;
					}
					if(it.numberOfSelfAndRelatedPartyDebitTxns is known) then{
						// Calculate selfRelatedPartyDebitCount for individual account
						selfRelatedPartyDebitCountMonData = selfRelatedPartyDebitCountMonData + it.numberOfSelfAndRelatedPartyDebitTxns;
						// Calculate selfRelatedPartyDebitCount for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyDebitTxns + it.numberOfSelfAndRelatedPartyDebitTxns;
					}
					if(it.totalBusinessCreditTxns is known) then{
						// Calculate totalBusinessCreditTxns for individual account
						nonTradeXnsAmountTotalBusinessCreditXnsMonData = nonTradeXnsAmountTotalBusinessCreditXnsMonData + it.totalBusinessCreditTxns;
						// Calculate totalBusinessCreditTxns for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessCreditTxns + it.totalBusinessCreditTxns;
					}
					if(it.numberOfBusinessCreditTxns is known) then{
						// Calculate numberOfBusinessCreditTxns  for individual account
						nonTradeXnsCountNumberOfBusinessCreditXnsMonData = nonTradeXnsCountNumberOfBusinessCreditXnsMonData + it.numberOfBusinessCreditTxns;
						// Calculate numberOfBusinessCreditTxns  for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns + it.numberOfBusinessCreditTxns;
					}
					if(it.totalBusinessDebitTxns is known) then{
						// Calculate totalBusinessDebitTxns for individual account
						nonTradeXnsAmountTotalBusinessDebitXnsMonData = nonTradeXnsAmountTotalBusinessDebitXnsMonData + it.totalBusinessDebitTxns;
						// Calculate totalBusinessDebitTxns for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessDebitTxns + it.totalBusinessDebitTxns;
					}
					if(it.numberOfBusinessDebitTxns is known) then{
						// Calculate numberOfBusinessDebitTxns  for individual account
						nonTradeXnsCountNumberOfBusinessDebitXnsMonData = nonTradeXnsCountNumberOfBusinessDebitXnsMonData + it.numberOfBusinessDebitTxns;
						// Calculate numberOfBusinessDebitTxns  for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns + it.numberOfBusinessDebitTxns;
					}
				}
				monthDataCount = monthDataCount + 1;
				j = j + 1;
			}
			// ------------------------- End MonthlyData5 Loop ----------------------- 
		}
		
		else if(i = 5 and perfiosData.data.additionalMonthlyDetails is known and perfiosData.data.additionalMonthlyDetails.monthlyData6 is known)then{
			monthlyDataArrayCount = perfiosData.data.additionalMonthlyDetails.monthlyData6.count - 12;
			
			// --------------------- Start MonthlyData6 Loop ------------------------
			for each MonthlyData in perfiosData.data.additionalMonthlyDetails.monthlyData6 such that(it <> unknown) do {
				//------------------ latest 12 month ------------------
				if( monthDataCount >= monthlyDataArrayCount) then {
			        if(it.totalOfSelfAndRelatedPartyCreditTxns is known) then{
						// Calculate selfRelatedPartyCreditAmount for individual account
						selfRelatedPartyCreditAmountMonData = selfRelatedPartyCreditAmountMonData + it.totalOfSelfAndRelatedPartyCreditTxns;
						// Calculate selfRelatedPartyCreditAmount  for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyCreditTxns + it.totalOfSelfAndRelatedPartyCreditTxns;
					}
					if(it.numberOfSelfAndRelatedPartyCreditTxns is known) then{
						// Calculate selfRelatedPartyCreditCount for individual account
						selfRelatedPartyCreditCountMonData = selfRelatedPartyCreditCountMonData + it.numberOfSelfAndRelatedPartyCreditTxns;
						// Calculate selfRelatedPartyCreditCount for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyCreditTxns + it.numberOfSelfAndRelatedPartyCreditTxns;
					}
					if(it.totalOfSelfAndRelatedPartyDebitTxns is known) then{
						// Calculate selfRelatedPartyDebitAmount for individual account
						selfRelatedPartyDebitAmountMonData = selfRelatedPartyDebitAmountMonData + it.totalOfSelfAndRelatedPartyDebitTxns;
						// Calculate selfRelatedPartyDebitAmount for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyDebitTxns + it.totalOfSelfAndRelatedPartyDebitTxns;
					}
					if(it.numberOfSelfAndRelatedPartyDebitTxns is known) then{
						// Calculate selfRelatedPartyDebitCount for individual account
						selfRelatedPartyDebitCountMonData = selfRelatedPartyDebitCountMonData + it.numberOfSelfAndRelatedPartyDebitTxns;
						// Calculate selfRelatedPartyDebitCount for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyDebitTxns + it.numberOfSelfAndRelatedPartyDebitTxns;
					}
					if(it.totalBusinessCreditTxns is known) then{
						// Calculate totalBusinessCreditTxns for individual account
						nonTradeXnsAmountTotalBusinessCreditXnsMonData = nonTradeXnsAmountTotalBusinessCreditXnsMonData + it.totalBusinessCreditTxns;
						// Calculate totalBusinessCreditTxns for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessCreditTxns + it.totalBusinessCreditTxns;
					}
					if(it.numberOfBusinessCreditTxns is known) then{
						// Calculate numberOfBusinessCreditTxns  for individual account
						nonTradeXnsCountNumberOfBusinessCreditXnsMonData = nonTradeXnsCountNumberOfBusinessCreditXnsMonData + it.numberOfBusinessCreditTxns;
						// Calculate numberOfBusinessCreditTxns  for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns + it.numberOfBusinessCreditTxns;
					}
					if(it.totalBusinessDebitTxns is known) then{
						// Calculate totalBusinessDebitTxns for individual account
						nonTradeXnsAmountTotalBusinessDebitXnsMonData = nonTradeXnsAmountTotalBusinessDebitXnsMonData + it.totalBusinessDebitTxns;
						// Calculate totalBusinessDebitTxns for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessDebitTxns + it.totalBusinessDebitTxns;
					}
					if(it.numberOfBusinessDebitTxns is known) then{
						// Calculate numberOfBusinessDebitTxns  for individual account
						nonTradeXnsCountNumberOfBusinessDebitXnsMonData = nonTradeXnsCountNumberOfBusinessDebitXnsMonData + it.numberOfBusinessDebitTxns;
						// Calculate numberOfBusinessDebitTxns  for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns + it.numberOfBusinessDebitTxns;
					}
				}
				monthDataCount = monthDataCount + 1;
				j = j + 1;
			}
			// ------------------------- End MonthlyData6 Loop -----------------------
		}
		
		else if(i = 6 and perfiosData.data.additionalMonthlyDetails is known and perfiosData.data.additionalMonthlyDetails.monthlyData7 is known)then{
			monthlyDataArrayCount = perfiosData.data.additionalMonthlyDetails.monthlyData7.count - 12;
			
			// --------------------- Start MonthlyData7 Loop ------------------------
			for each MonthlyData in perfiosData.data.additionalMonthlyDetails.monthlyData7 such that(it <> unknown) do {
				//------------------ latest 12 month ------------------
				if( monthDataCount >= monthlyDataArrayCount) then {
			        if(it.totalOfSelfAndRelatedPartyCreditTxns is known) then{
						// Calculate selfRelatedPartyCreditAmount for individual account
						selfRelatedPartyCreditAmountMonData = selfRelatedPartyCreditAmountMonData + it.totalOfSelfAndRelatedPartyCreditTxns;
						// Calculate selfRelatedPartyCreditAmount  for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyCreditTxns + it.totalOfSelfAndRelatedPartyCreditTxns;
					}
					if(it.numberOfSelfAndRelatedPartyCreditTxns is known) then{
						// Calculate selfRelatedPartyCreditCount for individual account
						selfRelatedPartyCreditCountMonData = selfRelatedPartyCreditCountMonData + it.numberOfSelfAndRelatedPartyCreditTxns;
						// Calculate selfRelatedPartyCreditCount for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyCreditTxns + it.numberOfSelfAndRelatedPartyCreditTxns;
					}
					if(it.totalOfSelfAndRelatedPartyDebitTxns is known) then{
						// Calculate selfRelatedPartyDebitAmount for individual account
						selfRelatedPartyDebitAmountMonData = selfRelatedPartyDebitAmountMonData + it.totalOfSelfAndRelatedPartyDebitTxns;
						// Calculate selfRelatedPartyDebitAmount for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyDebitTxns + it.totalOfSelfAndRelatedPartyDebitTxns;
					}
					if(it.numberOfSelfAndRelatedPartyDebitTxns is known) then{
						// Calculate selfRelatedPartyDebitCount for individual account
						selfRelatedPartyDebitCountMonData = selfRelatedPartyDebitCountMonData + it.numberOfSelfAndRelatedPartyDebitTxns;
						// Calculate selfRelatedPartyDebitCount for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyDebitTxns + it.numberOfSelfAndRelatedPartyDebitTxns;
					}
					if(it.totalBusinessCreditTxns is known) then{
						// Calculate totalBusinessCreditTxns for individual account
						nonTradeXnsAmountTotalBusinessCreditXnsMonData = nonTradeXnsAmountTotalBusinessCreditXnsMonData + it.totalBusinessCreditTxns;
						// Calculate totalBusinessCreditTxns for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessCreditTxns + it.totalBusinessCreditTxns;
					}
					if(it.numberOfBusinessCreditTxns is known) then{
						// Calculate numberOfBusinessCreditTxns  for individual account
						nonTradeXnsCountNumberOfBusinessCreditXnsMonData = nonTradeXnsCountNumberOfBusinessCreditXnsMonData + it.numberOfBusinessCreditTxns;
						// Calculate numberOfBusinessCreditTxns  for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns + it.numberOfBusinessCreditTxns;
					}
					if(it.totalBusinessDebitTxns is known) then{
						// Calculate totalBusinessDebitTxns for individual account
						nonTradeXnsAmountTotalBusinessDebitXnsMonData = nonTradeXnsAmountTotalBusinessDebitXnsMonData + it.totalBusinessDebitTxns;
						// Calculate totalBusinessDebitTxns for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessDebitTxns + it.totalBusinessDebitTxns;
					}
					if(it.numberOfBusinessDebitTxns is known) then{
						// Calculate numberOfBusinessDebitTxns  for individual account
						nonTradeXnsCountNumberOfBusinessDebitXnsMonData = nonTradeXnsCountNumberOfBusinessDebitXnsMonData + it.numberOfBusinessDebitTxns;
						// Calculate numberOfBusinessDebitTxns  for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns + it.numberOfBusinessDebitTxns;
					}
				}
				monthDataCount = monthDataCount + 1;
				j = j + 1;
			}
			// ------------------------- End MonthlyData7 Loop -----------------------
		}
		
		else if(i = 7 and perfiosData.data.additionalMonthlyDetails is known and perfiosData.data.additionalMonthlyDetails.monthlyData8 is known)then{
			monthlyDataArrayCount = perfiosData.data.additionalMonthlyDetails.monthlyData8.count - 12;
			
			// --------------------- Start MonthlyData8 Loop ------------------------
			for each MonthlyData in perfiosData.data.additionalMonthlyDetails.monthlyData8 such that(it <> unknown) do {
				//------------------ latest 12 month ------------------
				if( monthDataCount >= monthlyDataArrayCount) then {
					if(it.totalOfSelfAndRelatedPartyCreditTxns is known) then{
						// Calculate selfRelatedPartyCreditAmount for individual account
						selfRelatedPartyCreditAmountMonData = selfRelatedPartyCreditAmountMonData + it.totalOfSelfAndRelatedPartyCreditTxns;
						// Calculate selfRelatedPartyCreditAmount  for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyCreditTxns + it.totalOfSelfAndRelatedPartyCreditTxns;
					}
					if(it.numberOfSelfAndRelatedPartyCreditTxns is known) then{
						// Calculate selfRelatedPartyCreditCount for individual account
						selfRelatedPartyCreditCountMonData = selfRelatedPartyCreditCountMonData + it.numberOfSelfAndRelatedPartyCreditTxns;
						// Calculate selfRelatedPartyCreditCount for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyCreditTxns + it.numberOfSelfAndRelatedPartyCreditTxns;
					}
					if(it.totalOfSelfAndRelatedPartyDebitTxns is known) then{
						// Calculate selfRelatedPartyDebitAmount for individual account
						selfRelatedPartyDebitAmountMonData = selfRelatedPartyDebitAmountMonData + it.totalOfSelfAndRelatedPartyDebitTxns;
						// Calculate selfRelatedPartyDebitAmount for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyDebitTxns + it.totalOfSelfAndRelatedPartyDebitTxns;
					}
					if(it.numberOfSelfAndRelatedPartyDebitTxns is known) then{
						// Calculate selfRelatedPartyDebitCount for individual account
						selfRelatedPartyDebitCountMonData = selfRelatedPartyDebitCountMonData + it.numberOfSelfAndRelatedPartyDebitTxns;
						// Calculate selfRelatedPartyDebitCount for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyDebitTxns + it.numberOfSelfAndRelatedPartyDebitTxns;
					}
					if(it.totalBusinessCreditTxns is known) then{
						// Calculate totalBusinessCreditTxns for individual account
						nonTradeXnsAmountTotalBusinessCreditXnsMonData = nonTradeXnsAmountTotalBusinessCreditXnsMonData + it.totalBusinessCreditTxns;
						// Calculate totalBusinessCreditTxns for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessCreditTxns + it.totalBusinessCreditTxns;
					}
					if(it.numberOfBusinessCreditTxns is known) then{
						// Calculate numberOfBusinessCreditTxns  for individual account
						nonTradeXnsCountNumberOfBusinessCreditXnsMonData = nonTradeXnsCountNumberOfBusinessCreditXnsMonData + it.numberOfBusinessCreditTxns;
						// Calculate numberOfBusinessCreditTxns  for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns + it.numberOfBusinessCreditTxns;
					}
					if(it.totalBusinessDebitTxns is known) then{
						// Calculate totalBusinessDebitTxns for individual account
						nonTradeXnsAmountTotalBusinessDebitXnsMonData = nonTradeXnsAmountTotalBusinessDebitXnsMonData + it.totalBusinessDebitTxns;
						// Calculate totalBusinessDebitTxns for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessDebitTxns + it.totalBusinessDebitTxns;
					}
					if(it.numberOfBusinessDebitTxns is known) then{
						// Calculate numberOfBusinessDebitTxns  for individual account
						nonTradeXnsCountNumberOfBusinessDebitXnsMonData = nonTradeXnsCountNumberOfBusinessDebitXnsMonData + it.numberOfBusinessDebitTxns;
						// Calculate numberOfBusinessDebitTxns  for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns + it.numberOfBusinessDebitTxns;
					}
				}
				monthDataCount = monthDataCount + 1;
				j = j + 1;
			}
			// ------------------------- End MonthlyData8 Loop -----------------------
		}
		
		else if(i = 8 and perfiosData.data.additionalMonthlyDetails is known and perfiosData.data.additionalMonthlyDetails.monthlyData9 is known)then{
			monthlyDataArrayCount = perfiosData.data.additionalMonthlyDetails.monthlyData9.count - 12;
			
			// --------------------- Start MonthlyData9 Loop ------------------------
			for each MonthlyData in perfiosData.data.additionalMonthlyDetails.monthlyData9 such that(it <> unknown) do {
				//------------------ latest 12 month ------------------
				if( monthDataCount >= monthlyDataArrayCount) then {
			        if(it.totalOfSelfAndRelatedPartyCreditTxns is known) then{
						// Calculate selfRelatedPartyCreditAmount for individual account
						selfRelatedPartyCreditAmountMonData = selfRelatedPartyCreditAmountMonData + it.totalOfSelfAndRelatedPartyCreditTxns;
						// Calculate selfRelatedPartyCreditAmount  for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyCreditTxns + it.totalOfSelfAndRelatedPartyCreditTxns;
					}
					if(it.numberOfSelfAndRelatedPartyCreditTxns is known) then{
						// Calculate selfRelatedPartyCreditCount for individual account
						selfRelatedPartyCreditCountMonData = selfRelatedPartyCreditCountMonData + it.numberOfSelfAndRelatedPartyCreditTxns;
						// Calculate selfRelatedPartyCreditCount for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyCreditTxns + it.numberOfSelfAndRelatedPartyCreditTxns;
					}
					if(it.totalOfSelfAndRelatedPartyDebitTxns is known) then{
						// Calculate selfRelatedPartyDebitAmount for individual account
						selfRelatedPartyDebitAmountMonData = selfRelatedPartyDebitAmountMonData + it.totalOfSelfAndRelatedPartyDebitTxns;
						// Calculate selfRelatedPartyDebitAmount for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyDebitTxns + it.totalOfSelfAndRelatedPartyDebitTxns;
					}
					if(it.numberOfSelfAndRelatedPartyDebitTxns is known) then{
						// Calculate selfRelatedPartyDebitCount for individual account
						selfRelatedPartyDebitCountMonData = selfRelatedPartyDebitCountMonData + it.numberOfSelfAndRelatedPartyDebitTxns;
						// Calculate selfRelatedPartyDebitCount for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyDebitTxns + it.numberOfSelfAndRelatedPartyDebitTxns;
					}
					if(it.totalBusinessCreditTxns is known) then{
						// Calculate totalBusinessCreditTxns for individual account
						nonTradeXnsAmountTotalBusinessCreditXnsMonData = nonTradeXnsAmountTotalBusinessCreditXnsMonData + it.totalBusinessCreditTxns;
						// Calculate totalBusinessCreditTxns for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessCreditTxns + it.totalBusinessCreditTxns;
					}
					if(it.numberOfBusinessCreditTxns is known) then{
						// Calculate numberOfBusinessCreditTxns  for individual account
						nonTradeXnsCountNumberOfBusinessCreditXnsMonData = nonTradeXnsCountNumberOfBusinessCreditXnsMonData + it.numberOfBusinessCreditTxns;
						// Calculate numberOfBusinessCreditTxns  for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns + it.numberOfBusinessCreditTxns;
					}
					if(it.totalBusinessDebitTxns is known) then{
						// Calculate totalBusinessDebitTxns for individual account
						nonTradeXnsAmountTotalBusinessDebitXnsMonData = nonTradeXnsAmountTotalBusinessDebitXnsMonData + it.totalBusinessDebitTxns;
						// Calculate totalBusinessDebitTxns for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessDebitTxns + it.totalBusinessDebitTxns;
					}
					if(it.numberOfBusinessDebitTxns is known) then{
						// Calculate numberOfBusinessDebitTxns  for individual account
						nonTradeXnsCountNumberOfBusinessDebitXnsMonData = nonTradeXnsCountNumberOfBusinessDebitXnsMonData + it.numberOfBusinessDebitTxns;
						// Calculate numberOfBusinessDebitTxns  for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns + it.numberOfBusinessDebitTxns;
					}
				}
				monthDataCount = monthDataCount + 1;
				j = j + 1;
			}
			// ------------------------- End MonthlyData9 Loop -----------------------
		}
	
	    else if(i = 9 and perfiosData.data.additionalMonthlyDetails is known and perfiosData.data.additionalMonthlyDetails.monthlyData10 is known)then{
			monthlyDataArrayCount = perfiosData.data.additionalMonthlyDetails.monthlyData10.count - 12;
			
			// --------------------- Start MonthlyData10 Loop ------------------------
			for each MonthlyData in perfiosData.data.additionalMonthlyDetails.monthlyData10 such that(it <> unknown) do {
				//------------------ latest 12 month ------------------
				if( monthDataCount >= monthlyDataArrayCount) then {
			        if(it.totalOfSelfAndRelatedPartyCreditTxns is known) then{
						// Calculate selfRelatedPartyCreditAmount for individual account
						selfRelatedPartyCreditAmountMonData = selfRelatedPartyCreditAmountMonData + it.totalOfSelfAndRelatedPartyCreditTxns;
						// Calculate selfRelatedPartyCreditAmount  for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyCreditTxns + it.totalOfSelfAndRelatedPartyCreditTxns;
					}
					if(it.numberOfSelfAndRelatedPartyCreditTxns is known) then{
						// Calculate selfRelatedPartyCreditCount for individual account
						selfRelatedPartyCreditCountMonData = selfRelatedPartyCreditCountMonData + it.numberOfSelfAndRelatedPartyCreditTxns;
						// Calculate selfRelatedPartyCreditCount for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyCreditTxns + it.numberOfSelfAndRelatedPartyCreditTxns;
					}
					if(it.totalOfSelfAndRelatedPartyDebitTxns is known) then{
						// Calculate selfRelatedPartyDebitAmount for individual account
						selfRelatedPartyDebitAmountMonData = selfRelatedPartyDebitAmountMonData + it.totalOfSelfAndRelatedPartyDebitTxns;
						// Calculate selfRelatedPartyDebitAmount for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyDebitTxns + it.totalOfSelfAndRelatedPartyDebitTxns;
					}
					if(it.numberOfSelfAndRelatedPartyDebitTxns is known) then{
						// Calculate selfRelatedPartyDebitCount for individual account
						selfRelatedPartyDebitCountMonData = selfRelatedPartyDebitCountMonData + it.numberOfSelfAndRelatedPartyDebitTxns;
						// Calculate selfRelatedPartyDebitCount for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyDebitTxns + it.numberOfSelfAndRelatedPartyDebitTxns;
					}
					if(it.totalBusinessCreditTxns is known) then{
						// Calculate totalBusinessCreditTxns for individual account
						nonTradeXnsAmountTotalBusinessCreditXnsMonData = nonTradeXnsAmountTotalBusinessCreditXnsMonData + it.totalBusinessCreditTxns;
						// Calculate totalBusinessCreditTxns for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessCreditTxns + it.totalBusinessCreditTxns;
					}
					if(it.numberOfBusinessCreditTxns is known) then{
						// Calculate numberOfBusinessCreditTxns  for individual account
						nonTradeXnsCountNumberOfBusinessCreditXnsMonData = nonTradeXnsCountNumberOfBusinessCreditXnsMonData + it.numberOfBusinessCreditTxns;
						// Calculate numberOfBusinessCreditTxns  for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns + it.numberOfBusinessCreditTxns;
					}
					if(it.totalBusinessDebitTxns is known) then{
						// Calculate totalBusinessDebitTxns for individual account
						nonTradeXnsAmountTotalBusinessDebitXnsMonData = nonTradeXnsAmountTotalBusinessDebitXnsMonData + it.totalBusinessDebitTxns;
						// Calculate totalBusinessDebitTxns for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessDebitTxns + it.totalBusinessDebitTxns;
					}
					if(it.numberOfBusinessDebitTxns is known) then{
						// Calculate numberOfBusinessDebitTxns  for individual account
						nonTradeXnsCountNumberOfBusinessDebitXnsMonData = nonTradeXnsCountNumberOfBusinessDebitXnsMonData + it.numberOfBusinessDebitTxns;
						// Calculate numberOfBusinessDebitTxns  for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns + it.numberOfBusinessDebitTxns;
					}
				}
				monthDataCount = monthDataCount + 1;
				j = j + 1;
			}
			// ------------------------- End MonthlyData10 Loop -----------------------
		}
		
		else if(i = 10 and perfiosData.data.additionalMonthlyDetails is known and perfiosData.data.additionalMonthlyDetails.monthlyData11 is known)then{
			monthlyDataArrayCount = perfiosData.data.additionalMonthlyDetails.monthlyData11.count - 12;
			
			// --------------------- Start MonthlyData11 Loop ------------------------
			for each MonthlyData in perfiosData.data.additionalMonthlyDetails.monthlyData11 such that(it <> unknown) do {
				//------------------ latest 12 month ------------------
				if( monthDataCount >= monthlyDataArrayCount) then {
			        if(it.totalOfSelfAndRelatedPartyCreditTxns is known) then{
						// Calculate selfRelatedPartyCreditAmount for individual account
						selfRelatedPartyCreditAmountMonData = selfRelatedPartyCreditAmountMonData + it.totalOfSelfAndRelatedPartyCreditTxns;
						// Calculate selfRelatedPartyCreditAmount  for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyCreditTxns + it.totalOfSelfAndRelatedPartyCreditTxns;
					}
					if(it.numberOfSelfAndRelatedPartyCreditTxns is known) then{
						// Calculate selfRelatedPartyCreditCount for individual account
						selfRelatedPartyCreditCountMonData = selfRelatedPartyCreditCountMonData + it.numberOfSelfAndRelatedPartyCreditTxns;
						// Calculate selfRelatedPartyCreditCount for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyCreditTxns + it.numberOfSelfAndRelatedPartyCreditTxns;
					}
					if(it.totalOfSelfAndRelatedPartyDebitTxns is known) then{
						// Calculate selfRelatedPartyDebitAmount for individual account
						selfRelatedPartyDebitAmountMonData = selfRelatedPartyDebitAmountMonData + it.totalOfSelfAndRelatedPartyDebitTxns;
						// Calculate selfRelatedPartyDebitAmount for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalOfSelfAndRelatedPartyDebitTxns + it.totalOfSelfAndRelatedPartyDebitTxns;
					}
					if(it.numberOfSelfAndRelatedPartyDebitTxns is known) then{
						// Calculate selfRelatedPartyDebitCount for individual account
						selfRelatedPartyDebitCountMonData = selfRelatedPartyDebitCountMonData + it.numberOfSelfAndRelatedPartyDebitTxns;
						// Calculate selfRelatedPartyDebitCount for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfSelfAndRelatedPartyDebitTxns + it.numberOfSelfAndRelatedPartyDebitTxns;
					}
					if(it.totalBusinessCreditTxns is known) then{
						// Calculate totalBusinessCreditTxns for individual account
						nonTradeXnsAmountTotalBusinessCreditXnsMonData = nonTradeXnsAmountTotalBusinessCreditXnsMonData + it.totalBusinessCreditTxns;
						// Calculate totalBusinessCreditTxns for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessCreditTxns + it.totalBusinessCreditTxns;
					}
					if(it.numberOfBusinessCreditTxns is known) then{
						// Calculate numberOfBusinessCreditTxns  for individual account
						nonTradeXnsCountNumberOfBusinessCreditXnsMonData = nonTradeXnsCountNumberOfBusinessCreditXnsMonData + it.numberOfBusinessCreditTxns;
						// Calculate numberOfBusinessCreditTxns  for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns + it.numberOfBusinessCreditTxns;
					}
					if(it.totalBusinessDebitTxns is known) then{
						// Calculate totalBusinessDebitTxns for individual account
						nonTradeXnsAmountTotalBusinessDebitXnsMonData = nonTradeXnsAmountTotalBusinessDebitXnsMonData + it.totalBusinessDebitTxns;
						// Calculate totalBusinessDebitTxns for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessDebitTxns + it.totalBusinessDebitTxns;
					}
					if(it.numberOfBusinessDebitTxns is known) then{
						// Calculate numberOfBusinessDebitTxns  for individual account
						nonTradeXnsCountNumberOfBusinessDebitXnsMonData = nonTradeXnsCountNumberOfBusinessDebitXnsMonData + it.numberOfBusinessDebitTxns;
						// Calculate numberOfBusinessDebitTxns  for final account
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns + it.numberOfBusinessDebitTxns;
					}
				}
				monthDataCount = monthDataCount + 1;
				j = j + 1;
			}
			// ------------------------- End MonthlyData11 Loop -----------------------
		}			
		
		// ---------------- Self & Related Party Transactions Start-------------------
		// Calculate selfRelatedPartyCreditAmountPerMonData
		if(selfRelatedPartyCreditAmountMonData is known and totalCreditAmount is known and totalCreditAmount>0) then{
			selfRelatedPartyCreditAmountPerMonData = (selfRelatedPartyCreditAmountMonData/totalCreditAmount)*100;
		}
		// Calculate selfRelatedPartyCreditCountPerMonData
		if(selfRelatedPartyCreditCountMonData is known and totalCreditCount is known and totalCreditCount>0) then{
			selfRelatedPartyCreditCountPerMonData = (selfRelatedPartyCreditCountMonData/totalCreditCount)*100;
		}
		// Calculate selfRelatedPartyDebitAmountPerMonData
		if(selfRelatedPartyDebitAmountMonData is known and totalDebitAmount is known and totalDebitAmount>0) then{
			selfRelatedPartyDebitAmountPerMonData = (selfRelatedPartyDebitAmountMonData/totalDebitAmount)*100;
		}
		// Calculate selfRelatedPartyDebitCountPerMonData
		if(selfRelatedPartyDebitCountMonData is known and totalDebitCount is known and totalDebitCount>0) then{
			selfRelatedPartyDebitCountPerMonData = (selfRelatedPartyDebitCountMonData/totalDebitCount)*100;
		}
		// ---------------- Self & Related Party Transactions End-------------------
			
		// -------------------- Non-Trade Transactions start -----------------------
		// Calculate nonTradeXnsCreditAmountMonData
		if(nonTradeXnsAmountTotalBusinessCreditXnsMonData is known and totalCreditAmount is known) then{
			nonTradeXnsCreditAmountMonData = (nonTradeXnsAmountTotalBusinessCreditXnsMonData - totalCreditAmount);
		}
		// Calculate nonTradeXnsCreditAmountPerMonData
		if(nonTradeXnsCreditAmountMonData is known and totalCreditAmount is known and totalCreditAmount>0) then{
			nonTradeXnsCreditAmountPerMonData = (nonTradeXnsCreditAmountMonData/totalCreditAmount)*100;
		}
		// Calculate nonTradeXnsCreditCountMonData
		if(nonTradeXnsCountNumberOfBusinessCreditXnsMonData is known and totalCreditCount is known) then{
			nonTradeXnsCreditCountMonData = nonTradeXnsCountNumberOfBusinessCreditXnsMonData - totalCreditCount;
		}
		// Calculate nonTradeXnsCreditCountPerMonData
		if(nonTradeXnsCreditCountMonData is known and totalCreditCount is known and totalCreditCount>0) then{
			nonTradeXnsCreditCountPerMonData = (nonTradeXnsCreditCountMonData/totalCreditCount)*100;
		}
		// Calculate nonTradeXnsDebitAmountMonData
		if(nonTradeXnsAmountTotalBusinessDebitXnsMonData is known and totalDebitAmount is known) then{
			nonTradeXnsDebitAmountMonData = nonTradeXnsAmountTotalBusinessDebitXnsMonData - totalDebitAmount;
		}
	    // Calculate nonTradeXnsDebitAmountPerMonData
		if(nonTradeXnsDebitAmountMonData is known and totalDebitAmount is known and totalDebitAmount>0) then{
			nonTradeXnsDebitAmountPerMonData = (nonTradeXnsDebitAmountMonData/totalDebitAmount)*100;
		}
		// Calculate nonTradeXnsDebitCountMonData
		if(nonTradeXnsCountNumberOfBusinessDebitXnsMonData is known and totalDebitCount is known) then{
			nonTradeXnsDebitCountMonData = nonTradeXnsCountNumberOfBusinessDebitXnsMonData - totalDebitCount;
		}
	    // Calculate nonTradeXnsDebitCountPerMonData
		if(nonTradeXnsDebitCountMonData is known and totalDebitCount is known and totalDebitCount>0) then{
			nonTradeXnsDebitCountPerMonData = (nonTradeXnsDebitCountMonData/totalDebitCount)*100;
		}
		// -------------------- Non-Trade Transactions End -------------------------
			
		// ------------------- Circular Transactions Start -------------------------
		// Calculate circularXnsAmountPerMonData
		if(circularXnsAmount is known) then{
			circularXnsAmountPerMonData = (circularXnsAmount / (totalCreditAmount + totalDebitAmount))*100;
		}
	    // Calculate circularXnsCountPerMonData
		if(circularXnsCount is known) then{
			circularXnsCountPerMonData = (circularXnsCount / (totalDebitCount + totalCreditCount))*100;
		}
		// ------------------- Circular Transactions End ---------------------------
			
		// ############## Append ###################
		fn_AppendCalculatedVariable(message,"selfRelatedPartyCreditAmount", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyCreditAmountMonData,-2) as a string);
		fn_AppendCalculatedVariable(message,"selfRelatedPartyCreditAmountPercent", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyCreditAmountPerMonData,-2) as a string);
		fn_AppendCalculatedVariable(message,"selfRelatedPartyCreditCount", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyCreditCountMonData,-2) as a string);
		fn_AppendCalculatedVariable(message,"selfRelatedPartyCreditCountPercent", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyCreditCountPerMonData,-2) as a string);
		fn_AppendCalculatedVariable(message,"selfRelatedPartyDebitAmount", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyDebitAmountMonData,-2) as a string);
		fn_AppendCalculatedVariable(message,"selfRelatedPartyDebitAmountPercent", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyDebitAmountPerMonData,-2) as a string);
		fn_AppendCalculatedVariable(message,"selfRelatedPartyDebitCount", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyDebitCountMonData,-2) as a string);
		fn_AppendCalculatedVariable(message,"selfRelatedPartyDebitCountPercent", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(selfRelatedPartyDebitCountPerMonData,-2) as a string);
	
		fn_AppendCalculatedVariable(message,"highValueXnsCreditAmount", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(highValueXnsCreditAmount,-2) as a string);
		fn_AppendCalculatedVariable(message,"highValueXnsCreditAmountPercent", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(highValueXnsCreditAmountPer,-2) as a string);
		fn_AppendCalculatedVariable(message,"highValueXnsCreditCount", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, highValueXnsCreditCount as a string);
		fn_AppendCalculatedVariable(message,"highValueXnsCreditCountPercent", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(highValueXnsCreditCountPer,-2) as a string);
		fn_AppendCalculatedVariable(message,"highValueXnsDebitAmount", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(highValueXnsDebitAmount,-2) as a string);
		fn_AppendCalculatedVariable(message,"highValueXnsDebitAmountPercent", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(highValueXnsDebitAmountPer,-2) as a string);
		fn_AppendCalculatedVariable(message,"highValueXnsDebitCount", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, highValueXnsDebitCount as a string);
		fn_AppendCalculatedVariable(message,"highValueXnsDebitCountPercent", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(highValueXnsDebitCountPer,-2) as a string);
	
		fn_AppendCalculatedVariable(message,"nonTradeXnsCreditAmount", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsCreditAmountMonData,-2) as a string);
		fn_AppendCalculatedVariable(message,"nonTradeXnsCreditAmountPercent", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsCreditAmountPerMonData,-2) as a string);
		fn_AppendCalculatedVariable(message,"nonTradeXnsCreditCount", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsCreditCountMonData,-2) as a string);
		fn_AppendCalculatedVariable(message,"nonTradeXnsCreditCountPercent", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsCreditCountPerMonData,-2) as a string);
		fn_AppendCalculatedVariable(message,"nonTradeXnsDebitAmount", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsDebitAmountMonData,-2) as a string);
		fn_AppendCalculatedVariable(message,"nonTradeXnsDebitAmountPercent", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsDebitAmountPerMonData,-2) as a string);
		fn_AppendCalculatedVariable(message,"nonTradeXnsDebitCount", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsDebitCountMonData,-2) as a string);
		fn_AppendCalculatedVariable(message,"nonTradeXnsDebitCountPercent", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(nonTradeXnsDebitCountPerMonData,-2) as a string);
	
	    fn_AppendCalculatedVariable(message,"circularXnsAmount", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(circularXnsAmount,-2) as a string);
		fn_AppendCalculatedVariable(message,"circularXnsAmountPercent", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(circularXnsAmountPerMonData,-2) as a string);
		fn_AppendCalculatedVariable(message,"circularXnsCount", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(circularXnsCount,-2) as a string);
		fn_AppendCalculatedVariable(message,"circularXnsCountPercent", "real", productCode, applicantId, applicantType, "TransactionAnalytics_"i, math().round(circularXnsCountPerMonData,-2) as a string);
			
		print("selfRelatedPartyCreditAmountMonData :: "selfRelatedPartyCreditAmountMonData);
		print("selfRelatedPartyCreditAmountPerMonData :: "selfRelatedPartyCreditAmountPerMonData);
		print("selfRelatedPartyCreditCountMonData :: "selfRelatedPartyCreditCountMonData);
		print("selfRelatedPartyCreditCountPerMonData :: "selfRelatedPartyCreditCountPerMonData);
		print("selfRelatedPartyDebitAmountMonData :: "selfRelatedPartyDebitAmountMonData);
		print("selfRelatedPartyDebitAmountPerMonData :: "selfRelatedPartyDebitAmountPerMonData);
		print("selfRelatedPartyDebitCountMonData :: "selfRelatedPartyDebitCountMonData);
		print("selfRelatedPartyDebitCountPerMonData :: "selfRelatedPartyDebitCountPerMonData);
		print("highValueXnsCreditAmount :: "highValueXnsCreditAmount);
		print("highValueXnsCreditAmountPer :: "highValueXnsCreditAmountPer);
		print("highValueXnsCreditCount :: "highValueXnsCreditCount);
		print("highValueXnsCreditCountPer :: "highValueXnsCreditCountPer);
		print("highValueXnsDebitAmount :: "highValueXnsDebitAmount);
		print("highValueXnsDebitAmountPer :: "highValueXnsDebitAmountPer);
		print("highValueXnsDebitCount :: "highValueXnsDebitCount);
		print("highValueXnsDebitCountPer :: "highValueXnsDebitCountPer);
		print("nonTradeXnsCreditAmountMonData :: "nonTradeXnsCreditAmountMonData);
		print("nonTradeXnsCreditAmountPerMonData :: "nonTradeXnsCreditAmountPerMonData);
		print("nonTradeXnsCreditCountMonData :: "nonTradeXnsCreditCountMonData);
		print("nonTradeXnsCreditCountPerMonData :: "nonTradeXnsCreditCountPerMonData);
		print("nonTradeXnsDebitAmountMonData :: "nonTradeXnsDebitAmountMonData);
		print("nonTradeXnsDebitAmountPerMonData :: "nonTradeXnsDebitAmountPerMonData);
		print("nonTradeXnsDebitCountMonData :: "nonTradeXnsDebitCountMonData);
		print("nonTradeXnsDebitCountPerMonData :: "nonTradeXnsDebitCountPerMonData);
		print("circularXnsAmount :: "circularXnsAmount);
		print("circularXnsAmountPerMonData :: "circularXnsAmountPerMonData);
		print("circularXnsCount :: "circularXnsCount);
		print("circularXnsCountPerMonData :: "circularXnsCountPerMonData);
		
		i=i+1;
	}
	// ----------------------- Account Analysis Loop End ---------------------------
}
	
	if(accAnalysisArrCount>1)then{
	
	for each BlazeMonthlyDetail in blazeAccountAnalysis.blazeMonthlyDetailArray such that(it <> unknown and it is not null) do{
		ablazeMonthlyDetailArr is some BlazeMonthlyDetail initially it as a BlazeMonthlyDetail;
		if(ablazeMonthlyDetailArr.totalCredit is known)then{
			finalCreditAmount = finalCreditAmount + ablazeMonthlyDetailArr.totalCredit;
		}
		if(ablazeMonthlyDetailArr.credits is known)then{
			finalCreditCount = finalCreditCount + ablazeMonthlyDetailArr.credits;
		}
		if(ablazeMonthlyDetailArr.totalDebit is known)then{
			finalDebitAmount = finalDebitAmount + ablazeMonthlyDetailArr.totalDebit;
		}
		if(ablazeMonthlyDetailArr.debits is known)then{
			finalDebitCount = finalDebitCount + ablazeMonthlyDetailArr.debits;
		}
		if(ablazeMonthlyDetailArr.totalSamePartyAmountCreditDebit is known)then{
			finalCircularXnsAmount = finalCircularXnsAmount + ablazeMonthlyDetailArr.totalSamePartyAmountCreditDebit;
		}
		if(ablazeMonthlyDetailArr.samePartyAmountCreditDebits is known)then{
			finalCircularXnsCount = finalCircularXnsCount + ablazeMonthlyDetailArr.samePartyAmountCreditDebits;
		}
	} 
	
	for each BlazeMonthlyData in blazeAccountAnalysis.blazeMonthlyDataArray such that(it <> unknown) do {
		aMonthlyData is some BlazeMonthlyData initially it as a BlazeMonthlyData;
		
		// ------------------------------------ Self & Related Party Transactions ----------------------------
		if(aMonthlyData.totalOfSelfAndRelatedPartyCreditTxns is known)then{
			selfRelatedPartyCreditAmountFinal = selfRelatedPartyCreditAmountFinal + aMonthlyData.totalOfSelfAndRelatedPartyCreditTxns;
		}
		if(aMonthlyData.numberOfSelfAndRelatedPartyCreditTxns is known)then{
			selfRelatedPartyCreditCountFinal = selfRelatedPartyCreditCountFinal + aMonthlyData.numberOfSelfAndRelatedPartyCreditTxns;
		}
		if(aMonthlyData.totalOfSelfAndRelatedPartyDebitTxns is known)then{
			selfRelatedPartyDebitAmountFinal = selfRelatedPartyDebitAmountFinal + aMonthlyData.totalOfSelfAndRelatedPartyDebitTxns;
		}
		if(aMonthlyData.numberOfSelfAndRelatedPartyDebitTxns is known)then{
			selfRelatedPartyDebitCountFinal = selfRelatedPartyDebitCountFinal + aMonthlyData.numberOfSelfAndRelatedPartyDebitTxns;
		}
		// ---------------------------------- Non-Trade Transactions--------------------------------------
		if(aMonthlyData.totalBusinessCreditTxns is known)then{
			nonTradeXnsAmountTotalBusinessCreditXnsFinal = nonTradeXnsAmountTotalBusinessCreditXnsFinal + aMonthlyData.totalBusinessCreditTxns;
		}
		if(aMonthlyData.numberOfBusinessCreditTxns is known)then{
			nonTradeXnsCountNumberOfBusinessCreditXnsFinal = nonTradeXnsCountNumberOfBusinessCreditXnsFinal + aMonthlyData.numberOfBusinessCreditTxns;
		}
		if(aMonthlyData.totalBusinessDebitTxns is known)then{
			nonTradeXnsAmountTotalBusinessDebitXnsFinal = nonTradeXnsAmountTotalBusinessDebitXnsFinal + aMonthlyData.totalBusinessDebitTxns;
		}
		if(aMonthlyData.numberOfBusinessDebitTxns is known)then{
			nonTradeXnsCountNumberOfBusinessDebitXnsFinal = nonTradeXnsCountNumberOfBusinessDebitXnsFinal + aMonthlyData.numberOfBusinessDebitTxns;
		}		
	}	
	
	// Calculate selfRelatedPartyCreditAmountPerFinal
	if(selfRelatedPartyCreditAmountFinal is known and finalCreditAmount is known) then{
		selfRelatedPartyCreditAmountPerFinal = (selfRelatedPartyCreditAmountFinal/finalCreditAmount)*100;
	}	
	// Calculate selfRelatedPartyCreditCountPerFinal
	if(selfRelatedPartyCreditCountFinal is known and finalCreditCount is known) then{
		selfRelatedPartyCreditCountPerFinal = (selfRelatedPartyCreditCountFinal/finalCreditCount)*100;
	}	
	// Calculate selfRelatedPartyDebitAmountPerFinal
	if(selfRelatedPartyDebitAmountFinal is known and finalDebitAmount is known) then{
		selfRelatedPartyDebitAmountPerFinal = (selfRelatedPartyDebitAmountFinal/finalDebitAmount)*100;
	}	
	// Calculate selfRelatedPartyDebitCountPerFinal
	if(selfRelatedPartyDebitCountFinal is known and finalDebitCount is known) then{
		selfRelatedPartyDebitCountPerFinal = (selfRelatedPartyDebitCountFinal/finalDebitCount)*100;
	}
	// Calculate highValueXnsCreditAmountPerFinal
	if(highValueXnsCreditAmountFinal is known and finalCreditAmount is known) then{
		highValueXnsCreditAmountPerFinal = (highValueXnsCreditAmountFinal/finalCreditAmount)*100;
	}
	// Calculate highValueXnsCreditCountPerFinal
	if(highValueXnsCreditCountFinal is known and finalCreditCount is known) then{
		highValueXnsCreditCountPerFinal = (highValueXnsCreditCountFinal/finalCreditCount)*100;
	}
	// Calculate highValueXnsDebitAmountPerFinal
	if(highValueXnsDebitAmountFinal is known and finalDebitAmount is known) then{
		highValueXnsDebitAmountPerFinal = (highValueXnsDebitAmountFinal/finalDebitAmount)*100;
	}
	// Calculate highValueXnsDebitCountPer
	if(highValueXnsDebitCountFinal is known and finalDebitCount is known) then{
		highValueXnsDebitCountPerFinal = (highValueXnsDebitCountFinal/finalDebitCount)*100;
	}
	// Calculate nonTradeXnsCreditAmountFinal
	if(nonTradeXnsAmountTotalBusinessCreditXnsFinal is known and finalCreditAmount is known) then{
		nonTradeXnsCreditAmountFinal = nonTradeXnsAmountTotalBusinessCreditXnsFinal - finalCreditAmount;
	}
	// Calculate nonTradeXnsCreditAmountPerFinal
	if(nonTradeXnsCreditAmountFinal is known and finalCreditAmount is known) then{
		nonTradeXnsCreditAmountPerFinal = (nonTradeXnsCreditAmountFinal/finalCreditAmount)*100;
	}
	// Calculate nonTradeXnsCreditCountFinal
	if(nonTradeXnsCountNumberOfBusinessCreditXnsFinal is known and finalCreditCount is known) then{
		nonTradeXnsCreditCountFinal = nonTradeXnsCountNumberOfBusinessCreditXnsFinal - finalCreditCount;
	}
	// Calculate nonTradeXnsCreditCountPerFinal
	if(nonTradeXnsCreditCountFinal is known and finalCreditCount is known) then{
		nonTradeXnsCreditCountPerFinal = (nonTradeXnsCreditCountFinal/finalCreditCount)*100;
	}
	// Calculate nonTradeXnsDebitAmountFinal
	if(nonTradeXnsAmountTotalBusinessDebitXnsFinal is known and finalDebitAmount is known) then{
		nonTradeXnsDebitAmountFinal = nonTradeXnsAmountTotalBusinessDebitXnsFinal - finalDebitAmount;
	}
	// Calculate nonTradeXnsDebitAmountPerFinal
	if(nonTradeXnsDebitAmountFinal is known and finalDebitAmount is known) then{
		nonTradeXnsDebitAmountPerFinal = (nonTradeXnsDebitAmountFinal/finalDebitAmount)*100;
	}
	// Calculate nonTradeXnsDebitCountFinal
	if(nonTradeXnsCountNumberOfBusinessDebitXnsFinal is known and finalDebitCount is known) then{
		nonTradeXnsDebitCountFinal = (nonTradeXnsCountNumberOfBusinessDebitXnsFinal - finalDebitCount);
	}
	// Calculate nonTradeXnsDebitCountPerFinal
	if(nonTradeXnsDebitCountFinal is known and finalDebitCount is known) then{
		nonTradeXnsDebitCountPerFinal = (nonTradeXnsDebitCountFinal/finalDebitCount)*100;
	}
	// Calculate finalCircularXnsAmountPer
	if(finalCircularXnsAmount is known) then{
		finalCircularXnsAmountPer = (finalCircularXnsAmount / (finalCreditAmount + finalDebitAmount))*100;
	}
	// Calculate finalCircularXnsCountPer
	if(finalCircularXnsCount is known) then{
		finalCircularXnsCountPer = (finalCircularXnsCount / (finalDebitCount + finalCreditCount))*100;
	}
	
	fn_AppendCalculatedVariable(message,"selfRelatedPartyCreditAmount", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(selfRelatedPartyCreditAmountFinal,-2) as a string);
	fn_AppendCalculatedVariable(message,"selfRelatedPartyCreditAmountPercent", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(selfRelatedPartyCreditAmountPerFinal,-2) as a string);
	fn_AppendCalculatedVariable(message,"selfRelatedPartyCreditCount", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(selfRelatedPartyCreditCountFinal,-2) as a string);
	fn_AppendCalculatedVariable(message,"selfRelatedPartyCreditCountPercent", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(selfRelatedPartyCreditCountPerFinal,-2) as a string);
	fn_AppendCalculatedVariable(message,"selfRelatedPartyDebitAmount", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(selfRelatedPartyDebitAmountFinal,-2) as a string);
	fn_AppendCalculatedVariable(message,"selfRelatedPartyDebitAmountPercent", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(selfRelatedPartyDebitAmountPerFinal,-2) as a string);
	fn_AppendCalculatedVariable(message,"selfRelatedPartyDebitCount", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(selfRelatedPartyDebitCountFinal,-2) as a string);
	fn_AppendCalculatedVariable(message,"selfRelatedPartyDebitCountPercent", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(selfRelatedPartyDebitCountPerFinal,-2) as a string);
	
	fn_AppendCalculatedVariable(message,"highValueXnsCreditAmount", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(highValueXnsCreditAmountFinal,-2) as a string);
	fn_AppendCalculatedVariable(message,"highValueXnsCreditAmountPercent", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(highValueXnsCreditAmountPerFinal,-2) as a string);
	fn_AppendCalculatedVariable(message,"highValueXnsCreditCount", "real", productCode, applicantId, applicantType, "TransactionAnalytics",highValueXnsCreditCountFinal as a string);
	fn_AppendCalculatedVariable(message,"highValueXnsCreditCountPercent", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(highValueXnsCreditCountPerFinal,-2) as a string);
	fn_AppendCalculatedVariable(message,"highValueXnsDebitAmount", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(highValueXnsDebitAmountFinal,-2) as a string);
	fn_AppendCalculatedVariable(message,"highValueXnsDebitAmountPercent", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(highValueXnsDebitAmountPerFinal,-2) as a string);
	fn_AppendCalculatedVariable(message,"highValueXnsDebitCount", "real", productCode, applicantId, applicantType, "TransactionAnalytics", highValueXnsDebitCountFinal as a string);
	fn_AppendCalculatedVariable(message,"highValueXnsDebitCountPercent", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(highValueXnsDebitCountPerFinal,-2) as a string);
	
	fn_AppendCalculatedVariable(message,"nonTradeXnsCreditAmount", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(nonTradeXnsCreditAmountFinal,-2) as a string);
	fn_AppendCalculatedVariable(message,"nonTradeXnsCreditAmountPercent", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(nonTradeXnsCreditAmountPerFinal,-2) as a string);
	fn_AppendCalculatedVariable(message,"nonTradeXnsCreditCount", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(nonTradeXnsCreditCountFinal,-2) as a string);
	fn_AppendCalculatedVariable(message,"nonTradeXnsCreditCountPercent", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(nonTradeXnsCreditCountPerFinal,-2) as a string);
	fn_AppendCalculatedVariable(message,"nonTradeXnsDebitAmount", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(nonTradeXnsDebitAmountFinal,-2) as a string);
	fn_AppendCalculatedVariable(message,"nonTradeXnsDebitAmountPercent", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(nonTradeXnsDebitAmountPerFinal,-2) as a string);
	fn_AppendCalculatedVariable(message,"nonTradeXnsDebitCount", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(nonTradeXnsDebitCountFinal,-2) as a string);
	fn_AppendCalculatedVariable(message,"nonTradeXnsDebitCountPercent", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(nonTradeXnsDebitCountPerFinal,-2) as a string);
	
	fn_AppendCalculatedVariable(message,"CircularXnsAmount", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(finalCircularXnsAmount,-2) as a string);
	fn_AppendCalculatedVariable(message,"CircularXnsAmountPercent", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(finalCircularXnsAmountPer,-2) as a string);
	fn_AppendCalculatedVariable(message,"CircularXnsCount", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(finalCircularXnsCount,-2) as a string);
	fn_AppendCalculatedVariable(message,"finalCircularXnsCountPercent", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(finalCircularXnsCountPer,-2) as a string);
	
  print("selfRelatedPartyCreditAmountFinal--------------------------------->"selfRelatedPartyCreditAmountFinal);
  print("selfRelatedPartyCreditAmountPerFinal--------------------------------->"selfRelatedPartyCreditAmountPerFinal);
  print("selfRelatedPartyCreditCountFinal--------------------------------->"selfRelatedPartyCreditCountFinal);
  print("selfRelatedPartyCreditCountPerFinal--------------------------------->"selfRelatedPartyCreditCountPerFinal);
  print("selfRelatedPartyDebitAmountFinal--------------------------------->"selfRelatedPartyDebitAmountFinal);
  print("selfRelatedPartyDebitAmountPerFinal--------------------------------->"selfRelatedPartyDebitAmountPerFinal);
  print("selfRelatedPartyDebitCountFinal--------------------------------->"selfRelatedPartyDebitCountFinal);
  print("selfRelatedPartyDebitCountPerFinal--------------------------------->"selfRelatedPartyDebitCountPerFinal);
  
  print("nonTradeXnsCreditAmountFinal--------------------------------->"nonTradeXnsCreditAmountFinal);
  print("nonTradeXnsCreditAmountPerFinal--------------------------------->"nonTradeXnsCreditAmountPerFinal);
  print("nonTradeXnsCreditCountFinal--------------------------------->"nonTradeXnsCreditCountFinal);
  print("nonTradeXnsCreditCountPerFinal--------------------------------->"nonTradeXnsCreditCountPerFinal);
  print("nonTradeXnsDebitAmountFinal--------------------------------->"nonTradeXnsDebitAmountFinal);
  print("nonTradeXnsDebitAmountPerFinal--------------------------------->"nonTradeXnsDebitAmountPerFinal);
  print("nonTradeXnsDebitCountFinal--------------------------------->"nonTradeXnsDebitCountFinal);
  print("nonTradeXnsDebitCountPerFinal--------------------------------->"nonTradeXnsDebitCountPerFinal);
  
  print("finalCircularXnsAmount--------------------------------->"finalCircularXnsAmount);
  print("finalCircularXnsAmountPer--------------------------------->"finalCircularXnsAmountPer);
  print("finalCircularXnsCount--------------------------------->"finalCircularXnsCount);
  print("finalCircularXnsCountPer--------------------------------->"finalCircularXnsCountPer);
	}
	
}catch an Exception with{
	aBlazeApplication.fn_Perfios_TransactionAnalytics = true;  
	print("\n***Exception :: \n>>@@@<<\n" evaluationException().toString()"\n>>@@@<<\n");  
}
print("++++> Exiting function :: fn_Perfios_TransactionAnalytics");
print("");]]></value>
 </instance>
 <instance ref='CommentsVH'>
  <value></value>
 </instance>
 <instance ref='FunctionParametersVH'>
  <instance-list ref='ParametersVH'>
   <item template='DRNZKQyw5rcjBd4Yxo6FN649lWN.template1' id='6M7Vqz'>
    <instance ref='ParameterNameVH'>
     <value>message</value>
    </instance>
    <instance ref='ParameterTypeVH'>
     <value>Message</value>
    </instance>
   </item>
   <item template='DRNZKQyw5rcjBd4Yxo6FN649lWN.template1' id='IDpuLd'>
    <instance ref='ParameterNameVH'>
     <value>perfiosData</value>
    </instance>
    <instance ref='ParameterTypeVH'>
     <value>PerfiosData</value>
    </instance>
   </item>
   <item template='DRNZKQyw5rcjBd4Yxo6FN649lWN.template1' id='Kbwshk'>
    <instance ref='ParameterNameVH'>
     <value>aBlazeApplicant</value>
    </instance>
    <instance ref='ParameterTypeVH'>
     <value>BlazeApplicant</value>
    </instance>
   </item>
  </instance-list>
 </instance>
</instantiation>