<?xml version='1.0' encoding='UTF-8'?>
<instantiation xmlns='http://www.blazesoft.com/instantiation' template='Q8jH6kHdOYIZ1uG0WKXqvvejqv0' name='fn_Perfios_PoorBankingBehaviour'>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='1VBfZr8g32Q2FnSWcWO9txQWwEE' name='Instance' id='Instance'>
 </instantiation>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='18uqQPJXnTmKrAiLEOVcQMUAFmD' name='Entry' id='Entry'>
  <instance ref='Source Reference'>
   <instance ref='value'>
    <instance ref='locationVH'>
     <value></value>
    </instance>
    <instance ref='repositoryNameVH'>
     <value></value>
    </instance>
    <instance ref='versionVH'>
     <value></value>
    </instance>
    <instance ref='filterVH'>
     <value></value>
    </instance>
    <instance ref='releaseDateVH'>
     <value></value>
    </instance>
    <instance ref='repositoryAccessVH'>
     <value></value>
    </instance>
   </instance>
  </instance>
  <instance ref='Predictive Model Type'>
   <instance ref='value'>
    <value>NotApplicable</value>
   </instance>
  </instance>
 </instantiation>
 <instance ref='__ENTITY_PROPERTIES__VH__'>
  <instance ref='Test Role'>
   <instance ref='value'>
    <value>None</value>
   </instance>
  </instance>
  <instance ref='Test Case'>
   <instance ref='value'>
    <value></value>
   </instance>
  </instance>
 </instance>
 <instance ref='InstanceName'>
  <value></value>
 </instance>
 <instance ref='UniqueInstanceNameVH'>
  <value>fn_Perfios_PoorBankingBehaviour1</value>
 </instance>
 <instance ref='FunctionNameVH'>
  <value>fn_Perfios_PoorBankingBehaviour</value>
 </instance>
 <instance ref='FunctionReturnType'>
  <value>void</value>
 </instance>
 <instance ref='FunctionBodyVH'>
  <value><![CDATA[//try catch on application level?
print("Entering in fn_Perfios_PoorBankingBehaviour");
//local variable initiallixation
aBlazeApplication is some BlazeApplication initially BTCommonVar.termInput.blazeApplication as a BlazeApplication;
try{
	
// --------------- Variable initiallization -------------------
accAnalysisArrCount is an integer initially 0;
emiAmount is a real initially 0;
avgBBTotal is a real initially 0;

abbRateTotal is a real initially 0;
bounceCountTotal is a real initially 0;
overDrawnCountTotal is a real initially 0;
penalChargesCountTotal is a real initially 0;
inwardChqBncRateTotal is a real initially 0;
totalBusinessCreditCount is a real initially 0;
totalBusinessDebitCount is a real initially 0;
totalAverageLimitUtilization is a real initially 0;
totalCashDepositToTotalCreditPercent is a real initially 0;

// --------------------- Total Flag initiallization -------------------

totalBusinessCreditCountFlag is a string initially "";
totalBusinessDebitCountFlag is a string initially "";
totalAverageLimitUtilizationFlag is a string initially "";
totalCashDepositToTotalCreditPercentFlag is a string initially "";
abbRateFlagTotal is a string initially "";
inwardChqBncFlagTotal is a string initially "";
bounceFlagTotal is a string initially "";
overDrawnFlagTotal is a string initially "";
penalChargesFlagTotal is a string initially "";

productCode is a string;
productCode = message.invocation.decisionService;

applicantId is a string;
applicantType is a string;
applicantId = aBlazeApplicant.customerCif as a string;
applicantType = aBlazeApplicant.applicantType;
print("applicantId------------> "applicantId);
print("applicantType------------> "applicantType);

// Create Object of BlazeAccountAnalysis for Combined Calculations
blazeAccountAnalysis is some BlazeAccountAnalysis initially a BlazeAccountAnalysis;
blazeAccountAnalysis.blazeMonthlyDetailArray = an array of BlazeMonthlyDetail;
blazeAccountAnalysis.blazeMonthlyDataArray = an array of BlazeMonthlyData;

if(perfiosData.data.accountAnalysis is known and perfiosData.data.accountAnalysis is not null)then{
	accAnalysisArrCount = perfiosData.data.accountAnalysis.count;
}

//assigning payment amount to local var emiAmount
if((BTCommonVar.termInput.blazeApplication.loanBasicDetail is known) and (BTCommonVar.termInput.blazeApplication.loanBasicDetail.paymentDetails is not null) and (BTCommonVar.termInput.blazeApplication.loanBasicDetail.paymentDetails.paymentAmount is known))then{
		emiAmount =  BTCommonVar.termInput.blazeApplication.loanBasicDetail.paymentDetails.paymentAmount;
}

// ----------------------- Account Analysis Loop Start ------------------------  
if(perfiosData.data.accountAnalysis is known)then{
	i is an integer initially 0;
	while(i < accAnalysisArrCount) do{
		print("------------------- Enter in Account Analysis Array ----------------");
		j is an integer initially 0;
		monthCount is an integer initially 0;
		sixMonthDetails is an integer initially 0;
		twelveMonthDetails is an integer initially 0;
		
		avgBB is a real initially 0;
		inwChqBounce is a real initially 0;
		chqIssue is a real initially 0;
		
		abbRate is a real initially 0;
		abbRateFlag is a string initially "";
		bounceCount is a real initially 0;
		bounceFlag is a string initially "";
		overDrawnCount is a real initially 0;
		overDrawnFlag is a string initially "";
		penalChargesCount is a real initially 0;
		penalChargesFlag is a string initially "";
		inwardChqBncRate is a real initially 0;
		inwardChqBncFlag is a string initially "";
		avgUtilization is a real initially 0;
		cashDepositToCredit is a real initially 0;
		businessCreditCount is a real initially 0;
		businessDebitCount is a real initially 0;
		avgUtilizationFlag is a string initially "";
		cashDepositToCreditFlag is a string initially "";
		businessCreditFlag is a string initially "";
		businessDebitFlag is a string initially "";
	
		if(perfiosData.data.accountAnalysis[i].monthlyDetails is not null)then{
			sixMonthDetails = perfiosData.data.accountAnalysis[i].monthlyDetails.count - 6;
			twelveMonthDetails = perfiosData.data.accountAnalysis[i].monthlyDetails.count - 12;

		    if(sixMonthDetails < 0)then{
			    sixMonthDetails = 0;
		    }
		    if(twelveMonthDetails < 0)then{
			    twelveMonthDetails = 0;
		    }
	
		    // ------------------- MonthlyDetail Loop Start -----------------------------
		    for each MonthlyDetail in perfiosData.data.accountAnalysis[i].monthlyDetails such that(it is not null) do{
			    print("------------------- Enter in MonthlyDetail Array ----------------");
			    aMonthlyDetail is some MonthlyDetail initially it as a MonthlyDetail;
		        aBlazeMonthlyDetail is some BlazeMonthlyDetail initially a BlazeMonthlyDetail;
				    
			    //Condition to satisfy for only last 06 objects/months
			    if( monthCount >= sixMonthDetails )then{
				    //Average bank balance
				    if(aMonthlyDetail.balAvg is known)then{
					    // Sum all balAvg for calculate Average Bank balance for Particular Account
					    avgBB = avgBB + aMonthlyDetail.balAvg;
				    }
				    //Emi bounce count
				    if(aMonthlyDetail.totalInwEMIBounce is known and aMonthlyDetail.totalInwEMIBounce <> 0)then{
					    // calculate EMI Bounce for Particular Account
					    bounceCount = bounceCount + 1;
				    }
				    //Over Drawn count
				    if(aMonthlyDetail.overdrawnInstances is known)then{
					    // Sum all overdrawnInstances for calculate Overdrawn for Particular Account
					    overDrawnCount  = overDrawnCount + aMonthlyDetail.overdrawnInstances;
				    }

				    // Calculation for combined variables 
					if(i=0) then {
					    aBlazeMonthlyDetail.monthName = aMonthlyDetail.monthName;
					    aBlazeMonthlyDetail.balAvg = 0;
						aBlazeMonthlyDetail.totalInwEMIBounce=0;
						aBlazeMonthlyDetail.totalInwEMIBounce=0;
						
					    if(aMonthlyDetail.balAvg is known) then {
				            aBlazeMonthlyDetail.balAvg = aMonthlyDetail.balAvg;
				        }   
						if(aMonthlyDetail.totalInwEMIBounce is known)then{
							aBlazeMonthlyDetail.totalInwEMIBounce = aMonthlyDetail.totalInwEMIBounce;
						}
						if(aMonthlyDetail.overdrawnInstances is known)then{
							aBlazeMonthlyDetail.totalInwEMIBounce = aMonthlyDetail.overdrawnInstances;
						}
					}
					else { 
					    if(aMonthlyDetail.balAvg is known) then {
						    blazeAccountAnalysis.blazeMonthlyDetailArray[j].balAvg = blazeAccountAnalysis.blazeMonthlyDetailArray[j].balAvg + aMonthlyDetail.balAvg;
					    }
						if(aMonthlyDetail.totalInwEMIBounce is known)then{
							blazeAccountAnalysis.blazeMonthlyDetailArray[j].totalInwEMIBounce = blazeAccountAnalysis.blazeMonthlyDetailArray[j].totalInwEMIBounce + aMonthlyDetail.totalInwEMIBounce;
						}
						if(aMonthlyDetail.overdrawnInstances is known)then{
						    blazeAccountAnalysis.blazeMonthlyDetailArray[j].overdrawnInstances = blazeAccountAnalysis.blazeMonthlyDetailArray[j].overdrawnInstances + aMonthlyDetail.overdrawnInstances;
					    }
					}
			    }
		
			    //Condition to satisfy for only last 12 objects/months
			    if( monthCount >= twelveMonthDetails and aMonthlyDetail.penalCharges is known)then{
				    // Sum all penalCharges for calculate Penal Charges for Particular Account
				    penalChargesCount = penalChargesCount + aMonthlyDetail.penalCharges;
				
				    //Combined Penal Charges
				    if(i=0)then{
						aBlazeMonthlyDetail.penalCharges=0;
					    if(aMonthlyDetail.penalCharges is known) then {
					        aBlazeMonthlyDetail.penalCharges = aMonthlyDetail.penalCharges;
					    }
						blazeAccountAnalysis.blazeMonthlyDetailArray.append(aBlazeMonthlyDetail);
				    }
				    else {
					    if(aMonthlyDetail.penalCharges is known)then{
					        blazeAccountAnalysis.blazeMonthlyDetailArray[j].penalCharges = blazeAccountAnalysis.blazeMonthlyDetailArray[j].penalCharges + aMonthlyDetail.penalCharges;
				        }
				    }
			    }
			    j=j+1;
			    monthCount += 1;
		    }
		    print("------------------- Exit in MonthlyDetail Array ----------------");
		    // ------------------- MonthlyDetail Loop Ends -----------------------------
		}
	
		// ################### Calculating Inward Cheque Bounces Start ############################
		if(perfiosData.data.accountAnalysis[i].summaryInfo is known and perfiosData.data.accountAnalysis[i].summaryInfo.total is known) then{
			if(perfiosData.data.accountAnalysis[i].summaryInfo.total.inwChqBounces is known) then {
				// inwChqBounce is for particular account
				inwChqBounce = perfiosData.data.accountAnalysis[i].summaryInfo.total.inwChqBounces;
				
				// Combined inwChqBounces
				if(i=0) then {
					blazeAccountAnalysis.inwChqBounces = 0;
				}
				blazeAccountAnalysis.inwChqBounces = blazeAccountAnalysis.inwChqBounces + perfiosData.data.accountAnalysis[i].summaryInfo.total.inwChqBounces;
			}
			if(perfiosData.data.accountAnalysis[i].summaryInfo.total.chqIssues is known) then{
				// Combined chqIssues is for particular account
				chqIssue = perfiosData.data.accountAnalysis[i].summaryInfo.total.chqIssues;
				
				// Combined chqIssues
				if(i=0) then {
					blazeAccountAnalysis.chqIssues = 0;
				}
				blazeAccountAnalysis.chqIssues = blazeAccountAnalysis.chqIssues + perfiosData.data.accountAnalysis[i].summaryInfo.total.chqIssues;;
			}
		}
		
		// Calculate inward Cheque Bounce rate 
		if(inwChqBounce is known and chqIssue is known and chqIssue>0)then{
			inwardChqBncRate = math().round(inwChqBounce / chqIssue, -2);
		}
		// ################### Calculating Inward Cheque Bounces End ############################
		
		// ####################### Average Bank Balance Start ################################
		// Calculate Average Bank Balance
		avgBB = avgBB/6;
		
		// Calculate abbRate
		if(emiAmount is known and emiAmount>0)then{
			abbRate = math().round(avgBB/emiAmount, -2);
		}
		// ####################### Average Bank Balance End ##################################
		
		//Abb Rate Flag
		if(abbRate < 1)then{
			abbRateFlag = "Red";
		}
		else{
			abbRateFlag = "Green";
		}
		// EMI Bounce Flag
		if(bounceCount >= 2)then{
			bounceFlag = "Red"
		}
		else{
			bounceFlag = "Green"
		}
		//Over Drwan Flag
		if(overDrawnCount >= 1)then{
			overDrawnFlag = "Red"
		}
		else{
		overDrawnFlag = "Green"
		}
		//Penal Charges Flag
		if(penalChargesCount >= 1)then{
			penalChargesFlag = "Red"
		}
		else{
			penalChargesFlag = "Green"
		}
		//Inward cheque Balance Flag
		if(inwardChqBncRate >= 1)then{
			inwardChqBncFlag = "Red"
		}
		else{
			inwardChqBncFlag = "Green"
		}
		
		fn_AppendCalculatedVariable(message, "abbRate", "real", productCode, applicantId, applicantType, "PoorBanking_"i, abbRate","abbRateFlag);
		fn_AppendCalculatedVariable(message, "inwardChqBncRate", "real", productCode, applicantId, applicantType, "PoorBanking_"i, inwardChqBncRate","inwardChqBncFlag);
		fn_AppendCalculatedVariable(message, "bounceCount", "real", productCode, applicantId, applicantType, "PoorBanking_"i, bounceCount","bounceFlag);
		fn_AppendCalculatedVariable(message, "overDrawnCount", "real", productCode, applicantId, applicantType, "PoorBanking_"i, overDrawnCount","overDrawnFlag);
		fn_AppendCalculatedVariable(message, "penalChargesCount", "real", productCode, applicantId, applicantType, "PoorBanking_"i, penalChargesCount","penalChargesFlag);
		
		print("abbRate----------------------------------->"abbRate","abbRateFlag);
		print("inwardChqBncRate----------------------------------->"inwardChqBncRate","inwardChqBncFlag);
		print("bounceCount----------------------------------->"bounceCount","bounceFlag);
		print("overDrawnCount----------------------------------->"overDrawnCount","overDrawnFlag);
		print("penalChargesCount----------------------------------->"penalChargesCount","penalChargesFlag);
		
		j=0;
		if(i = 0 and perfiosData.data.additionalMonthlyDetails is known and perfiosData.data.additionalMonthlyDetails.monthlyData1 is known) then{
			monthlyDataCountMonData1 is an integer initially 0;
			sixMonthDataMonData1 is an integer initially 0;
			twelveMonthDataMonData1 is an integer initially 0;
			
			//Latest month Data
			sixMonthDataMonData1 = perfiosData.data.additionalMonthlyDetails.monthlyData1.count - 6;
			twelveMonthDataMonData1 = perfiosData.data.additionalMonthlyDetails.monthlyData1.count - 12; 
			if(sixMonthDataMonData1<0)then{
				sixMonthDataMonData1 = 0;
			}
			if(twelveMonthDataMonData1<0)then{
				twelveMonthDataMonData1 =0;
			}
				
		    for each MonthlyData in perfiosData.data.additionalMonthlyDetails.monthlyData1 such that (it is not null) do{
				aBlazeMonthlyData is some BlazeMonthlyData initially a BlazeMonthlyData;
				// Calculation for Combined variables
				aBlazeMonthlyData.numberOfBusinessCreditTxns = 0;	
                aBlazeMonthlyData.numberOfBusinessDebitTxns = 0;
				aBlazeMonthlyData.averageLimitUtilization=0;
				aBlazeMonthlyData.cashDepositToTotalCreditPercent=0;
				
				if(monthlyDataCountMonData1 >= sixMonthDataMonData1 and it.averageLimitUtilization is known )then{
					avgUtilization = avgUtilization + it.averageLimitUtilization;
					aBlazeMonthlyData.averageLimitUtilization = it.averageLimitUtilization;
				}
				if( monthlyDataCountMonData1 >= twelveMonthDataMonData1)then{
				    //cash deposit
					if(it.cashDepositToTotalCreditPercent is known)then{
						cashDepositToCredit = cashDepositToCredit + it.cashDepositToTotalCreditPercent;
						aBlazeMonthlyData.cashDepositToTotalCreditPercent = it.cashDepositToTotalCreditPercent;
					}
					//Business Credit Count
					if(it.numberOfBusinessCreditTxns is known)then{
						businessCreditCount = businessCreditCount + it.numberOfBusinessCreditTxns;
						aBlazeMonthlyData.numberOfBusinessCreditTxns = it.numberOfBusinessCreditTxns;
					}
					//Business Debit Count
				    if(it.numberOfBusinessDebitTxns is known)then{
						businessDebitCount = businessDebitCount + it.numberOfBusinessDebitTxns;
						aBlazeMonthlyData.numberOfBusinessDebitTxns = it.numberOfBusinessDebitTxns;
					}
				}
				monthlyDataCountMonData1 = monthlyDataCountMonData1 + 1;
			    blazeAccountAnalysis.blazeMonthlyDataArray.append(aBlazeMonthlyData);
				j = j + 1;
			}
			// Average Limit Utilization Count
			avgUtilization = math().round(avgUtilization/6, -2);
			//Average Cash deposit
			cashDepositToCredit = math().round(cashDepositToCredit/12,-2);
			
			//Average Utilization Flag
			if(avgUtilization >= 95)then{
				avgUtilizationFlag = "Red"
			}
			else{
				avgUtilizationFlag = "Green"
			}
			//Cash Deposit Flag
			if(cashDepositToCredit > 10)then{
				cashDepositToCreditFlag = "Red"
			}
			else{
				cashDepositToCreditFlag = "Green"
			}
			//Business Credit Flag
			if(businessCreditCount < 60)then{
				businessCreditFlag = "Red"
			}
			else{
				businessCreditFlag = "Green"
			}
			//Business Debit Flag
			if(businessDebitCount < 60)then{
				businessDebitFlag = "Red"
			}
			else{
				businessDebitFlag = "Green"
			}
		}
		
		else if(i = 1 and perfiosData.data.additionalMonthlyDetails is known and perfiosData.data.additionalMonthlyDetails.monthlyData2 is known) then{
			monthlyDataCountMonData2 is an integer initially 0;
			sixMonthDataMonData2 is an integer initially 0;
			twelveMonthDataMonData2 is an integer initially 0;
			
			//Latest month Data
			sixMonthDataMonData2 = perfiosData.data.additionalMonthlyDetails.monthlyData2.count - 6;
			twelveMonthDataMonData2 = perfiosData.data.additionalMonthlyDetails.monthlyData2.count - 12; 
			if(sixMonthDataMonData2<0)then{
				sixMonthDataMonData2 = 0;
			}
			if(twelveMonthDataMonData2<0)then{
				twelveMonthDataMonData2 =0;
			}
				
			for each MonthlyData in perfiosData.data.additionalMonthlyDetails.monthlyData2 such that (it is not null) do{
				if(monthlyDataCountMonData2 >= sixMonthDataMonData2 and it.averageLimitUtilization is known)then{
					avgUtilization = avgUtilization + it.averageLimitUtilization;
					blazeAccountAnalysis.blazeMonthlyDataArray[j].averageLimitUtilization = blazeAccountAnalysis.blazeMonthlyDataArray[j].averageLimitUtilization + it.averageLimitUtilization;
				}
				if( monthlyDataCountMonData2 >= twelveMonthDataMonData2 )then{
					//cash deposit
					if(it.cashDepositToTotalCreditPercent is known)then{
						cashDepositToCredit = cashDepositToCredit + it.cashDepositToTotalCreditPercent;
						blazeAccountAnalysis.blazeMonthlyDataArray[j].cashDepositToTotalCreditPercent = blazeAccountAnalysis.blazeMonthlyDataArray[j].cashDepositToTotalCreditPercent + it.cashDepositToTotalCreditPercent;
					}
					//Business Credit Count
					if(it.numberOfBusinessCreditTxns is known)then{
						businessCreditCount = businessCreditCount + it.numberOfBusinessCreditTxns;
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns + it.numberOfBusinessCreditTxns;
					}
					if(it.numberOfBusinessDebitTxns is known)then{
						businessDebitCount = businessDebitCount + it.numberOfBusinessDebitTxns;
						//Business Debit Count
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns + it.numberOfBusinessDebitTxns;
					}
				}
				monthlyDataCountMonData2 = monthlyDataCountMonData2 + 1;
				j = j + 1;
			}
			// Average Limit Utilization Count
			avgUtilization = math().round(avgUtilization/6, -2);
			//Average Cash deposit
			cashDepositToCredit = math().round(cashDepositToCredit/12,-2);
			
			//Average Utilization Flag
			if(avgUtilization >= 95)then{
				avgUtilizationFlag = "Red"
			}
			else{
				avgUtilizationFlag = "Green"
			}
			//Cash Deposit Flag
			if(cashDepositToCredit > 10)then{
				cashDepositToCreditFlag = "Red"
			}
			else{
				cashDepositToCreditFlag = "Green"
			}
			//Business Credit Flag
			if(businessCreditCount < 60)then{
				businessCreditFlag = "Red"
			}
			else{
				businessCreditFlag = "Green"
			}
			//Business Debit Flag
			if(businessDebitCount < 60)then{
				businessDebitFlag = "Red"
			}
			else{
				businessDebitFlag = "Green"
			}
		}
		
		else if(i = 2 and perfiosData.data.additionalMonthlyDetails is known and perfiosData.data.additionalMonthlyDetails.monthlyData3 is known)then{
			monthlyDataCountMonData3 is an integer initially 0;
			sixMonthDataMonData3 is an integer initially 0;
			twelveMonthDataMonData3 is an integer initially 0;
			
			//Latest month Data
			sixMonthDataMonData3 = perfiosData.data.additionalMonthlyDetails.monthlyData3.count - 6;
			twelveMonthDataMonData3 = perfiosData.data.additionalMonthlyDetails.monthlyData3.count - 12; 
		    if(sixMonthDataMonData3<0)then{
				sixMonthDataMonData3 = 0;
			}
		    if(twelveMonthDataMonData3<0)then{
			    twelveMonthDataMonData3 =0;
			}
			
			for each MonthlyData in perfiosData.data.additionalMonthlyDetails.monthlyData3 such that (it is not null) do{
				if(monthlyDataCountMonData3 >= sixMonthDataMonData3 and it.averageLimitUtilization is known)then{
					avgUtilization = avgUtilization + it.averageLimitUtilization;
					blazeAccountAnalysis.blazeMonthlyDataArray[j].averageLimitUtilization = blazeAccountAnalysis.blazeMonthlyDataArray[j].averageLimitUtilization + it.averageLimitUtilization;
				}
				if( monthlyDataCountMonData3 >= twelveMonthDataMonData3)then{
					//cash deposit
					if(it.cashDepositToTotalCreditPercent is known)then{
						cashDepositToCredit = cashDepositToCredit + it.cashDepositToTotalCreditPercent;
						blazeAccountAnalysis.blazeMonthlyDataArray[j].cashDepositToTotalCreditPercent = blazeAccountAnalysis.blazeMonthlyDataArray[j].cashDepositToTotalCreditPercent + it.cashDepositToTotalCreditPercent;
					}
					//Business Credit Count
					if(it.numberOfBusinessCreditTxns is known)then{
						businessCreditCount = businessCreditCount + it.numberOfBusinessCreditTxns;
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns + it.numberOfBusinessCreditTxns;
					}
					if(it.numberOfBusinessDebitTxns is known)then{
						businessDebitCount = businessDebitCount + it.numberOfBusinessDebitTxns;
						//Business Debit Count
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns + it.numberOfBusinessDebitTxns;
					}
				}
				monthlyDataCountMonData3 = monthlyDataCountMonData3 + 1;
				j = j+1;
			}
			// Average Limit Utilization Count
			avgUtilization = math().round(avgUtilization/6, -2);
			//Average Cash deposit
			cashDepositToCredit = math().round(cashDepositToCredit/12,-2);
			
			//Average Utilization Flag
			if(avgUtilization >= 95)then{
				avgUtilizationFlag = "Red"
			}
			else{
				avgUtilizationFlag = "Green"
			}
			//Cash Deposit Flag
			if(cashDepositToCredit > 10)then{
				cashDepositToCreditFlag = "Red"
			}
			else{
				cashDepositToCreditFlag = "Green"
			}
			//Business Credit Flag
			if(businessCreditCount < 60)then{
				businessCreditFlag = "Red"
			}
			else{
				businessCreditFlag = "Green"
			}
			//Business Debit Flag
			if(businessDebitCount < 60)then{
				businessDebitFlag = "Red"
			}
			else{
				businessDebitFlag = "Green"
			}
		}
		
		else if(i = 3 and perfiosData.data.additionalMonthlyDetails is known and perfiosData.data.additionalMonthlyDetails.monthlyData4 is known)then{
			monthlyDataCountMonData4 is an integer initially 0;
			sixMonthDataMonData4 is an integer initially 0;
			twelveMonthDataMonData4 is an integer initially 0;
			
			//Latest month Data
			sixMonthDataMonData4 = perfiosData.data.additionalMonthlyDetails.monthlyData4.count - 6;
			twelveMonthDataMonData4 = perfiosData.data.additionalMonthlyDetails.monthlyData4.count - 12; 
			if(sixMonthDataMonData4<0)then{
			    sixMonthDataMonData4 = 0;
			}
			if(twelveMonthDataMonData4<0)then{
				twelveMonthDataMonData4 =0;
			}
				
			for each MonthlyData in perfiosData.data.additionalMonthlyDetails.monthlyData4 such that (it is not null) do{
				if(monthlyDataCountMonData4 >= sixMonthDataMonData4 and it.averageLimitUtilization is known)then{
					avgUtilization = avgUtilization + it.averageLimitUtilization;
					blazeAccountAnalysis.blazeMonthlyDataArray[j].averageLimitUtilization = blazeAccountAnalysis.blazeMonthlyDataArray[j].averageLimitUtilization + it.averageLimitUtilization;
				}
				if( monthlyDataCountMonData4 >= twelveMonthDataMonData4 )then{
					//cash deposit
					if(it.cashDepositToTotalCreditPercent is known)then{
						cashDepositToCredit = cashDepositToCredit + it.cashDepositToTotalCreditPercent;
						blazeAccountAnalysis.blazeMonthlyDataArray[j].cashDepositToTotalCreditPercent = blazeAccountAnalysis.blazeMonthlyDataArray[j].cashDepositToTotalCreditPercent + it.cashDepositToTotalCreditPercent;
					}
					//Business Credit Count
					if(it.numberOfBusinessCreditTxns is known)then{
						businessCreditCount = businessCreditCount + it.numberOfBusinessCreditTxns;
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns + it.numberOfBusinessCreditTxns;
					}
					if(it.numberOfBusinessDebitTxns is known)then{
						businessDebitCount = businessDebitCount + it.numberOfBusinessDebitTxns;
						//Business Debit Count
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns + it.numberOfBusinessDebitTxns;
					}
				}
				monthlyDataCountMonData4 = monthlyDataCountMonData4 + 1;
				j = j+1;
			}
			// Average Limit Utilization Count
			avgUtilization = math().round(avgUtilization/6, -2);
			//Average Cash deposit
			cashDepositToCredit = math().round(cashDepositToCredit/12,-2);
			
			//Average Utilization Flag
			if(avgUtilization >= 95)then{
				avgUtilizationFlag = "Red"
			}
			else{
				avgUtilizationFlag = "Green"
			}
			//Cash Deposit Flag
			if(cashDepositToCredit > 10)then{
				cashDepositToCreditFlag = "Red"
			}
			else{
				cashDepositToCreditFlag = "Green"
			}
			//Business Credit Flag
			if(businessCreditCount < 60)then{
				businessCreditFlag = "Red"
			}
			else{
				businessCreditFlag = "Green"
			}
			//Business Debit Flag
			if(businessDebitCount < 60)then{
				businessDebitFlag = "Red"
			}
			else{
				businessDebitFlag = "Green"
			}
		}
		
		else if(i = 4 and perfiosData.data.additionalMonthlyDetails is known and perfiosData.data.additionalMonthlyDetails.monthlyData5 is known)then{
			monthlyDataCountMonData5 is an integer initially 0;
			sixMonthDataMonData5 is an integer initially 0;
			twelveMonthDataMonData5 is an integer initially 0;
			
			//Latest month Data
			sixMonthDataMonData5 = perfiosData.data.additionalMonthlyDetails.monthlyData5.count - 6;
			twelveMonthDataMonData5 = perfiosData.data.additionalMonthlyDetails.monthlyData5.count - 12; 
			if(sixMonthDataMonData5<0)then{
				sixMonthDataMonData5 = 0;
			}
			if(twelveMonthDataMonData5<0)then{
				twelveMonthDataMonData5 =0;
			}
			
			for each MonthlyData in perfiosData.data.additionalMonthlyDetails.monthlyData5 such that (it is not null) do{
				if(monthlyDataCountMonData5 >= sixMonthDataMonData5 and it.averageLimitUtilization is known )then{
					avgUtilization = avgUtilization + it.averageLimitUtilization;
					blazeAccountAnalysis.blazeMonthlyDataArray[j].averageLimitUtilization = blazeAccountAnalysis.blazeMonthlyDataArray[j].averageLimitUtilization + it.averageLimitUtilization;
				}
				if( monthlyDataCountMonData5 >= twelveMonthDataMonData5 )then{
					//cash deposit
					if(it.cashDepositToTotalCreditPercent is known)then{
						cashDepositToCredit = cashDepositToCredit + it.cashDepositToTotalCreditPercent;
						blazeAccountAnalysis.blazeMonthlyDataArray[j].cashDepositToTotalCreditPercent = blazeAccountAnalysis.blazeMonthlyDataArray[j].cashDepositToTotalCreditPercent + it.cashDepositToTotalCreditPercent;
					}
					//Business Credit Count
					if(it.numberOfBusinessCreditTxns is known)then{
						businessCreditCount = businessCreditCount + it.numberOfBusinessCreditTxns;
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns + it.numberOfBusinessCreditTxns;
					}
					if(it.numberOfBusinessDebitTxns is known)then{
						businessDebitCount = businessDebitCount + it.numberOfBusinessDebitTxns;
						//Business Debit Count
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns + it.numberOfBusinessDebitTxns;
					}
				}
				monthlyDataCountMonData5 = monthlyDataCountMonData5 + 1;
				j = j+1;
			}
			// Average Limit Utilization Count
			avgUtilization = math().round(avgUtilization/6, -2);
			//Average Cash deposit
			cashDepositToCredit = math().round(cashDepositToCredit/12,-2);
			
			//Average Utilization Flag
			if(avgUtilization >= 95)then{
				avgUtilizationFlag = "Red"
			}
			else{
				avgUtilizationFlag = "Green"
			}
			//Cash Deposit Flag
			if(cashDepositToCredit > 10)then{
				cashDepositToCreditFlag = "Red"
			}
			else{
				cashDepositToCreditFlag = "Green"
			}
			//Business Credit Flag
			if(businessCreditCount < 60)then{
				businessCreditFlag = "Red"
			}
			else{
				businessCreditFlag = "Green"
			}
			//Business Debit Flag
			if(businessDebitCount < 60)then{
				businessDebitFlag = "Red"
			}
			else{
				businessDebitFlag = "Green"
			}
		}
		
		else if(i = 5 and perfiosData.data.additionalMonthlyDetails is known and perfiosData.data.additionalMonthlyDetails.monthlyData6 is known)then{
			monthlyDataCountMonData6 is an integer initially 0;
			sixMonthDataMonData6 is an integer initially 0;
			twelveMonthDataMonData6 is an integer initially 0;
			
			sixMonthDataMonData6 = perfiosData.data.additionalMonthlyDetails.monthlyData6.count - 6;
			twelveMonthDataMonData6 = perfiosData.data.additionalMonthlyDetails.monthlyData6.count - 12; 
			if(sixMonthDataMonData6<0)then{
				sixMonthDataMonData6 = 0;
			}
			if(twelveMonthDataMonData6<0)then{
				twelveMonthDataMonData6 =0;
			}
				
			for each MonthlyData in perfiosData.data.additionalMonthlyDetails.monthlyData6 such that (it is not null) do{
				if(monthlyDataCountMonData6 >= sixMonthDataMonData6 and it.averageLimitUtilization is known)then{
					avgUtilization = avgUtilization + it.averageLimitUtilization;
					blazeAccountAnalysis.blazeMonthlyDataArray[j].averageLimitUtilization = blazeAccountAnalysis.blazeMonthlyDataArray[j].averageLimitUtilization + it.averageLimitUtilization;
				}
				if( monthlyDataCountMonData6 >= twelveMonthDataMonData6 )then{
					//cash deposit
					if(it.cashDepositToTotalCreditPercent is known)then{
						cashDepositToCredit = cashDepositToCredit + it.cashDepositToTotalCreditPercent;
						blazeAccountAnalysis.blazeMonthlyDataArray[j].cashDepositToTotalCreditPercent = blazeAccountAnalysis.blazeMonthlyDataArray[j].cashDepositToTotalCreditPercent + it.cashDepositToTotalCreditPercent;
					}
					//Business Credit Count
					if(it.numberOfBusinessCreditTxns is known)then{
						businessCreditCount = businessCreditCount + it.numberOfBusinessCreditTxns;
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns + it.numberOfBusinessCreditTxns;
					}
					if(it.numberOfBusinessDebitTxns is known)then{
						businessDebitCount = businessDebitCount + it.numberOfBusinessDebitTxns;
						//Business Debit Count
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns + it.numberOfBusinessDebitTxns;
					}
				}
				monthlyDataCountMonData6 = monthlyDataCountMonData6 + 1;
				j = j+1;
			}
			// Average Limit Utilization Count
			avgUtilization = math().round(avgUtilization/6, -2);
			//Average Cash deposit
			cashDepositToCredit = math().round(cashDepositToCredit/12,-2);
			
			//Average Utilization Flag
			if(avgUtilization >= 95)then{
				avgUtilizationFlag = "Red"
			}
			else{
				avgUtilizationFlag = "Green"
			}
			//Cash Deposit Flag
			if(cashDepositToCredit > 10)then{
				cashDepositToCreditFlag = "Red"
			}
			else{
				cashDepositToCreditFlag = "Green"
			}
			//Business Credit Flag
			if(businessCreditCount < 60)then{
				businessCreditFlag = "Red"
			}
			else{
				businessCreditFlag = "Green"
			}
			//Business Debit Flag
			if(businessDebitCount < 60)then{
				businessDebitFlag = "Red"
			}
			else{
				businessDebitFlag = "Green"
			}
		}
		
		else if(i = 6 and perfiosData.data.additionalMonthlyDetails is known and perfiosData.data.additionalMonthlyDetails.monthlyData7 is known)then{
			monthlyDataCountMonData7 is an integer initially 0;
			sixMonthDataMonData7 is an integer initially 0;
			twelveMonthDataMonData7 is an integer initially 0;
			
			//Latest month Data
			sixMonthDataMonData7 = perfiosData.data.additionalMonthlyDetails.monthlyData7.count - 6;
			twelveMonthDataMonData7 = perfiosData.data.additionalMonthlyDetails.monthlyData7.count - 12; 
			if(sixMonthDataMonData7<0)then{
				sixMonthDataMonData7 = 0;
			}
			if(twelveMonthDataMonData7<0)then{
				twelveMonthDataMonData7 =0;
			}
				
			for each MonthlyData in perfiosData.data.additionalMonthlyDetails.monthlyData7 such that (it is not null) do{
				if(monthlyDataCountMonData7 >= sixMonthDataMonData7 and it.averageLimitUtilization is known)then{
					avgUtilization = avgUtilization + it.averageLimitUtilization;
					blazeAccountAnalysis.blazeMonthlyDataArray[j].averageLimitUtilization = blazeAccountAnalysis.blazeMonthlyDataArray[j].averageLimitUtilization + it.averageLimitUtilization;
				}
				if( monthlyDataCountMonData7 >= twelveMonthDataMonData7)then{
					//cash deposit
					if(it.cashDepositToTotalCreditPercent is known)then{
						cashDepositToCredit = cashDepositToCredit + it.cashDepositToTotalCreditPercent;
						blazeAccountAnalysis.blazeMonthlyDataArray[j].cashDepositToTotalCreditPercent = blazeAccountAnalysis.blazeMonthlyDataArray[j].cashDepositToTotalCreditPercent + it.cashDepositToTotalCreditPercent;
					}
					//Business Credit Count
					if(it.numberOfBusinessCreditTxns is known)then{
						businessCreditCount = businessCreditCount + it.numberOfBusinessCreditTxns;
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns + it.numberOfBusinessCreditTxns;
					}
					if(it.numberOfBusinessDebitTxns is known)then{
						businessDebitCount = businessDebitCount + it.numberOfBusinessDebitTxns;
						//Business Debit Count
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns + it.numberOfBusinessDebitTxns;
					}
				}
				monthlyDataCountMonData7 = monthlyDataCountMonData7 + 1;
				j = j+1;
			}
			// Average Limit Utilization Count
			avgUtilization = math().round(avgUtilization/6, -2);
			//Average Cash deposit
			cashDepositToCredit = math().round(cashDepositToCredit/12,-2);
			
			//Average Utilization Flag
			if(avgUtilization >= 95)then{
				avgUtilizationFlag = "Red"
			}
			else{
				avgUtilizationFlag = "Green"
			}
			//Cash Deposit Flag
			if(cashDepositToCredit > 10)then{
				cashDepositToCreditFlag = "Red"
			}
			else{
				cashDepositToCreditFlag = "Green"
			}
			//Business Credit Flag
			if(businessCreditCount < 60)then{
				businessCreditFlag = "Red"
			}
			else{
				businessCreditFlag = "Green"
			}
			//Business Debit Flag
			if(businessDebitCount < 60)then{
				businessDebitFlag = "Red"
			}
			else{
				businessDebitFlag = "Green"
			}
		}
		
		else if(i = 7 and perfiosData.data.additionalMonthlyDetails is known and perfiosData.data.additionalMonthlyDetails.monthlyData8 is known)then{
			monthlyDataCountMonData8 is an integer initially 0;
			sixMonthDataMonData8 is an integer initially 0;
			twelveMonthDataMonData8 is an integer initially 0;
			
			//Latest month Data
			sixMonthDataMonData8 = perfiosData.data.additionalMonthlyDetails.monthlyData8.count - 6;
			twelveMonthDataMonData8 = perfiosData.data.additionalMonthlyDetails.monthlyData8.count - 12; 
			if(sixMonthDataMonData8<0)then{
				sixMonthDataMonData8 = 0;
			}
			if(twelveMonthDataMonData8<0)then{
				twelveMonthDataMonData8 =0;
			}
				
			for each MonthlyData in perfiosData.data.additionalMonthlyDetails.monthlyData8 such that (it is not null) do{
				if(monthlyDataCountMonData8 >= sixMonthDataMonData8 and it.averageLimitUtilization is known)then{
					avgUtilization = avgUtilization + it.averageLimitUtilization;
					blazeAccountAnalysis.blazeMonthlyDataArray[j].averageLimitUtilization = blazeAccountAnalysis.blazeMonthlyDataArray[j].averageLimitUtilization + it.averageLimitUtilization;
				}
				if( monthlyDataCountMonData8 >= twelveMonthDataMonData8)then{
					//cash deposit
					if(it.cashDepositToTotalCreditPercent is known)then{
						cashDepositToCredit = cashDepositToCredit + it.cashDepositToTotalCreditPercent;
						blazeAccountAnalysis.blazeMonthlyDataArray[j].cashDepositToTotalCreditPercent = blazeAccountAnalysis.blazeMonthlyDataArray[j].cashDepositToTotalCreditPercent + it.cashDepositToTotalCreditPercent;
					}
					//Business Credit Count
					if(it.numberOfBusinessCreditTxns is known)then{
						businessCreditCount = businessCreditCount + it.numberOfBusinessCreditTxns;
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns + it.numberOfBusinessCreditTxns;
					}
					if(it.numberOfBusinessDebitTxns is known)then{
						businessDebitCount = businessDebitCount + it.numberOfBusinessDebitTxns;
						//Business Debit Count
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns + it.numberOfBusinessDebitTxns;
					}
				}
				monthlyDataCountMonData8 = monthlyDataCountMonData8 + 1;
				j = j+1;
			}
			// Average Limit Utilization Count
			avgUtilization = math().round(avgUtilization/6, -2);
			//Average Cash deposit
			cashDepositToCredit = math().round(cashDepositToCredit/12,-2);
			
			//Average Utilization Flag
			if(avgUtilization >= 95)then{
				avgUtilizationFlag = "Red"
			}
			else{
				avgUtilizationFlag = "Green"
			}
			//Cash Deposit Flag
			if(cashDepositToCredit > 10)then{
				cashDepositToCreditFlag = "Red"
			}
			else{
				cashDepositToCreditFlag = "Green"
			}
			//Business Credit Flag
			if(businessCreditCount < 60)then{
				businessCreditFlag = "Red"
			}
			else{
				businessCreditFlag = "Green"
			}
			//Business Debit Flag
			if(businessDebitCount < 60)then{
				businessDebitFlag = "Red"
			}
			else{
				businessDebitFlag = "Green"
			}
		}
		
		else if(i = 8 and perfiosData.data.additionalMonthlyDetails is known and perfiosData.data.additionalMonthlyDetails.monthlyData9 is known)then{
			monthlyDataCountMonData9 is an integer initially 0;
			sixMonthDataMonData9 is an integer initially 0;
			twelveMonthDataMonData9 is an integer initially 0;
			
			//Latest month Data
			sixMonthDataMonData9 = perfiosData.data.additionalMonthlyDetails.monthlyData9.count - 6;
			twelveMonthDataMonData9 = perfiosData.data.additionalMonthlyDetails.monthlyData9.count - 12; 
			if(sixMonthDataMonData9<0)then{
				sixMonthDataMonData9 = 0;
			}
			if(twelveMonthDataMonData9<0)then{
				twelveMonthDataMonData9 =0;
			}
				
			for each MonthlyData in perfiosData.data.additionalMonthlyDetails.monthlyData9 such that (it is not null) do{
				if(monthlyDataCountMonData9 >= sixMonthDataMonData9 and it.averageLimitUtilization is known)then{
					avgUtilization = avgUtilization + it.averageLimitUtilization;
					blazeAccountAnalysis.blazeMonthlyDataArray[j].averageLimitUtilization = blazeAccountAnalysis.blazeMonthlyDataArray[j].averageLimitUtilization + it.averageLimitUtilization;
				}
				if( monthlyDataCountMonData9 >= twelveMonthDataMonData9)then{
					//cash deposit
					if(it.cashDepositToTotalCreditPercent is known)then{
						cashDepositToCredit = cashDepositToCredit + it.cashDepositToTotalCreditPercent;
						blazeAccountAnalysis.blazeMonthlyDataArray[j].cashDepositToTotalCreditPercent = blazeAccountAnalysis.blazeMonthlyDataArray[j].cashDepositToTotalCreditPercent + it.cashDepositToTotalCreditPercent;
					}
					//Business Credit Count
					if(it.numberOfBusinessCreditTxns is known)then{
						businessCreditCount = businessCreditCount + it.numberOfBusinessCreditTxns;
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns + it.numberOfBusinessCreditTxns;
					}
					if(it.numberOfBusinessDebitTxns is known)then{
						businessDebitCount = businessDebitCount + it.numberOfBusinessDebitTxns;
						//Business Debit Count
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns + it.numberOfBusinessDebitTxns;
					}
				}
				monthlyDataCountMonData9 = monthlyDataCountMonData9 + 1;
				j = j+1;
			}
			// Average Limit Utilization Count
			avgUtilization = math().round(avgUtilization/6, -2);
			//Average Cash deposit
			cashDepositToCredit = math().round(cashDepositToCredit/12,-2);
			
			//Average Utilization Flag
			if(avgUtilization >= 95)then{
				avgUtilizationFlag = "Red"
			}
			else{
				avgUtilizationFlag = "Green"
			}
			//Cash Deposit Flag
			if(cashDepositToCredit > 10)then{
				cashDepositToCreditFlag = "Red"
			}
			else{
				cashDepositToCreditFlag = "Green"
			}
			//Business Credit Flag
			if(businessCreditCount < 60)then{
				businessCreditFlag = "Red"
			}
			else{
				businessCreditFlag = "Green"
			}
			//Business Debit Flag
			if(businessDebitCount < 60)then{
				businessDebitFlag = "Red"
			}
			else{
				businessDebitFlag = "Green"
			}
		}
		
		else if(i = 9 and perfiosData.data.additionalMonthlyDetails is known and perfiosData.data.additionalMonthlyDetails.monthlyData10 is known)then{
			monthlyDataCountMonData10 is an integer initially 0;
			sixMonthDataMonData10 is an integer initially 0;
			twelveMonthDataMonData10 is an integer initially 0;
			
			//Latest month Data
			sixMonthDataMonData10 = perfiosData.data.additionalMonthlyDetails.monthlyData10.count - 6;
			twelveMonthDataMonData10 = perfiosData.data.additionalMonthlyDetails.monthlyData10.count - 12; 
			if(sixMonthDataMonData10<0)then{
				sixMonthDataMonData10 = 0;
			}
			if(twelveMonthDataMonData10<0)then{
				twelveMonthDataMonData10 =0;
			}
				
			for each MonthlyData in perfiosData.data.additionalMonthlyDetails.monthlyData10 such that (it is not null) do{
				if(monthlyDataCountMonData10 >= sixMonthDataMonData10 and it.averageLimitUtilization is known)then{
					avgUtilization = avgUtilization + it.averageLimitUtilization;
					blazeAccountAnalysis.blazeMonthlyDataArray[j].averageLimitUtilization = blazeAccountAnalysis.blazeMonthlyDataArray[j].averageLimitUtilization + it.averageLimitUtilization;
				}
				if( monthlyDataCountMonData10 >= twelveMonthDataMonData10)then{
					//cash deposit
					if(it.cashDepositToTotalCreditPercent is known)then{
						cashDepositToCredit = cashDepositToCredit + it.cashDepositToTotalCreditPercent;
						blazeAccountAnalysis.blazeMonthlyDataArray[j].cashDepositToTotalCreditPercent = blazeAccountAnalysis.blazeMonthlyDataArray[j].cashDepositToTotalCreditPercent + it.cashDepositToTotalCreditPercent;
					}
					//Business Credit Count
					if(it.numberOfBusinessCreditTxns is known)then{
						businessCreditCount = businessCreditCount + it.numberOfBusinessCreditTxns;
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns + it.numberOfBusinessCreditTxns;
					}
					if(it.numberOfBusinessDebitTxns is known)then{
						businessDebitCount = businessDebitCount + it.numberOfBusinessDebitTxns;
						//Business Debit Count
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns + it.numberOfBusinessDebitTxns;
					}
				}
				monthlyDataCountMonData10 = monthlyDataCountMonData10 + 1;
				j = j+1;
			}
			// Average Limit Utilization Count
			avgUtilization = math().round(avgUtilization/6, -2);
			//Average Cash deposit
			cashDepositToCredit = math().round(cashDepositToCredit/12,-2);
			
			//Average Utilization Flag
			if(avgUtilization >= 95)then{
				avgUtilizationFlag = "Red"
			}
			else{
				avgUtilizationFlag = "Green"
			}
			//Cash Deposit Flag
			if(cashDepositToCredit > 10)then{
				cashDepositToCreditFlag = "Red"
			}
			else{
				cashDepositToCreditFlag = "Green"
			}
			//Business Credit Flag
			if(businessCreditCount < 60)then{
				businessCreditFlag = "Red"
			}
			else{
				businessCreditFlag = "Green"
			}
			//Business Debit Flag
			if(businessDebitCount < 60)then{
				businessDebitFlag = "Red"
			}
			else{
				businessDebitFlag = "Green"
			}
		}
		
		else if(i = 10 and perfiosData.data.additionalMonthlyDetails is known and perfiosData.data.additionalMonthlyDetails.monthlyData11 is known)then{
			monthlyDataCountMonData11 is an integer initially 0;
			sixMonthDataMonData11 is an integer initially 0;
			twelveMonthDataMonData11 is an integer initially 0;
			
			//Latest month Data
			sixMonthDataMonData11 = perfiosData.data.additionalMonthlyDetails.monthlyData11.count - 6;
			twelveMonthDataMonData11 = perfiosData.data.additionalMonthlyDetails.monthlyData11.count - 12; 
			if(sixMonthDataMonData11<0)then{
				sixMonthDataMonData11 = 0;
			}
			if(twelveMonthDataMonData11<0)then{
				twelveMonthDataMonData11 =0;
			}
			for each MonthlyData in perfiosData.data.additionalMonthlyDetails.monthlyData11 such that (it is not null) do{
				if(monthlyDataCountMonData11 >= sixMonthDataMonData11 and it.averageLimitUtilization is known)then{
					avgUtilization = avgUtilization + it.averageLimitUtilization;
					blazeAccountAnalysis.blazeMonthlyDataArray[j].averageLimitUtilization = blazeAccountAnalysis.blazeMonthlyDataArray[j].averageLimitUtilization + it.averageLimitUtilization;
				}
				if( monthlyDataCountMonData11 >= twelveMonthDataMonData11)then{
					//cash deposit
					if(it.cashDepositToTotalCreditPercent is known)then{
						cashDepositToCredit = cashDepositToCredit + it.cashDepositToTotalCreditPercent;
						blazeAccountAnalysis.blazeMonthlyDataArray[j].cashDepositToTotalCreditPercent = blazeAccountAnalysis.blazeMonthlyDataArray[j].cashDepositToTotalCreditPercent + it.cashDepositToTotalCreditPercent;
					}
					//Business Credit Count
					if(it.numberOfBusinessCreditTxns is known)then{
						businessCreditCount = businessCreditCount + it.numberOfBusinessCreditTxns;
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns + it.numberOfBusinessCreditTxns;
					}
					if(it.numberOfBusinessDebitTxns is known)then{
						businessDebitCount = businessDebitCount + it.numberOfBusinessDebitTxns;
						//Business Debit Count
						blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns + it.numberOfBusinessDebitTxns;
					}
				}
				monthlyDataCountMonData11 = monthlyDataCountMonData11 + 1;
				j = j+1;
			}
			// Average Limit Utilization Count
			avgUtilization = math().round(avgUtilization/6, -2);
			//Average Cash deposit
			cashDepositToCredit = math().round(cashDepositToCredit/12,-2);
			
			//Average Utilization Flag
			if(avgUtilization >= 95)then{
				avgUtilizationFlag = "Red"
			}
			else{
				avgUtilizationFlag = "Green"
			}
			//Cash Deposit Flag
			if(cashDepositToCredit > 10)then{
				cashDepositToCreditFlag = "Red"
			}
			else{
				cashDepositToCreditFlag = "Green"
			}
			//Business Credit Flag
			if(businessCreditCount < 60)then{
				businessCreditFlag = "Red"
			}
			else{
				businessCreditFlag = "Green"
			}
			//Business Debit Flag
			if(businessDebitCount < 60)then{
				businessDebitFlag = "Red"
			}
			else{
				businessDebitFlag = "Green"
			}
		}
		
		fn_AppendCalculatedVariable(message, "avgUtilization", "real", productCode, applicantId, applicantType, "PoorBanking_"i, avgUtilization","avgUtilizationFlag);
		fn_AppendCalculatedVariable(message, "cashDepositToCredit", "real", productCode, applicantId, applicantType, "PoorBanking_"i, cashDepositToCredit","cashDepositToCreditFlag);
		fn_AppendCalculatedVariable(message, "businessCreditCount", "real", productCode, applicantId, applicantType, "PoorBanking_"i, businessCreditCount","businessCreditFlag);
		fn_AppendCalculatedVariable(message,"businessDebitCount", "real", productCode, applicantId, applicantType, "PoorBanking_"i, businessDebitCount","businessDebitFlag);
			
		print("avgUtilization----------------------------------->"avgUtilization","avgUtilizationFlag);
		print("cashDepositToCredit----------------------------------->"cashDepositToCredit","cashDepositToCreditFlag);
		print("businessCreditCount----------------------------------->"businessCreditCount","businessCreditFlag);
		print("businessDebitCount----------------------------------->"businessDebitCount","businessDebitFlag);
			
		i=i+1;
	}
	print("------------------- Exit in Account Analysis Array ----------------");
}
// ----------------------- Account Analysis Loop End --------------------------

if(accAnalysisArrCount>1) then{
	print("In Final if loop accAnalysisArrCount--------> "accAnalysisArrCount);
// ---------------------- BlazeMonthlyDetail loop Start -----------------------
for each BlazeMonthlyDetail in blazeAccountAnalysis.blazeMonthlyDetailArray such that(it <> unknown and it is not null) do{
		ablazeMonthlyDetailArr is some BlazeMonthlyDetail initially it as a BlazeMonthlyDetail;
		
		if(ablazeMonthlyDetailArr.balAvg is known)then{
			avgBBTotal = avgBBTotal + ablazeMonthlyDetailArr.balAvg;
		}
		if(ablazeMonthlyDetailArr.totalInwEMIBounce is known and ablazeMonthlyDetailArr.totalInwEMIBounce <> 0)then{
			bounceCountTotal = bounceCountTotal + 1;
		}
		if(ablazeMonthlyDetailArr.overdrawnInstances is known)then{
			overDrawnCountTotal = overDrawnCountTotal + ablazeMonthlyDetailArr.overdrawnInstances;
		}
		if(ablazeMonthlyDetailArr.penalCharges is known)then{
			penalChargesCountTotal = penalChargesCountTotal + ablazeMonthlyDetailArr.penalCharges;
		}
	}
// ---------------------- BlazeMonthlyDetail loop Ends -------------------------

// Calculate Average Bank Balance for final
	avgBBTotal = avgBBTotal/(6*accAnalysisArrCount);
	if(emiAmount is known and emiAmount>0)then{
		abbRateTotal = math().round((avgBBTotal/emiAmount), -2);
	}
	
// Calculate inward Cheque Bounce rate for final
	if(blazeAccountAnalysis.inwChqBounces is known and (blazeAccountAnalysis.chqIssues is known and blazeAccountAnalysis.chqIssues > 0)) then{
		print("blazeAccountAnalysis.inwChqBounces--------------> "blazeAccountAnalysis.inwChqBounces);
		print("blazeAccountAnalysis.chqIssues--------------> "blazeAccountAnalysis.chqIssues);
		inwardChqBncRateTotal = math().round((blazeAccountAnalysis.inwChqBounces / blazeAccountAnalysis.chqIssues), -2);
	}
	
// ---------------------- BlazeMonthlyData loop Start -----------------------
for each BlazeMonthlyData in blazeAccountAnalysis.blazeMonthlyDataArray such that(it <> unknown) do {
	aMonthlyData is some BlazeMonthlyData initially it as a BlazeMonthlyData;
	if(aMonthlyData.numberOfBusinessCreditTxns is known) then {
		totalBusinessCreditCount = totalBusinessCreditCount + aMonthlyData.numberOfBusinessCreditTxns;
	}
	if(aMonthlyData.numberOfBusinessDebitTxns is known) then {
		totalBusinessDebitCount = totalBusinessDebitCount + aMonthlyData.numberOfBusinessDebitTxns;
	}
	if(aMonthlyData.averageLimitUtilization is known) then{
		totalAverageLimitUtilization = totalAverageLimitUtilization +(aMonthlyData.averageLimitUtilization/accAnalysisArrCount);
	}
	if(aMonthlyData.cashDepositToTotalCreditPercent is known) then{
		totalCashDepositToTotalCreditPercent = totalCashDepositToTotalCreditPercent +(aMonthlyData.cashDepositToTotalCreditPercent/accAnalysisArrCount);
	}
}
// ---------------------- BlazeMonthlyData loop End --------------------------

// Calculate Total Limit Utilisation
totalAverageLimitUtilization = math().round((totalAverageLimitUtilization/6),-2);
//Calculate Total Cash Deposit
totalCashDepositToTotalCreditPercent = math().round((totalCashDepositToTotalCreditPercent/12), -2);

//---------------------------- Flag Assignment --------------------------------
//Abb Rate Flag
if(abbRateTotal < 1)then{
  abbRateFlagTotal = "Red"
}
else{
  abbRateFlagTotal = "Green";
}
//Inward cheque Balance Flag
if(inwardChqBncRateTotal >= 1)then{
	inwardChqBncFlagTotal = "Red"
}
else{
	inwardChqBncFlagTotal = "Green"
}
// EMI Bounce Flag
if(bounceCountTotal >= 2)then{
	bounceFlagTotal = "Red"
}
else{
	bounceFlagTotal = "Green"
}
//Total Average Utilization Flag
if(totalAverageLimitUtilization >= 95)then{
  totalAverageLimitUtilizationFlag = "Red"
}
else{
   totalAverageLimitUtilizationFlag = "Green"
}
//Over Drwan Flag
if(overDrawnCountTotal >= (1*accAnalysisArrCount))then{
  overDrawnFlagTotal = "Red"
}
else{
  overDrawnFlagTotal = "Green"
}
//Cash Deposit Flag
if(totalCashDepositToTotalCreditPercent > 10)then{
  totalCashDepositToTotalCreditPercentFlag = "Red"
}
else{
  totalCashDepositToTotalCreditPercentFlag = "Green"
}
//Penal Charges Flag
if(penalChargesCountTotal >= (1*accAnalysisArrCount))then{
	penalChargesFlagTotal = "Red"
}
else{
	penalChargesFlagTotal = "Green"
}
//Business Credit Flag
if(totalBusinessCreditCount < (60*accAnalysisArrCount))then{
  totalBusinessCreditCountFlag = "Red"
}
else{
    totalBusinessCreditCountFlag = "Green"
}
//Business Debit Flag
if(totalBusinessDebitCount < (60*accAnalysisArrCount))then{
  totalBusinessDebitCountFlag = "Red"
}
else{
    totalBusinessDebitCountFlag = "Green"
}

fn_AppendCalculatedVariable(message, "abbRateTotal", "real", productCode, applicantId, applicantType, "PoorBanking", abbRateTotal","abbRateFlagTotal);
fn_AppendCalculatedVariable(message, "inwardChqBncRateTotal", "real", productCode, applicantId, applicantType, "PoorBanking", inwardChqBncRateTotal","inwardChqBncFlagTotal);
fn_AppendCalculatedVariable(message, "bounceCountTotal", "real", productCode, applicantId, applicantType, "PoorBanking", bounceCountTotal","bounceFlagTotal);
fn_AppendCalculatedVariable(message, "totalAverageLimitUtilization", "real", productCode, applicantId, applicantType, "PoorBanking", totalAverageLimitUtilization","totalAverageLimitUtilizationFlag);
fn_AppendCalculatedVariable(message, "overDrawnCountTotal", "real", productCode, applicantId, applicantType, "PoorBanking", overDrawnCountTotal","overDrawnFlagTotal);
fn_AppendCalculatedVariable(message, "totalCashDepositToTotalCreditPercent", "real", productCode, applicantId, applicantType, "PoorBanking", totalCashDepositToTotalCreditPercent","totalCashDepositToTotalCreditPercentFlag);
fn_AppendCalculatedVariable(message, "penalChargesCountTotal", "real", productCode, applicantId, applicantType, "PoorBanking", penalChargesCountTotal","penalChargesFlagTotal);
fn_AppendCalculatedVariable(message, "totalBusinessCreditCount", "real", productCode, applicantId, applicantType, "PoorBanking", totalBusinessCreditCount","totalBusinessCreditCountFlag);
fn_AppendCalculatedVariable(message,"totalBusinessDebitCount", "real", productCode, applicantId, applicantType, "PoorBanking", totalBusinessDebitCount","totalBusinessDebitCountFlag);

print("abbRateTotal----------------------------------->"abbRateTotal","abbRateFlagTotal);
print("inwardChqBncRateTotal----------------------------------->"inwardChqBncRateTotal","inwardChqBncFlagTotal);
print("bounceCountTotal----------------------------------->"bounceCountTotal","bounceFlagTotal);
print("totalAverageLimitUtilization----------------------------------->"totalAverageLimitUtilization","totalAverageLimitUtilizationFlag);
print("overDrawnCountTotal----------------------------------->"overDrawnCountTotal","overDrawnFlagTotal);
print("totalCashDepositToTotalCreditPercent----------------------------------->"totalCashDepositToTotalCreditPercent","totalCashDepositToTotalCreditPercentFlag);
print("penalChargesCountTotal----------------------------------->"penalChargesCountTotal","penalChargesFlagTotal);
print("totalBusinessCreditCount----------------------------------->"totalBusinessCreditCount","totalBusinessCreditCountFlag);
print("totalBusinessDebitCount----------------------------------->"totalBusinessDebitCount","totalBusinessDebitCountFlag);
}
}
catch an Exception with{
	aBlazeApplication.fn_Perfios_PoorBankingBehaviour = true;  
	print("\n***Exception :: \n>>@@@<<\n" evaluationException().toString()"\n>>@@@<<\n");  
}
print("Exiting fn_Perfios_PoorBankingBehaviour");]]></value>
 </instance>
 <instance ref='CommentsVH'>
  <value></value>
 </instance>
 <instance ref='FunctionParametersVH'>
  <instance-list ref='ParametersVH'>
   <item template='DRNZKQyw5rcjBd4Yxo6FN649lWN.template1' id='M2LsN6'>
    <instance ref='ParameterNameVH'>
     <value>message</value>
    </instance>
    <instance ref='ParameterTypeVH'>
     <value>Message</value>
    </instance>
   </item>
   <item template='DRNZKQyw5rcjBd4Yxo6FN649lWN.template1' id='WDIAsR'>
    <instance ref='ParameterNameVH'>
     <value>perfiosData</value>
    </instance>
    <instance ref='ParameterTypeVH'>
     <value>PerfiosData</value>
    </instance>
   </item>
   <item template='DRNZKQyw5rcjBd4Yxo6FN649lWN.template1' id='GUZ4N1'>
    <instance ref='ParameterNameVH'>
     <value>aBlazeApplicant</value>
    </instance>
    <instance ref='ParameterTypeVH'>
     <value>BlazeApplicant</value>
    </instance>
   </item>
  </instance-list>
 </instance>
</instantiation>