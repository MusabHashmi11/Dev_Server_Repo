<?xml version='1.0' encoding='UTF-8'?>
<instantiation xmlns='http://www.blazesoft.com/instantiation' template='Q8jH6kHdOYIZ1uG0WKXqvvejqv0' name='fn_Perfios_ABB_Dip_Expectation_Model'>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='1VBfZr8g32Q2FnSWcWO9txQWwEE' name='Instance' id='Instance'>
 </instantiation>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='18uqQPJXnTmKrAiLEOVcQMUAFmD' name='Entry' id='Entry'>
  <instance ref='Source Reference'>
   <instance ref='value'>
    <instance ref='locationVH'>
     <value></value>
    </instance>
    <instance ref='repositoryNameVH'>
     <value></value>
    </instance>
    <instance ref='versionVH'>
     <value></value>
    </instance>
    <instance ref='filterVH'>
     <value></value>
    </instance>
    <instance ref='releaseDateVH'>
     <value></value>
    </instance>
    <instance ref='repositoryAccessVH'>
     <value></value>
    </instance>
   </instance>
  </instance>
  <instance ref='Predictive Model Type'>
   <instance ref='value'>
    <value>NotApplicable</value>
   </instance>
  </instance>
 </instantiation>
 <instance ref='__ENTITY_PROPERTIES__VH__'>
  <instance ref='Test Role'>
   <instance ref='value'>
    <value>None</value>
   </instance>
  </instance>
  <instance ref='Test Case'>
   <instance ref='value'>
    <value></value>
   </instance>
  </instance>
 </instance>
 <instance ref='InstanceName'>
  <value></value>
 </instance>
 <instance ref='UniqueInstanceNameVH'>
  <value>fn_Perfios_ABB_Dip_Expectation_Model1</value>
 </instance>
 <instance ref='FunctionNameVH'>
  <value>fn_Perfios_ABB_Dip_Expectation_Model</value>
 </instance>
 <instance ref='FunctionReturnType'>
  <value>void</value>
 </instance>
 <instance ref='FunctionBodyVH'>
  <value><![CDATA[print("");
print("++++> Entering function :: fn_Perfios_ABB_Dip_Expectation_Model");
aBlazeApplication is some BlazeApplication initially BTCommonVar.termInput.blazeApplication as a BlazeApplication;
try{
    productCode is a string initially message.invocation.decisionService;
    scoreCardDetailArray is some array of ScoreCardDetail initially message.response.scoreCardDetails;
	applicantId is a string;
    applicantType is a string;
  	applicantId = aBlazeApplicant.customerCif as a string;
	applicantType = aBlazeApplicant.applicantType;
	
	varInit is a real;
	//Calculating Variable for last 12Months Count
	bufferTwelveMonthCounter is a real initially varInit;
	last3MBufferCount is an integer initially 0;
	monthCounter is an integer initially 0;
	abbDivisor is an integer initially 0;
	sumBalAvg is a real initially 0;
	first3MBufferCount is an integer initially 0;
	aBB is a real initially varInit;
	first3MBalAvg is a real initially 0;
	last3MBalAvg is a real initially 0;
	balanceTrendDifference is a real initially varInit;
	thresholdAbb is a real initially varInit;
    balConsitencyBreachCount is an integer initially 0;
	inwardChequeBounceRate is a real initially varInit;
	cCBalConsistencyThresholdBreachCount is an integer initially 0;
	aCCBreachCount is an integer initially 0;
	aDCBreachCount is an integer initially 0;
	aBBDipRagFlag is a string initially "";
	aBBScore is a real initially 0;
	
	// Create Object of BlazeAccountAnalysis for Combined Calculations
	blazeAccountAnalysis is some BlazeAccountAnalysis initially a BlazeAccountAnalysis;
    blazeAccountAnalysis.blazeMonthlyDetailArray = an array of BlazeMonthlyDetail;
	blazeAccountAnalysis.blazeMonthlyDataArray = an array of BlazeMonthlyData;
	
	accountAnalysisCount is an integer initially 0;
	if(perfiosData.data.accountAnalysis is known) then {
		accountAnalysisCount=perfiosData.data.accountAnalysis.count;
	}
	i is an integer initially 0;
	
	//initialising cCBalConsistencyThreshold
	cCBalConsistencyThreshold is a real;
	if(message.request.application.applicationAdditionalDetails.other.buffer2 is known and message.request.application.applicationAdditionalDetails.other.buffer2<>"")then{
		cCBalConsistencyThreshold =message.request.application.applicationAdditionalDetails.other.buffer2 as a real/2.5;
	}
	
	// Calculating Score for each Account Analysis
    while(i<accountAnalysisCount) do{
	print("i :: "i);
	scoreCardCharacteristicsArray is some array of ScoreCardCharacteristicsDetail initially an array of ScoreCardCharacteristicsDetail;
	
	bufferTwelveMonthCounter = varInit;
	last3MBufferCount = 0;
	monthCounter = 0;
	abbDivisor = 0;
	sumBalAvg = 0;
	first3MBufferCount = 0;
	aBB = varInit;
	first3MBalAvg = 0;
	last3MBalAvg = 0;
	balanceTrendDifference = varInit;
	thresholdAbb = varInit;
	balConsitencyBreachCount = 0;
	inwardChequeBounceRate = varInit;
	aBBDipRagFlag = "";
	aBBScore = 0;
	
	if(perfiosData.data.accountAnalysis is not null and perfiosData.data.accountAnalysis[i].monthlyDetails is not null)then{
		print("---->monthlyDetails.count ::"perfiosData.data.accountAnalysis[i].monthlyDetails.count);
		
		bufferTwelveMonthCounter =perfiosData.data.accountAnalysis[i].monthlyDetails.count -12;
		
		if(bufferTwelveMonthCounter<=0)then{
			bufferTwelveMonthCounter =0;
		}
		print("---->bufferTwelveMonthCounter ::"bufferTwelveMonthCounter);
		
		last3MBufferCount =perfiosData.data.accountAnalysis[i].monthlyDetails.count -3;
		if(last3MBufferCount<=0)then{
			last3MBufferCount =0;
		}
		print("---->last3MBufferCount ::"last3MBufferCount);
		
		j is an integer initially 0;
	    for each MonthlyDetail in perfiosData.data.accountAnalysis[i].monthlyDetails do{
	        //Entering monthlyDetails Loop
		    print("------------------- Enter in MonthlyDetail Array ----------------");
			aMonthlyDetail is some MonthlyDetail initially it as a MonthlyDetail;
		
		    //Condition to satisfy for only last 12 objects/months
		    if(bufferTwelveMonthCounter<=monthCounter and aMonthlyDetail.balAvg is known)then{
			    sumBalAvg =sumBalAvg +aMonthlyDetail.balAvg;
			    abbDivisor =abbDivisor +1;
		        first3MBufferCount =first3MBufferCount+1;
			
			    //Condition for first 3months of last 12 objects/months
			    if(first3MBufferCount<=3 and aMonthlyDetail.balAvg is known)then{
				   first3MBalAvg =first3MBalAvg +aMonthlyDetail.balAvg;
			    }
			
			    if(last3MBufferCount<=monthCounter and aMonthlyDetail.balAvg is known)then{
				    last3MBalAvg =last3MBalAvg+aMonthlyDetail.balAvg;
			    }
				
				// Calculation for Combined balAvg
				if(i=0) then {
					aBlazeMonthlyDetail is some BlazeMonthlyDetail initially a BlazeMonthlyDetail;
					aBlazeMonthlyDetail.monthName = aMonthlyDetail.monthName;
					aBlazeMonthlyDetail.balAvg = 0;
					if(aMonthlyDetail.balAvg is known) then {
				        aBlazeMonthlyDetail.balAvg = aMonthlyDetail.balAvg;
				    }
					blazeAccountAnalysis.blazeMonthlyDetailArray.append(aBlazeMonthlyDetail);
				}
				else if(aMonthlyDetail.balAvg is known) then {
				    blazeAccountAnalysis.blazeMonthlyDetailArray[j].balAvg = blazeAccountAnalysis.blazeMonthlyDetailArray[j].balAvg + aMonthlyDetail.balAvg;
				}
				j=j+1;
		    }
            monthCounter =monthCounter+1;
	        //Exiting monthlyDetails Loop
	    }
	    print("---->sumBalAvg ::"sumBalAvg);
	
	    //Clculating aBB
	    if(abbDivisor <>0)then{
		    aBB =sumBalAvg/abbDivisor;
	    }
	    print("aBB ::"aBB);
	
	    if(aBB is known)then{
		    thresholdAbb =aBB/3;
	    }
	    print("---->thresholdAbb ::"thresholdAbb);
	
	    //Calculating Average of first 3Months of last 12months
	    print("---->first3MBalAvg before division ::"first3MBalAvg);
	    first3MBalAvg =first3MBalAvg/3;
	    print("---->first3MBalAvg After division ::"first3MBalAvg);
	
	    //Calculating Average of last 3Months
	    print("---->last3MBalAvg before division ::"last3MBalAvg);
	    last3MBalAvg =last3MBalAvg/3;
	    print("---->last3MBalAvg After division ::"last3MBalAvg);
	
	    //Calcuting Differnce in percetage between first and last 3months of last 12Months
	    balanceTrendDifference =(last3MBalAvg-first3MBalAvg)/(first3MBalAvg*100);
	    print("---->balanceTrendDifference ::"balanceTrendDifference);
	
	    monthCounter =0;
	    for each MonthlyDetail in perfiosData.data.accountAnalysis[i].monthlyDetails do{
	        //Entering monthlyDetails Loop
	        aMonthlyDetail is some MonthlyDetail initially it as a MonthlyDetail;
	
	        if(bufferTwelveMonthCounter<monthCounter)then{
		        if(aMonthlyDetail.balAvg<thresholdAbb)then{
			        balConsitencyBreachCount =balConsitencyBreachCount+1;
		        }
	        }
	        print("---->balConsitencyBreachCount ::"balConsitencyBreachCount);

	        monthCounter =monthCounter+1;
	        print("********Exiting monthlyDetails Loop*********");
	        //Exiting monthlyDetails Loop
	    }
	
	    //Declaring Variables for MonthlyData Loop
	    cCBalConsistencyThresholdBreachCount = 0;
	    aCCBreachCount = 0;
	    aDCBreachCount = 0;
		j=0;
		
	    //Calculating Variable for last 12Months Count from monthlyData1
		if(i=0 and perfiosData.data.additionalMonthlyDetails is known and perfiosData.data.additionalMonthlyDetails.monthlyData1 is known) then{
	        print("---->MonthlyData1.count ::"perfiosData.data.additionalMonthlyDetails.monthlyData1.count);
	        bufferTwelveMonthCounter =perfiosData.data.additionalMonthlyDetails.monthlyData1.count -12;
	
	        monthCounter =0;
	        //Entering MonthlyData1 Loop
	        for each MonthlyData in perfiosData.data.additionalMonthlyDetails.monthlyData1 do{
		        aMonthlyData is some MonthlyData initially it as a MonthlyData;
				aBlazeMonthlyData is some BlazeMonthlyData initially a BlazeMonthlyData;
		
		        if(bufferTwelveMonthCounter<= monthCounter)then{
			
			        //Counting cCBalConsistencyThresholdBreachCount
			        if(cCBalConsistencyThreshold is known and aMonthlyData.totalBusinessCreditTxns is known and (cCBalConsistencyThreshold>aMonthlyData.totalBusinessCreditTxns))then{
				        cCBalConsistencyThresholdBreachCount =cCBalConsistencyThresholdBreachCount+1;
			        }
			
			        //Calculating Average Credit Count Consistency
			        if(aMonthlyData.numberOfBusinessCreditTxns is known and aMonthlyData.numberOfBusinessCreditTxns<5)then{
				        aCCBreachCount =aCCBreachCount+1;
			        }
			
			        //Calculating Average Debit Consistency Count
			        if(aMonthlyData.numberOfBusinessDebitTxns is known and aMonthlyData.numberOfBusinessDebitTxns<5)then{
				        aDCBreachCount =aDCBreachCount +1;
			        }
		        }
		        print("---->cCBalConsistencyThreshold ::"cCBalConsistencyThreshold);
		        print("---->aCCBreachCount ::"aCCBreachCount);
		        print("---->aDCBreachCount ::"aDCBreachCount);
				
				// Calculation for Combined variables
				aBlazeMonthlyData.monthName = aMonthlyData.monthName;
				aBlazeMonthlyData.totalBusinessCreditTxns=0;
				aBlazeMonthlyData.numberOfBusinessCreditTxns=0;
				aBlazeMonthlyData.numberOfBusinessDebitTxns=0;
				
				if(aMonthlyData.totalBusinessCreditTxns is known) then {
				    aBlazeMonthlyData.totalBusinessCreditTxns = aMonthlyData.totalBusinessCreditTxns;
				}
				if(aMonthlyData.numberOfBusinessCreditTxns is known) then {
				    aBlazeMonthlyData.numberOfBusinessCreditTxns = aMonthlyData.numberOfBusinessCreditTxns;
				}
				if(aMonthlyData.numberOfBusinessDebitTxns is known) then {
				    aBlazeMonthlyData.numberOfBusinessDebitTxns = aMonthlyData.numberOfBusinessDebitTxns;
				}
				blazeAccountAnalysis.blazeMonthlyDataArray.append(aBlazeMonthlyData);
				j=j+1;
		
		        monthCounter =monthCounter+1;
		        print("monthCounter ::"monthCounter);
	        }
	        //Exiting MonthlyData1 Loop
		}
		
		//Calculating Variable for last 12Months Count from monthlyData2
		else if(i=1 and perfiosData.data.additionalMonthlyDetails is known and perfiosData.data.additionalMonthlyDetails.monthlyData2 is known) then{
	        print("---->MonthlyData2.count ::"perfiosData.data.additionalMonthlyDetails.monthlyData2.count);
	        bufferTwelveMonthCounter =perfiosData.data.additionalMonthlyDetails.monthlyData2.count -12;
	
	        monthCounter =0;
	        //Entering MonthlyData2 Loop
	        for each MonthlyData in perfiosData.data.additionalMonthlyDetails.monthlyData2 do{
		        aMonthlyData is some MonthlyData initially it as a MonthlyData;
		
		        if(bufferTwelveMonthCounter<= monthCounter)then{
			
			        //Counting cCBalConsistencyThresholdBreachCount
			        if(cCBalConsistencyThreshold is known and aMonthlyData.totalBusinessCreditTxns is known and (cCBalConsistencyThreshold>aMonthlyData.totalBusinessCreditTxns))then{
				        cCBalConsistencyThresholdBreachCount =cCBalConsistencyThresholdBreachCount+1;
			        }
			
			        //Calculating Average Credit Count Consistency
			        if(aMonthlyData.numberOfBusinessCreditTxns is known and aMonthlyData.numberOfBusinessCreditTxns<5)then{
				        aCCBreachCount =aCCBreachCount+1;
			        }
			
			        //Calculating Average Credit Consistency Count
			        if(aMonthlyData.numberOfBusinessDebitTxns is known and aMonthlyData.numberOfBusinessDebitTxns<5)then{
				        aDCBreachCount =aDCBreachCount +1;
			        }
		        }
		        print("---->cCBalConsistencyThreshold ::"cCBalConsistencyThreshold);
		        print("---->aCCBreachCount ::"aCCBreachCount);
		        print("---->aDCBreachCount ::"aDCBreachCount);
				
				if(aMonthlyData.totalBusinessCreditTxns is known) then {
				    blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessCreditTxns + aMonthlyData.totalBusinessCreditTxns;
				}
				if(aMonthlyData.numberOfBusinessCreditTxns is known) then {
				    blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns + aMonthlyData.numberOfBusinessCreditTxns;
				}
				if(aMonthlyData.numberOfBusinessDebitTxns is known) then {
				    blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns + aMonthlyData.numberOfBusinessDebitTxns;
				}
				j=j+1;
		
		        monthCounter =monthCounter+1;
		        print("monthCounter ::"monthCounter);
	        }
	        //Exiting MonthlyData2 Loop
		}
		
		//Calculating Variable for last 12Months Count from monthlyData3
		else if(i=2 and perfiosData.data.additionalMonthlyDetails is known and perfiosData.data.additionalMonthlyDetails.monthlyData3 is known) then{
	        print("---->MonthlyData3.count ::"perfiosData.data.additionalMonthlyDetails.monthlyData3.count);
	        bufferTwelveMonthCounter =perfiosData.data.additionalMonthlyDetails.monthlyData3.count -12;
	
	        monthCounter =0;
	        //Entering MonthlyData3 Loop
	        for each MonthlyData in perfiosData.data.additionalMonthlyDetails.monthlyData3 do{
		        aMonthlyData is some MonthlyData initially it as a MonthlyData;
		
		        if(bufferTwelveMonthCounter<= monthCounter)then{
			
			        //Counting cCBalConsistencyThresholdBreachCount
			        if(cCBalConsistencyThreshold is known and aMonthlyData.totalBusinessCreditTxns is known and (cCBalConsistencyThreshold>aMonthlyData.totalBusinessCreditTxns))then{
				        cCBalConsistencyThresholdBreachCount =cCBalConsistencyThresholdBreachCount+1;
			        }
			
			        //Calculating Average Credit Count Consistency
			        if(aMonthlyData.numberOfBusinessCreditTxns is known and aMonthlyData.numberOfBusinessCreditTxns<5)then{
				        aCCBreachCount =aCCBreachCount+1;
			        }
			
			        //Calculating Average Credit Consistency Count
			        if(aMonthlyData.numberOfBusinessDebitTxns is known and aMonthlyData.numberOfBusinessDebitTxns<5)then{
				        aDCBreachCount =aDCBreachCount +1;
			        }
		        }
		        print("---->cCBalConsistencyThreshold ::"cCBalConsistencyThreshold);
		        print("---->aCCBreachCount ::"aCCBreachCount);
		        print("---->aDCBreachCount ::"aDCBreachCount);
				
				if(aMonthlyData.totalBusinessCreditTxns is known) then {
				    blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessCreditTxns + aMonthlyData.totalBusinessCreditTxns;
				}
				if(aMonthlyData.numberOfBusinessCreditTxns is known) then {
				    blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns + aMonthlyData.numberOfBusinessCreditTxns;
				}
				if(aMonthlyData.numberOfBusinessDebitTxns is known) then {
				    blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns + aMonthlyData.numberOfBusinessDebitTxns;
				}
				j=j+1;
		
		        monthCounter =monthCounter+1;
		        print("monthCounter ::"monthCounter);
	        }
	        //Exiting MonthlyData3 Loop
		}
		
		//Calculating Variable for last 12Months Count from monthlyData4
		else if(i=3 and perfiosData.data.additionalMonthlyDetails is known and perfiosData.data.additionalMonthlyDetails.monthlyData4 is known) then{
	        print("---->MonthlyData4.count ::"perfiosData.data.additionalMonthlyDetails.monthlyData4.count);
	        bufferTwelveMonthCounter =perfiosData.data.additionalMonthlyDetails.monthlyData4.count -12;
	
	        monthCounter =0;
	        //Entering MonthlyData4 Loop
	        for each MonthlyData in perfiosData.data.additionalMonthlyDetails.monthlyData4 do{
		        aMonthlyData is some MonthlyData initially it as a MonthlyData;
		
		        if(bufferTwelveMonthCounter<= monthCounter)then{
			
			        //Counting cCBalConsistencyThresholdBreachCount
			        if(cCBalConsistencyThreshold is known and aMonthlyData.totalBusinessCreditTxns is known and (cCBalConsistencyThreshold>aMonthlyData.totalBusinessCreditTxns))then{
				        cCBalConsistencyThresholdBreachCount =cCBalConsistencyThresholdBreachCount+1;
			        }
			
			        //Calculating Average Credit Count Consistency
			        if(aMonthlyData.numberOfBusinessCreditTxns is known and aMonthlyData.numberOfBusinessCreditTxns<5)then{
				        aCCBreachCount =aCCBreachCount+1;
			        }
			
			        //Calculating Average Credit Consistency Count
			        if(aMonthlyData.numberOfBusinessDebitTxns is known and aMonthlyData.numberOfBusinessDebitTxns<5)then{
				        aDCBreachCount =aDCBreachCount +1;
			        }
		        }
		        print("---->cCBalConsistencyThreshold ::"cCBalConsistencyThreshold);
		        print("---->aCCBreachCount ::"aCCBreachCount);
		        print("---->aDCBreachCount ::"aDCBreachCount);
		
				if(aMonthlyData.totalBusinessCreditTxns is known) then {
				    blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessCreditTxns + aMonthlyData.totalBusinessCreditTxns;
				}
				if(aMonthlyData.numberOfBusinessCreditTxns is known) then {
				    blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns + aMonthlyData.numberOfBusinessCreditTxns;
				}
				if(aMonthlyData.numberOfBusinessDebitTxns is known) then {
				    blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns + aMonthlyData.numberOfBusinessDebitTxns;
				}
				j=j+1;
		
		        monthCounter =monthCounter+1;
		        print("monthCounter ::"monthCounter);
	        }
	        //Exiting MonthlyData4 Loop
		}
		
		//Calculating Variable for last 12Months Count from monthlyData5
		else if(i=4 and perfiosData.data.additionalMonthlyDetails is known and perfiosData.data.additionalMonthlyDetails.monthlyData5 is known) then{
	        print("---->MonthlyData5.count ::"perfiosData.data.additionalMonthlyDetails.monthlyData5.count);
	        bufferTwelveMonthCounter =perfiosData.data.additionalMonthlyDetails.monthlyData5.count -12;
	
	        monthCounter =0;
	        //Entering MonthlyData5 Loop
	        for each MonthlyData in perfiosData.data.additionalMonthlyDetails.monthlyData5 do{
		        aMonthlyData is some MonthlyData initially it as a MonthlyData;
		
		        if(bufferTwelveMonthCounter<= monthCounter)then{
			
			        //Counting cCBalConsistencyThresholdBreachCount
			        if(cCBalConsistencyThreshold is known and aMonthlyData.totalBusinessCreditTxns is known and (cCBalConsistencyThreshold>aMonthlyData.totalBusinessCreditTxns))then{
				        cCBalConsistencyThresholdBreachCount =cCBalConsistencyThresholdBreachCount+1;
			        }
			
			        //Calculating Average Credit Count Consistency
			        if(aMonthlyData.numberOfBusinessCreditTxns is known and aMonthlyData.numberOfBusinessCreditTxns<5)then{
				        aCCBreachCount =aCCBreachCount+1;
			        }
			
			        //Calculating Average Credit Consistency Count
			        if(aMonthlyData.numberOfBusinessDebitTxns is known and aMonthlyData.numberOfBusinessDebitTxns<5)then{
				        aDCBreachCount =aDCBreachCount +1;
			        }
		        }
		        print("---->cCBalConsistencyThreshold ::"cCBalConsistencyThreshold);
		        print("---->aCCBreachCount ::"aCCBreachCount);
		        print("---->aDCBreachCount ::"aDCBreachCount);
		
				if(aMonthlyData.totalBusinessCreditTxns is known) then {
				    blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessCreditTxns + aMonthlyData.totalBusinessCreditTxns;
				}
				if(aMonthlyData.numberOfBusinessCreditTxns is known) then {
				    blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns + aMonthlyData.numberOfBusinessCreditTxns;
				}
				if(aMonthlyData.numberOfBusinessDebitTxns is known) then {
				    blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns + aMonthlyData.numberOfBusinessDebitTxns;
				}
				j=j+1;
		
		        monthCounter =monthCounter+1;
		        print("monthCounter ::"monthCounter);
	        }
	        //Exiting MonthlyData5 Loop
		}
		
		//Calculating Variable for last 12Months Count from monthlyData6
		else if(i=5 and perfiosData.data.additionalMonthlyDetails is known and perfiosData.data.additionalMonthlyDetails.monthlyData6 is known) then{
	        print("---->MonthlyData6.count ::"perfiosData.data.additionalMonthlyDetails.monthlyData6.count);
	        bufferTwelveMonthCounter =perfiosData.data.additionalMonthlyDetails.monthlyData6.count -12;
	
	        monthCounter =0;
	        //Entering MonthlyData6 Loop
	        for each MonthlyData in perfiosData.data.additionalMonthlyDetails.monthlyData6 do{
		        aMonthlyData is some MonthlyData initially it as a MonthlyData;
		
		        if(bufferTwelveMonthCounter<= monthCounter)then{
			
			        //Counting cCBalConsistencyThresholdBreachCount
			        if(cCBalConsistencyThreshold is known and aMonthlyData.totalBusinessCreditTxns is known and (cCBalConsistencyThreshold>aMonthlyData.totalBusinessCreditTxns))then{
				        cCBalConsistencyThresholdBreachCount =cCBalConsistencyThresholdBreachCount+1;
			        }
			
			        //Calculating Average Credit Count Consistency
			        if(aMonthlyData.numberOfBusinessCreditTxns is known and aMonthlyData.numberOfBusinessCreditTxns<5)then{
				        aCCBreachCount =aCCBreachCount+1;
			        }
			
			        //Calculating Average Credit Consistency Count
			        if(aMonthlyData.numberOfBusinessDebitTxns is known and aMonthlyData.numberOfBusinessDebitTxns<5)then{
				        aDCBreachCount =aDCBreachCount +1;
			        }
		        }
		        print("---->cCBalConsistencyThreshold ::"cCBalConsistencyThreshold);
		        print("---->aCCBreachCount ::"aCCBreachCount);
		        print("---->aDCBreachCount ::"aDCBreachCount);
		
				if(aMonthlyData.totalBusinessCreditTxns is known) then {
				    blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessCreditTxns + aMonthlyData.totalBusinessCreditTxns;
				}
				if(aMonthlyData.numberOfBusinessCreditTxns is known) then {
				    blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns + aMonthlyData.numberOfBusinessCreditTxns;
				}
				if(aMonthlyData.numberOfBusinessDebitTxns is known) then {
				    blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns + aMonthlyData.numberOfBusinessDebitTxns;
				}
				j=j+1;
		
		        monthCounter =monthCounter+1;
		        print("monthCounter ::"monthCounter);
	        }
	        //Exiting MonthlyData6 Loop
		}
		
		//Calculating Variable for last 12Months Count from monthlyData7
		else if(i=6 and perfiosData.data.additionalMonthlyDetails is known and perfiosData.data.additionalMonthlyDetails.monthlyData7 is known) then{
	        print("---->MonthlyData7.count ::"perfiosData.data.additionalMonthlyDetails.monthlyData7.count);
	        bufferTwelveMonthCounter =perfiosData.data.additionalMonthlyDetails.monthlyData7.count -12;
	
	        monthCounter =0;
	        //Entering MonthlyData7 Loop
	        for each MonthlyData in perfiosData.data.additionalMonthlyDetails.monthlyData7 do{
		        aMonthlyData is some MonthlyData initially it as a MonthlyData;
		
		        if(bufferTwelveMonthCounter<= monthCounter)then{
			
			        //Counting cCBalConsistencyThresholdBreachCount
			        if(cCBalConsistencyThreshold is known and aMonthlyData.totalBusinessCreditTxns is known and (cCBalConsistencyThreshold>aMonthlyData.totalBusinessCreditTxns))then{
				        cCBalConsistencyThresholdBreachCount =cCBalConsistencyThresholdBreachCount+1;
			        }
			
			        //Calculating Average Credit Count Consistency
			        if(aMonthlyData.numberOfBusinessCreditTxns is known and aMonthlyData.numberOfBusinessCreditTxns<5)then{
				        aCCBreachCount =aCCBreachCount+1;
			        }
			
			        //Calculating Average Credit Consistency Count
			        if(aMonthlyData.numberOfBusinessDebitTxns is known and aMonthlyData.numberOfBusinessDebitTxns<5)then{
				        aDCBreachCount =aDCBreachCount +1;
			        }
		        }
		        print("---->cCBalConsistencyThreshold ::"cCBalConsistencyThreshold);
		        print("---->aCCBreachCount ::"aCCBreachCount);
		        print("---->aDCBreachCount ::"aDCBreachCount);
		
				if(aMonthlyData.totalBusinessCreditTxns is known) then {
				    blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessCreditTxns + aMonthlyData.totalBusinessCreditTxns;
				}
				if(aMonthlyData.numberOfBusinessCreditTxns is known) then {
				    blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns + aMonthlyData.numberOfBusinessCreditTxns;
				}
				if(aMonthlyData.numberOfBusinessDebitTxns is known) then {
				    blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns + aMonthlyData.numberOfBusinessDebitTxns;
				}
				j=j+1;
		
		        monthCounter =monthCounter+1;
		        print("monthCounter ::"monthCounter);
	        }
	        //Exiting MonthlyData7 Loop
		}
		
		//Calculating Variable for last 12Months Count from monthlyData8
		else if(i=7 and perfiosData.data.additionalMonthlyDetails is known and perfiosData.data.additionalMonthlyDetails.monthlyData8 is known) then{
	        print("---->MonthlyData8.count ::"perfiosData.data.additionalMonthlyDetails.monthlyData8.count);
	        bufferTwelveMonthCounter =perfiosData.data.additionalMonthlyDetails.monthlyData8.count -12;
	
	        monthCounter =0;
	        //Entering MonthlyData8 Loop
	        for each MonthlyData in perfiosData.data.additionalMonthlyDetails.monthlyData8 do{
		        aMonthlyData is some MonthlyData initially it as a MonthlyData;
		
		        if(bufferTwelveMonthCounter<= monthCounter)then{
			
			        //Counting cCBalConsistencyThresholdBreachCount
			        if(cCBalConsistencyThreshold is known and aMonthlyData.totalBusinessCreditTxns is known and (cCBalConsistencyThreshold>aMonthlyData.totalBusinessCreditTxns))then{
				        cCBalConsistencyThresholdBreachCount =cCBalConsistencyThresholdBreachCount+1;
			        }
			
			        //Calculating Average Credit Count Consistency
			        if(aMonthlyData.numberOfBusinessCreditTxns is known and aMonthlyData.numberOfBusinessCreditTxns<5)then{
				        aCCBreachCount =aCCBreachCount+1;
			        }
			
			        //Calculating Average Credit Consistency Count
			        if(aMonthlyData.numberOfBusinessDebitTxns is known and aMonthlyData.numberOfBusinessDebitTxns<5)then{
				        aDCBreachCount =aDCBreachCount +1;
			        }
		        }
		        print("---->cCBalConsistencyThreshold ::"cCBalConsistencyThreshold);
		        print("---->aCCBreachCount ::"aCCBreachCount);
		        print("---->aDCBreachCount ::"aDCBreachCount);
		
				if(aMonthlyData.totalBusinessCreditTxns is known) then {
				    blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessCreditTxns + aMonthlyData.totalBusinessCreditTxns;
				}
				if(aMonthlyData.numberOfBusinessCreditTxns is known) then {
				    blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns + aMonthlyData.numberOfBusinessCreditTxns;
				}
				if(aMonthlyData.numberOfBusinessDebitTxns is known) then {
				    blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns + aMonthlyData.numberOfBusinessDebitTxns;
				}
				j=j+1;
		
		        monthCounter =monthCounter+1;
		        print("monthCounter ::"monthCounter);
	        }
	        //Exiting MonthlyData8 Loop
		}
		
		//Calculating Variable for last 12Months Count from monthlyData9
		else if(i=8 and perfiosData.data.additionalMonthlyDetails is known and perfiosData.data.additionalMonthlyDetails.monthlyData9 is known) then{
	        print("---->MonthlyData9.count ::"perfiosData.data.additionalMonthlyDetails.monthlyData9.count);
	        bufferTwelveMonthCounter =perfiosData.data.additionalMonthlyDetails.monthlyData9.count -12;
	
	        monthCounter =0;
	        //Entering MonthlyData9 Loop
	        for each MonthlyData in perfiosData.data.additionalMonthlyDetails.monthlyData9 do{
		        aMonthlyData is some MonthlyData initially it as a MonthlyData;
		
		        if(bufferTwelveMonthCounter<= monthCounter)then{
			
			        //Counting cCBalConsistencyThresholdBreachCount
			        if(cCBalConsistencyThreshold is known and aMonthlyData.totalBusinessCreditTxns is known and (cCBalConsistencyThreshold>aMonthlyData.totalBusinessCreditTxns))then{
				        cCBalConsistencyThresholdBreachCount =cCBalConsistencyThresholdBreachCount+1;
			        }
			
			        //Calculating Average Credit Count Consistency
			        if(aMonthlyData.numberOfBusinessCreditTxns is known and aMonthlyData.numberOfBusinessCreditTxns<5)then{
				        aCCBreachCount =aCCBreachCount+1;
			        }
			
			        //Calculating Average Credit Consistency Count
			        if(aMonthlyData.numberOfBusinessDebitTxns is known and aMonthlyData.numberOfBusinessDebitTxns<5)then{
				        aDCBreachCount =aDCBreachCount +1;
			        }
		        }
		        print("---->cCBalConsistencyThreshold ::"cCBalConsistencyThreshold);
		        print("---->aCCBreachCount ::"aCCBreachCount);
		        print("---->aDCBreachCount ::"aDCBreachCount);
		
				if(aMonthlyData.totalBusinessCreditTxns is known) then {
				    blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessCreditTxns + aMonthlyData.totalBusinessCreditTxns;
				}
				if(aMonthlyData.numberOfBusinessCreditTxns is known) then {
				    blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns + aMonthlyData.numberOfBusinessCreditTxns;
				}
				if(aMonthlyData.numberOfBusinessDebitTxns is known) then {
				    blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns + aMonthlyData.numberOfBusinessDebitTxns;
				}
				j=j+1;
		
		        monthCounter =monthCounter+1;
		        print("monthCounter ::"monthCounter);
	        }
	        //Exiting MonthlyData9 Loop
		}
		
		//Calculating Variable for last 12Months Count from monthlyData10
		else if(i=9 and perfiosData.data.additionalMonthlyDetails is known and perfiosData.data.additionalMonthlyDetails.monthlyData10 is known) then{
	        print("---->MonthlyData10.count ::"perfiosData.data.additionalMonthlyDetails.monthlyData10.count);
	        bufferTwelveMonthCounter =perfiosData.data.additionalMonthlyDetails.monthlyData10.count -12;
	
	        monthCounter =0;
	        //Entering MonthlyData10 Loop
	        for each MonthlyData in perfiosData.data.additionalMonthlyDetails.monthlyData10 do{
		        aMonthlyData is some MonthlyData initially it as a MonthlyData;
		
		        if(bufferTwelveMonthCounter<= monthCounter)then{
			
			        //Counting cCBalConsistencyThresholdBreachCount
			        if(cCBalConsistencyThreshold is known and aMonthlyData.totalBusinessCreditTxns is known and (cCBalConsistencyThreshold>aMonthlyData.totalBusinessCreditTxns))then{
				        cCBalConsistencyThresholdBreachCount =cCBalConsistencyThresholdBreachCount+1;
			        }
			
			        //Calculating Average Credit Count Consistency
			        if(aMonthlyData.numberOfBusinessCreditTxns is known and aMonthlyData.numberOfBusinessCreditTxns<5)then{
				        aCCBreachCount =aCCBreachCount+1;
			        }
			
			        //Calculating Average Credit Consistency Count
			        if(aMonthlyData.numberOfBusinessDebitTxns is known and aMonthlyData.numberOfBusinessDebitTxns<5)then{
				        aDCBreachCount =aDCBreachCount +1;
			        }
		        }
		        print("---->cCBalConsistencyThreshold ::"cCBalConsistencyThreshold);
		        print("---->aCCBreachCount ::"aCCBreachCount);
		        print("---->aDCBreachCount ::"aDCBreachCount);
		
				if(aMonthlyData.totalBusinessCreditTxns is known) then {
				    blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessCreditTxns + aMonthlyData.totalBusinessCreditTxns;
				}
				if(aMonthlyData.numberOfBusinessCreditTxns is known) then {
				    blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns + aMonthlyData.numberOfBusinessCreditTxns;
				}
				if(aMonthlyData.numberOfBusinessDebitTxns is known) then {
				    blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns + aMonthlyData.numberOfBusinessDebitTxns;
				}
				j=j+1;
		
		        monthCounter =monthCounter+1;
		        print("monthCounter ::"monthCounter);
	        }
	        //Exiting MonthlyData10 Loop
		}
		
		//Calculating Variable for last 12Months Count from monthlyData11
		else if(i=10 and perfiosData.data.additionalMonthlyDetails is known and perfiosData.data.additionalMonthlyDetails.monthlyData11 is known) then{
	        print("---->MonthlyData11.count ::"perfiosData.data.additionalMonthlyDetails.monthlyData11.count);
	        bufferTwelveMonthCounter =perfiosData.data.additionalMonthlyDetails.monthlyData11.count -12;
	
	        monthCounter =0;
	        //Entering MonthlyData11 Loop
	        for each MonthlyData in perfiosData.data.additionalMonthlyDetails.monthlyData11 do{
		        aMonthlyData is some MonthlyData initially it as a MonthlyData;
		
		        if(bufferTwelveMonthCounter<= monthCounter)then{
			
			        //Counting cCBalConsistencyThresholdBreachCount
			        if(cCBalConsistencyThreshold is known and aMonthlyData.totalBusinessCreditTxns is known and (cCBalConsistencyThreshold>aMonthlyData.totalBusinessCreditTxns))then{
				        cCBalConsistencyThresholdBreachCount =cCBalConsistencyThresholdBreachCount+1;
			        }
			
			        //Calculating Average Credit Count Consistency
			        if(aMonthlyData.numberOfBusinessCreditTxns is known and aMonthlyData.numberOfBusinessCreditTxns<5)then{
				        aCCBreachCount =aCCBreachCount+1;
			        }
			
			        //Calculating Average Credit Consistency Count
			        if(aMonthlyData.numberOfBusinessDebitTxns is known and aMonthlyData.numberOfBusinessDebitTxns<5)then{
				        aDCBreachCount =aDCBreachCount +1;
			        }
		        }
		        print("---->cCBalConsistencyThreshold ::"cCBalConsistencyThreshold);
		        print("---->aCCBreachCount ::"aCCBreachCount);
		        print("---->aDCBreachCount ::"aDCBreachCount);
		
				if(aMonthlyData.totalBusinessCreditTxns is known) then {
				    blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].totalBusinessCreditTxns + aMonthlyData.totalBusinessCreditTxns;
				}
				if(aMonthlyData.numberOfBusinessCreditTxns is known) then {
				    blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessCreditTxns + aMonthlyData.numberOfBusinessCreditTxns;
				}
				if(aMonthlyData.numberOfBusinessDebitTxns is known) then {
				    blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns = blazeAccountAnalysis.blazeMonthlyDataArray[j].numberOfBusinessDebitTxns + aMonthlyData.numberOfBusinessDebitTxns;
				}
				j=j+1;
		
		        monthCounter =monthCounter+1;
		        print("monthCounter ::"monthCounter);
	        }
	        //Exiting MonthlyData11 Loop
		}
	
	    //Calculating Inward Cheque Bounces
	    if(perfiosData.data.accountAnalysis[i].summaryInfo.total.inwChqBounces is known and perfiosData.data.accountAnalysis[i].summaryInfo.total.chqIssues is known and perfiosData.data.accountAnalysis[i].summaryInfo.total.chqIssues>0)then{
            inwardChequeBounceRate =perfiosData.data.accountAnalysis[i].summaryInfo.total.inwChqBounces/perfiosData.data.accountAnalysis[i].summaryInfo.total.chqIssues;
			
			// Calculation for Combined Variables
			if(i=0) then {
				blazeAccountAnalysis.inwChqBounces = 0;
				blazeAccountAnalysis.chqIssues = 0;
			}
			blazeAccountAnalysis.inwChqBounces = blazeAccountAnalysis.inwChqBounces + perfiosData.data.accountAnalysis[i].summaryInfo.total.inwChqBounces;
			blazeAccountAnalysis.chqIssues = blazeAccountAnalysis.chqIssues + perfiosData.data.accountAnalysis[i].summaryInfo.total.chqIssues;
        }
	    print("---->inwardChequeBounceRate ::"inwardChequeBounceRate);
	    //Variables Calculations Ends
	
	    //Calling Scorecard
	    aBBDinExpectationModelDecision is some NdScoreModelReturnInfo initially a NdScoreModelReturnInfo;
	    aBBDinExpectationModelDecision=ABB_Dip_Expectation_Score_Card_Instance(balConsitencyBreachCount,balanceTrendDifference,cCBalConsistencyThresholdBreachCount,aCCBreachCount,aDCBreachCount,inwardChequeBounceRate);
	    
	    aBBScore=aBBDinExpectationModelDecision.score;
		
	    for each NdScoredCharacteristic in aBBDinExpectationModelDecision.scoredCharacteristics do {
		    scoredCharacteristics  is  some  NdScoredCharacteristic  initially  it  as  a  NdScoredCharacteristic;
		    scoreCardCharacteristicsDetail is some ScoreCardCharacteristicsDetail initially a ScoreCardCharacteristicsDetail;   
		    scoreCardCharacteristicsDetail.characteristicName = scoredCharacteristics.characteristicName;  
            if(scoredCharacteristics.binLabel = (ignoring case) "All Other") then {
                scoreCardCharacteristicsDetail.characteristicValue =  "Blue,NA";
			}		
            else {			
		        scoreCardCharacteristicsDetail.characteristicValue =  scoredCharacteristics.binLabel;
            }
		    scoreCardCharacteristicsDetail.reasonCode = scoredCharacteristics.reasonCode as a string;
		    scoreCardCharacteristicsDetail.partialScore = scoredCharacteristics.partialScore as a string;
		    scoreCardCharacteristicsArray.append(scoreCardCharacteristicsDetail);
	    }
        print("----> scoreCardCharacteristicsArray count :: " scoreCardCharacteristicsArray.count);
	
        scoreCardDetail is some ScoreCardDetail initially a ScoreCardDetail;  
        if(scoreCardCharacteristicsArray <> unknown and scoreCardCharacteristicsArray <> null) then {
            scoreCardDetail.scoreCardCharacteristics = scoreCardCharacteristicsArray;
        }
		
        // RAG Classification	
        aBBDipRagFlag = ABB_Dip_Rag_Classification(aBBScore);
        print("---->ragClassification ::"aBlazeApplication.ragClassification);
	    print("---->customerType ::"aBlazeApplication.customerType);
	
	    if(aBlazeApplication.customerType is (known and available) and aBlazeApplication.customerType is not null and aBlazeApplication.customerType<>"") then {
            scoreCardDetail.scorecardName = aBBDinExpectationModelDecision.scoreModelName","aBlazeApplication.customerType","aBlazeApplication.ragClassification;    
	    }	
	    else {
		    scoreCardDetail.scorecardName = aBBDinExpectationModelDecision.scoreModelName",INSUFFICIENT DATA,BLUE";
	    }
        print("Final Score Card Name  ---> "scoreCardDetail.scorecardName);
        scoreCardDetail.scorecardScore = aBBDinExpectationModelDecision.score;
        scoreCardDetail.characteristicCount = aBBDinExpectationModelDecision.characteristicCount;
        scoreCardDetail.scorecardKey = "appScore";
        scoreCardDetail.purpose = "AverageBankBalance_"i;
        scoreCardDetail.entityType =applicantType;
        scoreCardDetail.entityId = applicantId;  
        scoreCardDetailArray.append(scoreCardDetail);  
    }
    i = i+1;
}

// Calculations for Combined scorecard
print("**********Calculations for Combined scorecard************");
if(accountAnalysisCount>1) then {
	scoreCardCharacteristicsArray is some array of ScoreCardCharacteristicsDetail initially an array of ScoreCardCharacteristicsDetail;
	
    //Calculating Variable for last 12Months Count
	bufferTwelveMonthCounter=varInit;
	last3MBufferCount=0;
	monthCounter=0;
	abbDivisor=0;
	sumBalAvg=0;
	first3MBufferCount=0;
	aBB=varInit;
	first3MBalAvg=0;
	last3MBalAvg=0;
	balanceTrendDifference=varInit;
	thresholdAbb=varInit;
    balConsitencyBreachCount=0;
	inwardChequeBounceRate=varInit;
	aBlazeApplication.ragClassification="";
	aBlazeApplication.customerType="";
	aBBDipRagFlag = "";
	aBBScore = 0;
	
	    // Calculate Avg values for combined monthlyData
		for each BlazeMonthlyData in blazeAccountAnalysis.blazeMonthlyDataArray do {
			aMonthlyData is some BlazeMonthlyData initially it as a BlazeMonthlyData;
			if(aMonthlyData.totalBusinessCreditTxns is known) then {
				aMonthlyData.totalBusinessCreditTxns = aMonthlyData.totalBusinessCreditTxns/accountAnalysisCount;
			}
		    if(aMonthlyData.numberOfBusinessCreditTxns is known) then {
				aMonthlyData.numberOfBusinessCreditTxns = aMonthlyData.numberOfBusinessCreditTxns/accountAnalysisCount;
		    }
		    if(aMonthlyData.numberOfBusinessDebitTxns is known) then {
				aMonthlyData.numberOfBusinessDebitTxns = aMonthlyData.numberOfBusinessDebitTxns/accountAnalysisCount;
		    }
		}
	
	if(blazeAccountAnalysis is not null and blazeAccountAnalysis.blazeMonthlyDetailArray is not null)then{
		print("---->blazeMonthlyDetailArray.count ::"blazeAccountAnalysis.blazeMonthlyDetailArray.count);
		bufferTwelveMonthCounter =blazeAccountAnalysis.blazeMonthlyDetailArray.count -12;
		if(bufferTwelveMonthCounter<=0)then{
			bufferTwelveMonthCounter =0;
		}
		print("---->bufferTwelveMonthCounter ::"bufferTwelveMonthCounter);
		
		last3MBufferCount =blazeAccountAnalysis.blazeMonthlyDetailArray.count -3;
		if(last3MBufferCount<=0)then{
			last3MBufferCount =0;
		}
		print("---->last3MBufferCount ::"last3MBufferCount);
		
	    for each BlazeMonthlyDetail in blazeAccountAnalysis.blazeMonthlyDetailArray do{
	        //Entering monthlyDetails Loop
		    aMonthlyDetail is some BlazeMonthlyDetail initially it as a BlazeMonthlyDetail;
	  
		    //Condition to satisfy for only last 12 objects/months
		    if(bufferTwelveMonthCounter<=monthCounter and aMonthlyDetail.balAvg is known)then{
			    sumBalAvg =sumBalAvg +aMonthlyDetail.balAvg;
			    abbDivisor =abbDivisor +1;
		        first3MBufferCount =first3MBufferCount+1;
			
			    //Condition for first 3months of last 12 objects/months
			    if(first3MBufferCount<=3 and aMonthlyDetail.balAvg is known)then{
				   first3MBalAvg =first3MBalAvg +aMonthlyDetail.balAvg;
			    }
			
			    if(last3MBufferCount<=monthCounter and aMonthlyDetail.balAvg is known)then{
				    last3MBalAvg =last3MBalAvg+aMonthlyDetail.balAvg;
			    }
		    }
            monthCounter =monthCounter+1;
	        //Exiting BlazeMonthlyDetail Loop
	    }
	    print("---->sumBalAvg ::"sumBalAvg);
	
	    //Clculating aBB
	    if(abbDivisor <>0)then{
		    aBB =sumBalAvg/abbDivisor;
	    }
	    print("aBB ::"aBB);
	
	    if(aBB is known)then{
		    thresholdAbb =aBB/3;
	    }
	    print("---->thresholdAbb ::"thresholdAbb);
	
	    //Calculating Average of first 3Months of last 12months
	    print("---->first3MBalAvg before division ::"first3MBalAvg);
	    first3MBalAvg =first3MBalAvg/3;
	    print("---->first3MBalAvg After division ::"first3MBalAvg);
	
	    //Calculating Average of last 3Months
	    print("---->last3MBalAvg before division ::"last3MBalAvg);
	    last3MBalAvg =last3MBalAvg/3;
	    print("---->last3MBalAvg After division ::"last3MBalAvg);
	
	    //Calcuting Differnce in percetage between first and last 3months of last 12Months
	    balanceTrendDifference =(last3MBalAvg-first3MBalAvg)/(first3MBalAvg*100);
	    print("---->balanceTrendDifference ::"balanceTrendDifference);
	
	    monthCounter =0;
	    for each BlazeMonthlyDetail in blazeAccountAnalysis.blazeMonthlyDetailArray do{
	        //Entering BlazeMonthlyDetail Loop
	        aMonthlyDetail is some BlazeMonthlyDetail initially it as a BlazeMonthlyDetail;
	
	        if(bufferTwelveMonthCounter<monthCounter)then{
		        if(aMonthlyDetail.balAvg<thresholdAbb)then{
			        balConsitencyBreachCount =balConsitencyBreachCount+1;
		        }
	        }
	        print("---->balConsitencyBreachCount ::"balConsitencyBreachCount);

	        monthCounter =monthCounter+1;
	        print("********Exiting BlazeMonthlyDetail Loop*********");
	        //Exiting BlazeMonthlyDetail Loop
	    }
	
	    //Declaring Variables for BlazeMonthlyData Loop
	    cCBalConsistencyThresholdBreachCount=0;
	    aCCBreachCount=0;
	    aDCBreachCount=0;
		
	    //Calculating Variable for last 12Months Count from BlazeMonthlyData
		if(blazeAccountAnalysis.blazeMonthlyDataArray is known) then{
	        print("---->blazeMonthlyDataArray.count ::"blazeAccountAnalysis.blazeMonthlyDataArray.count);
	        bufferTwelveMonthCounter =blazeAccountAnalysis.blazeMonthlyDataArray.count -12;
	
	        monthCounter =0;
	        //Entering BlazeMonthlyData Loop
	        for each BlazeMonthlyData in blazeAccountAnalysis.blazeMonthlyDataArray do{
		        aMonthlyData is some BlazeMonthlyData initially it as a BlazeMonthlyData;
		
		        if(bufferTwelveMonthCounter<= monthCounter)then{
			
			        //Counting cCBalConsistencyThresholdBreachCount
			        if(cCBalConsistencyThreshold is known and aMonthlyData.totalBusinessCreditTxns is known and (cCBalConsistencyThreshold>aMonthlyData.totalBusinessCreditTxns))then{
				        cCBalConsistencyThresholdBreachCount =cCBalConsistencyThresholdBreachCount+1;
			        }
			
			        //Calculating Average Credit Count Consistency
			        if(aMonthlyData.numberOfBusinessCreditTxns is known and aMonthlyData.numberOfBusinessCreditTxns<5)then{
				        aCCBreachCount =aCCBreachCount+1;
			        }
			
			        //Calculating Average Debit Consistency Count
			        if(aMonthlyData.numberOfBusinessDebitTxns is known and aMonthlyData.numberOfBusinessDebitTxns<5)then{
				        aDCBreachCount =aDCBreachCount +1;
			        }
		        }
		        print("---->cCBalConsistencyThreshold ::"cCBalConsistencyThreshold);
		        print("---->aCCBreachCount ::"aCCBreachCount);
		        print("---->aDCBreachCount ::"aDCBreachCount);
				
		        monthCounter =monthCounter+1;
		        print("monthCounter ::"monthCounter);
	        }
	        //Exiting BlazeMonthlyData Loop
		}
		
	    //Calculating Inward Cheque Bounces
	    if(blazeAccountAnalysis.inwChqBounces is known and blazeAccountAnalysis.chqIssues is known and blazeAccountAnalysis.chqIssues>0)then{
            inwardChequeBounceRate =blazeAccountAnalysis.inwChqBounces/blazeAccountAnalysis.chqIssues;
        }
	    print("---->inwardChequeBounceRate ::"inwardChequeBounceRate);
	    //Variables Calculations Ends
	
	    //Calling Scorecard
		aBBDinExpectationModelDecisionComb is some NdScoreModelReturnInfo initially a NdScoreModelReturnInfo;
		aBBDinExpectationModelDecisionComb=ABB_Dip_Expectation_Score_Card_Instance(balConsitencyBreachCount,balanceTrendDifference,cCBalConsistencyThresholdBreachCount,aCCBreachCount,aDCBreachCount,inwardChequeBounceRate);
	    aBBScore=aBBDinExpectationModelDecisionComb.score;
		
	    for each NdScoredCharacteristic in aBBDinExpectationModelDecisionComb.scoredCharacteristics do {
		    scoredCharacteristics  is  some  NdScoredCharacteristic  initially  it  as  a  NdScoredCharacteristic;
		    scoreCardCharacteristicsDetail is some ScoreCardCharacteristicsDetail initially a ScoreCardCharacteristicsDetail;   
		    scoreCardCharacteristicsDetail.characteristicName = scoredCharacteristics.characteristicName;  
            if(scoredCharacteristics.binLabel = (ignoring case)	"All Other") then {
                scoreCardCharacteristicsDetail.characteristicValue =  "Blue,NA";
			}else {				
		        scoreCardCharacteristicsDetail.characteristicValue =  scoredCharacteristics.binLabel;
			}
		    scoreCardCharacteristicsDetail.reasonCode = scoredCharacteristics.reasonCode as a string;
		    scoreCardCharacteristicsDetail.partialScore = scoredCharacteristics.partialScore as a string;
		    scoreCardCharacteristicsArray.append(scoreCardCharacteristicsDetail);
	    }
        print("----> scoreCardCharacteristicsArray count :: " scoreCardCharacteristicsArray.count);
	
        scoreCardDetailComb is some ScoreCardDetail initially a ScoreCardDetail;  
        if(scoreCardCharacteristicsArray <> unknown and scoreCardCharacteristicsArray <> null) then {
            scoreCardDetailComb.scoreCardCharacteristics = scoreCardCharacteristicsArray;
        }
    
        // RAG Classification	
        aBBDipRagFlag = ABB_Dip_Rag_Classification(aBBScore);
        print("---->ragClassification ::"aBlazeApplication.ragClassification);
	    print("---->customerType ::"aBlazeApplication.customerType);
	
	    if(aBlazeApplication.customerType<>"") then {
            scoreCardDetailComb.scorecardName = aBBDinExpectationModelDecisionComb.scoreModelName","aBlazeApplication.customerType","aBlazeApplication.ragClassification;    
	    }	
	    else {
		    scoreCardDetailComb.scorecardName = aBBDinExpectationModelDecisionComb.scoreModelName",INSUFFICIENT DATA,BLUE";
	    }
        print("Final Score Card Name  ---> "scoreCardDetailComb.scorecardName);
        scoreCardDetailComb.scorecardScore = aBBDinExpectationModelDecisionComb.score;
        scoreCardDetailComb.characteristicCount = aBBDinExpectationModelDecisionComb.characteristicCount;
        scoreCardDetailComb.scorecardKey = "appScore";
        scoreCardDetailComb.purpose = "AverageBankBalance";
        scoreCardDetailComb.entityType =applicantType;
        scoreCardDetailComb.entityId = applicantId;  
        scoreCardDetailArray.append(scoreCardDetailComb);  
    }
}


print("++++> Exiting function :: fn_Perfios_ABB_Dip_Expectation_Model");
print("");
  
}catch an Exception with {
    aBlazeApplication.fn_Perfios_ABB_Dip_Expectation_Model = true;  
    print("\n***Exception :: \n>>@@@<<\n" evaluationException().toString()"\n>>@@@<<\n");  
}]]></value>
 </instance>
 <instance ref='CommentsVH'>
  <value></value>
 </instance>
 <instance ref='FunctionParametersVH'>
  <instance-list ref='ParametersVH'>
   <item template='DRNZKQyw5rcjBd4Yxo6FN649lWN.template1' id='NrfgjH'>
    <instance ref='ParameterNameVH'>
     <value>message</value>
    </instance>
    <instance ref='ParameterTypeVH'>
     <value>Message</value>
    </instance>
   </item>
   <item template='DRNZKQyw5rcjBd4Yxo6FN649lWN.template1' id='IM98RJ'>
    <instance ref='ParameterNameVH'>
     <value>perfiosData</value>
    </instance>
    <instance ref='ParameterTypeVH'>
     <value>PerfiosData</value>
    </instance>
   </item>
   <item template='DRNZKQyw5rcjBd4Yxo6FN649lWN.template1' id='9du98f'>
    <instance ref='ParameterNameVH'>
     <value>aBlazeApplicant</value>
    </instance>
    <instance ref='ParameterTypeVH'>
     <value>BlazeApplicant</value>
    </instance>
   </item>
  </instance-list>
 </instance>
</instantiation>